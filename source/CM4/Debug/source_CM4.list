
source_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3e4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0810d67c  0810d67c  0001d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810d6a4  0810d6a4  0001d6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810d6a8  0810d6a8  0001d6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  10000000  0810d6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ea0  10000094  0810d740  00020094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000f34  0810d740  00020f34  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  9 .debug_info   00044861  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000078d6  00000000  00000000  00064925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ec8  00000000  00000000  0006c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001c20  00000000  00000000  0006e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00048bef  00000000  00000000  0006fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002d7e8  00000000  00000000  000b88d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001aeb3f  00000000  00000000  000e60bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00294bfe  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000081b8  00000000  00000000  00294c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000094 	.word	0x10000094
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d664 	.word	0x0810d664

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000098 	.word	0x10000098
 81002d4:	0810d664 	.word	0x0810d664

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b082      	sub	sp, #8
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b25      	ldr	r3, [pc, #148]	; (81003ac <main+0x9c>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810031c:	4a23      	ldr	r2, [pc, #140]	; (81003ac <main+0x9c>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100326:	4b21      	ldr	r3, [pc, #132]	; (81003ac <main+0x9c>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100330:	607b      	str	r3, [r7, #4]
 8100332:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f004 f84f 	bl	81043d8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f005 f8c7 	bl	81054cc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f005 f848 	bl	81053d8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b19      	ldr	r3, [pc, #100]	; (81003b0 <main+0xa0>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b17      	ldr	r3, [pc, #92]	; (81003b4 <main+0xa4>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810035c:	4a15      	ldr	r2, [pc, #84]	; (81003b4 <main+0xa4>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b12      	ldr	r3, [pc, #72]	; (81003b4 <main+0xa4>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810036e:	4a11      	ldr	r2, [pc, #68]	; (81003b4 <main+0xa4>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 ff96 	bl	81012a8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810037c:	f000 fb58 	bl	8100a30 <MX_GPIO_Init>
  MX_CRC_Init();
 8100380:	f000 f81a 	bl	81003b8 <MX_CRC_Init>
  MX_LTDC_Init();
 8100384:	f000 f962 	bl	810064c <MX_LTDC_Init>
  MX_RNG_Init();
 8100388:	f000 fa12 	bl	81007b0 <MX_RNG_Init>
  MX_RTC_Init();
 810038c:	f000 fa26 	bl	81007dc <MX_RTC_Init>
  MX_SDMMC2_SD_Init();
 8100390:	f000 fa80 	bl	8100894 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 8100394:	f00b f9b4 	bl	810b700 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8100398:	f00c fd7a 	bl	810ce90 <MX_USB_HOST_Init>
  MX_DMA2D_Init();
 810039c:	f000 f82e 	bl	81003fc <MX_DMA2D_Init>
  MX_FMC_Init();
 81003a0:	f000 fa9c 	bl	81008dc <MX_FMC_Init>
  MX_DSIHOST_DSI_Init();
 81003a4:	f000 f864 	bl	8100470 <MX_DSIHOST_DSI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81003a8:	e7fe      	b.n	81003a8 <main+0x98>
 81003aa:	bf00      	nop
 81003ac:	58024400 	.word	0x58024400
 81003b0:	e000ed00 	.word	0xe000ed00
 81003b4:	58026400 	.word	0x58026400

081003b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 81003b8:	b580      	push	{r7, lr}
 81003ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 81003bc:	4b0d      	ldr	r3, [pc, #52]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003be:	4a0e      	ldr	r2, [pc, #56]	; (81003f8 <MX_CRC_Init+0x40>)
 81003c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 81003c2:	4b0c      	ldr	r3, [pc, #48]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003c4:	2200      	movs	r2, #0
 81003c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 81003c8:	4b0a      	ldr	r3, [pc, #40]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003ca:	2200      	movs	r2, #0
 81003cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 81003ce:	4b09      	ldr	r3, [pc, #36]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003d0:	2200      	movs	r2, #0
 81003d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 81003d4:	4b07      	ldr	r3, [pc, #28]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003d6:	2200      	movs	r2, #0
 81003d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 81003da:	4b06      	ldr	r3, [pc, #24]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003dc:	2201      	movs	r2, #1
 81003de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 81003e0:	4804      	ldr	r0, [pc, #16]	; (81003f4 <MX_CRC_Init+0x3c>)
 81003e2:	f001 f95d 	bl	81016a0 <HAL_CRC_Init>
 81003e6:	4603      	mov	r3, r0
 81003e8:	2b00      	cmp	r3, #0
 81003ea:	d001      	beq.n	81003f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 81003ec:	f000 fbd6 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 81003f0:	bf00      	nop
 81003f2:	bd80      	pop	{r7, pc}
 81003f4:	10000120 	.word	0x10000120
 81003f8:	58024c00 	.word	0x58024c00

081003fc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 81003fc:	b580      	push	{r7, lr}
 81003fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8100400:	4b19      	ldr	r3, [pc, #100]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100402:	4a1a      	ldr	r2, [pc, #104]	; (810046c <MX_DMA2D_Init+0x70>)
 8100404:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8100406:	4b18      	ldr	r3, [pc, #96]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100408:	2200      	movs	r2, #0
 810040a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 810040c:	4b16      	ldr	r3, [pc, #88]	; (8100468 <MX_DMA2D_Init+0x6c>)
 810040e:	2202      	movs	r2, #2
 8100410:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8100412:	4b15      	ldr	r3, [pc, #84]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100414:	2200      	movs	r2, #0
 8100416:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8100418:	4b13      	ldr	r3, [pc, #76]	; (8100468 <MX_DMA2D_Init+0x6c>)
 810041a:	2200      	movs	r2, #0
 810041c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 810041e:	4b12      	ldr	r3, [pc, #72]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100420:	2202      	movs	r2, #2
 8100422:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8100424:	4b10      	ldr	r3, [pc, #64]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100426:	2200      	movs	r2, #0
 8100428:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 810042a:	4b0f      	ldr	r3, [pc, #60]	; (8100468 <MX_DMA2D_Init+0x6c>)
 810042c:	2200      	movs	r2, #0
 810042e:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8100430:	4b0d      	ldr	r3, [pc, #52]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100432:	2200      	movs	r2, #0
 8100434:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8100436:	4b0c      	ldr	r3, [pc, #48]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100438:	2200      	movs	r2, #0
 810043a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 810043c:	4b0a      	ldr	r3, [pc, #40]	; (8100468 <MX_DMA2D_Init+0x6c>)
 810043e:	2200      	movs	r2, #0
 8100440:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8100442:	4809      	ldr	r0, [pc, #36]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100444:	f001 fa16 	bl	8101874 <HAL_DMA2D_Init>
 8100448:	4603      	mov	r3, r0
 810044a:	2b00      	cmp	r3, #0
 810044c:	d001      	beq.n	8100452 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 810044e:	f000 fba5 	bl	8100b9c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8100452:	2101      	movs	r1, #1
 8100454:	4804      	ldr	r0, [pc, #16]	; (8100468 <MX_DMA2D_Init+0x6c>)
 8100456:	f001 fa6f 	bl	8101938 <HAL_DMA2D_ConfigLayer>
 810045a:	4603      	mov	r3, r0
 810045c:	2b00      	cmp	r3, #0
 810045e:	d001      	beq.n	8100464 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 8100460:	f000 fb9c 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8100464:	bf00      	nop
 8100466:	bd80      	pop	{r7, pc}
 8100468:	10000308 	.word	0x10000308
 810046c:	52001000 	.word	0x52001000

08100470 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8100470:	b580      	push	{r7, lr}
 8100472:	b0ae      	sub	sp, #184	; 0xb8
 8100474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8100476:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 810047a:	2200      	movs	r2, #0
 810047c:	601a      	str	r2, [r3, #0]
 810047e:	605a      	str	r2, [r3, #4]
 8100480:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8100482:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8100486:	2224      	movs	r2, #36	; 0x24
 8100488:	2100      	movs	r1, #0
 810048a:	4618      	mov	r0, r3
 810048c:	f00d f81a 	bl	810d4c4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8100490:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8100494:	2200      	movs	r2, #0
 8100496:	601a      	str	r2, [r3, #0]
 8100498:	605a      	str	r2, [r3, #4]
 810049a:	609a      	str	r2, [r3, #8]
 810049c:	60da      	str	r2, [r3, #12]
 810049e:	611a      	str	r2, [r3, #16]
 81004a0:	615a      	str	r2, [r3, #20]
  DSI_VidCfgTypeDef VidCfg = {0};
 81004a2:	1d3b      	adds	r3, r7, #4
 81004a4:	226c      	movs	r2, #108	; 0x6c
 81004a6:	2100      	movs	r1, #0
 81004a8:	4618      	mov	r0, r3
 81004aa:	f00d f80b 	bl	810d4c4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 81004ae:	4b66      	ldr	r3, [pc, #408]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 81004b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 81004b4:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 81004b6:	4b64      	ldr	r3, [pc, #400]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 81004b8:	2200      	movs	r2, #0
 81004ba:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 3;
 81004bc:	4b62      	ldr	r3, [pc, #392]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 81004be:	2203      	movs	r2, #3
 81004c0:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 81004c2:	4b61      	ldr	r3, [pc, #388]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 81004c4:	2200      	movs	r2, #0
 81004c6:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 10;
 81004c8:	230a      	movs	r3, #10
 81004ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 81004ce:	2301      	movs	r3, #1
 81004d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 81004d4:	2300      	movs	r3, #0
 81004d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 81004da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 81004de:	4619      	mov	r1, r3
 81004e0:	4859      	ldr	r0, [pc, #356]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 81004e2:	f001 fadd 	bl	8101aa0 <HAL_DSI_Init>
 81004e6:	4603      	mov	r3, r0
 81004e8:	2b00      	cmp	r3, #0
 81004ea:	d001      	beq.n	81004f0 <MX_DSIHOST_DSI_Init+0x80>
  {
    Error_Handler();
 81004ec:	f000 fb56 	bl	8100b9c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 81004f0:	2301      	movs	r3, #1
 81004f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 81004f6:	2300      	movs	r3, #0
 81004f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 81004fc:	2300      	movs	r3, #0
 81004fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  HostTimeouts.HighSpeedReadTimeout = 0;
 8100502:	2300      	movs	r3, #0
 8100504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HostTimeouts.LowPowerReadTimeout = 0;
 8100508:	2300      	movs	r3, #0
 810050a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  HostTimeouts.HighSpeedWriteTimeout = 0;
 810050e:	2300      	movs	r3, #0
 8100510:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8100514:	2300      	movs	r3, #0
 8100516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  HostTimeouts.LowPowerWriteTimeout = 0;
 810051a:	2300      	movs	r3, #0
 810051c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HostTimeouts.BTATimeout = 0;
 8100520:	2300      	movs	r3, #0
 8100522:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8100526:	f107 0388 	add.w	r3, r7, #136	; 0x88
 810052a:	4619      	mov	r1, r3
 810052c:	4846      	ldr	r0, [pc, #280]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 810052e:	f001 ff50 	bl	81023d2 <HAL_DSI_ConfigHostTimeouts>
 8100532:	4603      	mov	r3, r0
 8100534:	2b00      	cmp	r3, #0
 8100536:	d001      	beq.n	810053c <MX_DSIHOST_DSI_Init+0xcc>
  {
    Error_Handler();
 8100538:	f000 fb30 	bl	8100b9c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 810053c:	231c      	movs	r3, #28
 810053e:	673b      	str	r3, [r7, #112]	; 0x70
  PhyTimings.ClockLaneLP2HSTime = 32;
 8100540:	2320      	movs	r3, #32
 8100542:	677b      	str	r3, [r7, #116]	; 0x74
  PhyTimings.DataLaneHS2LPTime = 15;
 8100544:	230f      	movs	r3, #15
 8100546:	67bb      	str	r3, [r7, #120]	; 0x78
  PhyTimings.DataLaneLP2HSTime = 24;
 8100548:	2318      	movs	r3, #24
 810054a:	67fb      	str	r3, [r7, #124]	; 0x7c
  PhyTimings.DataLaneMaxReadTime = 0;
 810054c:	2300      	movs	r3, #0
 810054e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PhyTimings.StopWaitTime = 0;
 8100552:	2300      	movs	r3, #0
 8100554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8100558:	f107 0370 	add.w	r3, r7, #112	; 0x70
 810055c:	4619      	mov	r1, r3
 810055e:	483a      	ldr	r0, [pc, #232]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 8100560:	f001 fecd 	bl	81022fe <HAL_DSI_ConfigPhyTimer>
 8100564:	4603      	mov	r3, r0
 8100566:	2b00      	cmp	r3, #0
 8100568:	d001      	beq.n	810056e <MX_DSIHOST_DSI_Init+0xfe>
  {
    Error_Handler();
 810056a:	f000 fb17 	bl	8100b9c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 810056e:	2104      	movs	r1, #4
 8100570:	4835      	ldr	r0, [pc, #212]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 8100572:	f001 fe9c 	bl	81022ae <HAL_DSI_ConfigFlowControl>
 8100576:	4603      	mov	r3, r0
 8100578:	2b00      	cmp	r3, #0
 810057a:	d001      	beq.n	8100580 <MX_DSIHOST_DSI_Init+0x110>
  {
    Error_Handler();
 810057c:	f000 fb0e 	bl	8100b9c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8100580:	f242 7110 	movw	r1, #10000	; 0x2710
 8100584:	4830      	ldr	r0, [pc, #192]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 8100586:	f001 ffea 	bl	810255e <HAL_DSI_SetLowPowerRXFilter>
 810058a:	4603      	mov	r3, r0
 810058c:	2b00      	cmp	r3, #0
 810058e:	d001      	beq.n	8100594 <MX_DSIHOST_DSI_Init+0x124>
  {
    Error_Handler();
 8100590:	f000 fb04 	bl	8100b9c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8100594:	2100      	movs	r1, #0
 8100596:	482c      	ldr	r0, [pc, #176]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 8100598:	f001 fb9c 	bl	8101cd4 <HAL_DSI_ConfigErrorMonitor>
 810059c:	4603      	mov	r3, r0
 810059e:	2b00      	cmp	r3, #0
 81005a0:	d001      	beq.n	81005a6 <MX_DSIHOST_DSI_Init+0x136>
  {
    Error_Handler();
 81005a2:	f000 fafb 	bl	8100b9c <Error_Handler>
  }
  VidCfg.VirtualChannelID = 0;
 81005a6:	2300      	movs	r3, #0
 81005a8:	607b      	str	r3, [r7, #4]
  VidCfg.ColorCoding = DSI_RGB565;
 81005aa:	2300      	movs	r3, #0
 81005ac:	60bb      	str	r3, [r7, #8]
  VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 81005ae:	2300      	movs	r3, #0
 81005b0:	60fb      	str	r3, [r7, #12]
  VidCfg.Mode = DSI_VID_MODE_NB_PULSES;
 81005b2:	2300      	movs	r3, #0
 81005b4:	613b      	str	r3, [r7, #16]
  VidCfg.PacketSize = 1;
 81005b6:	2301      	movs	r3, #1
 81005b8:	617b      	str	r3, [r7, #20]
  VidCfg.NumberOfChunks = 640;
 81005ba:	f44f 7320 	mov.w	r3, #640	; 0x280
 81005be:	61bb      	str	r3, [r7, #24]
  VidCfg.NullPacketSize = 0;
 81005c0:	2300      	movs	r3, #0
 81005c2:	61fb      	str	r3, [r7, #28]
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 81005c4:	2304      	movs	r3, #4
 81005c6:	623b      	str	r3, [r7, #32]
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 81005c8:	2302      	movs	r3, #2
 81005ca:	627b      	str	r3, [r7, #36]	; 0x24
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 81005cc:	2300      	movs	r3, #0
 81005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  VidCfg.HorizontalSyncActive = 5;
 81005d0:	2305      	movs	r3, #5
 81005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  VidCfg.HorizontalBackPorch = 4;
 81005d4:	2304      	movs	r3, #4
 81005d6:	633b      	str	r3, [r7, #48]	; 0x30
  VidCfg.HorizontalLine = 413;
 81005d8:	f240 139d 	movw	r3, #413	; 0x19d
 81005dc:	637b      	str	r3, [r7, #52]	; 0x34
  VidCfg.VerticalSyncActive = 4;
 81005de:	2304      	movs	r3, #4
 81005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  VidCfg.VerticalBackPorch = 2;
 81005e2:	2302      	movs	r3, #2
 81005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  VidCfg.VerticalFrontPorch = 2;
 81005e6:	2302      	movs	r3, #2
 81005e8:	643b      	str	r3, [r7, #64]	; 0x40
  VidCfg.VerticalActive = 480;
 81005ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 81005ee:	647b      	str	r3, [r7, #68]	; 0x44
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_DISABLE;
 81005f0:	2300      	movs	r3, #0
 81005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  VidCfg.LPLargestPacketSize = 0;
 81005f4:	2300      	movs	r3, #0
 81005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  VidCfg.LPVACTLargestPacketSize = 0;
 81005f8:	2300      	movs	r3, #0
 81005fa:	653b      	str	r3, [r7, #80]	; 0x50
  VidCfg.LPHorizontalFrontPorchEnable = DSI_LP_HFP_DISABLE;
 81005fc:	2300      	movs	r3, #0
 81005fe:	657b      	str	r3, [r7, #84]	; 0x54
  VidCfg.LPHorizontalBackPorchEnable = DSI_LP_HBP_DISABLE;
 8100600:	2300      	movs	r3, #0
 8100602:	65bb      	str	r3, [r7, #88]	; 0x58
  VidCfg.LPVerticalActiveEnable = DSI_LP_VACT_DISABLE;
 8100604:	2300      	movs	r3, #0
 8100606:	65fb      	str	r3, [r7, #92]	; 0x5c
  VidCfg.LPVerticalFrontPorchEnable = DSI_LP_VFP_DISABLE;
 8100608:	2300      	movs	r3, #0
 810060a:	663b      	str	r3, [r7, #96]	; 0x60
  VidCfg.LPVerticalBackPorchEnable = DSI_LP_VBP_DISABLE;
 810060c:	2300      	movs	r3, #0
 810060e:	667b      	str	r3, [r7, #100]	; 0x64
  VidCfg.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_DISABLE;
 8100610:	2300      	movs	r3, #0
 8100612:	66bb      	str	r3, [r7, #104]	; 0x68
  VidCfg.FrameBTAAcknowledgeEnable = DSI_FBTAA_DISABLE;
 8100614:	2300      	movs	r3, #0
 8100616:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DSI_ConfigVideoMode(&hdsi, &VidCfg) != HAL_OK)
 8100618:	1d3b      	adds	r3, r7, #4
 810061a:	4619      	mov	r1, r3
 810061c:	480a      	ldr	r0, [pc, #40]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 810061e:	f001 fc3e 	bl	8101e9e <HAL_DSI_ConfigVideoMode>
 8100622:	4603      	mov	r3, r0
 8100624:	2b00      	cmp	r3, #0
 8100626:	d001      	beq.n	810062c <MX_DSIHOST_DSI_Init+0x1bc>
  {
    Error_Handler();
 8100628:	f000 fab8 	bl	8100b9c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 810062c:	2100      	movs	r1, #0
 810062e:	4806      	ldr	r0, [pc, #24]	; (8100648 <MX_DSIHOST_DSI_Init+0x1d8>)
 8100630:	f001 fc0d 	bl	8101e4e <HAL_DSI_SetGenericVCID>
 8100634:	4603      	mov	r3, r0
 8100636:	2b00      	cmp	r3, #0
 8100638:	d001      	beq.n	810063e <MX_DSIHOST_DSI_Init+0x1ce>
  {
    Error_Handler();
 810063a:	f000 faaf 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 810063e:	bf00      	nop
 8100640:	37b8      	adds	r7, #184	; 0xb8
 8100642:	46bd      	mov	sp, r7
 8100644:	bd80      	pop	{r7, pc}
 8100646:	bf00      	nop
 8100648:	10000144 	.word	0x10000144

0810064c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 810064c:	b580      	push	{r7, lr}
 810064e:	b09a      	sub	sp, #104	; 0x68
 8100650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8100652:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100656:	2234      	movs	r2, #52	; 0x34
 8100658:	2100      	movs	r1, #0
 810065a:	4618      	mov	r0, r3
 810065c:	f00c ff32 	bl	810d4c4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8100660:	463b      	mov	r3, r7
 8100662:	2234      	movs	r2, #52	; 0x34
 8100664:	2100      	movs	r1, #0
 8100666:	4618      	mov	r0, r3
 8100668:	f00c ff2c 	bl	810d4c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 810066c:	4b4e      	ldr	r3, [pc, #312]	; (81007a8 <MX_LTDC_Init+0x15c>)
 810066e:	4a4f      	ldr	r2, [pc, #316]	; (81007ac <MX_LTDC_Init+0x160>)
 8100670:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8100672:	4b4d      	ldr	r3, [pc, #308]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100674:	2200      	movs	r2, #0
 8100676:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8100678:	4b4b      	ldr	r3, [pc, #300]	; (81007a8 <MX_LTDC_Init+0x15c>)
 810067a:	2200      	movs	r2, #0
 810067c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 810067e:	4b4a      	ldr	r3, [pc, #296]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100680:	2200      	movs	r2, #0
 8100682:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8100684:	4b48      	ldr	r3, [pc, #288]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100686:	2200      	movs	r2, #0
 8100688:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 810068a:	4b47      	ldr	r3, [pc, #284]	; (81007a8 <MX_LTDC_Init+0x15c>)
 810068c:	2207      	movs	r2, #7
 810068e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8100690:	4b45      	ldr	r3, [pc, #276]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100692:	2203      	movs	r2, #3
 8100694:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8100696:	4b44      	ldr	r3, [pc, #272]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100698:	220e      	movs	r2, #14
 810069a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 810069c:	4b42      	ldr	r3, [pc, #264]	; (81007a8 <MX_LTDC_Init+0x15c>)
 810069e:	2205      	movs	r2, #5
 81006a0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 81006a2:	4b41      	ldr	r3, [pc, #260]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006a4:	f240 228e 	movw	r2, #654	; 0x28e
 81006a8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 81006aa:	4b3f      	ldr	r3, [pc, #252]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006ac:	f240 12e5 	movw	r2, #485	; 0x1e5
 81006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 81006b2:	4b3d      	ldr	r3, [pc, #244]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006b4:	f44f 7225 	mov.w	r2, #660	; 0x294
 81006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 81006ba:	4b3b      	ldr	r3, [pc, #236]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006bc:	f240 12e7 	movw	r2, #487	; 0x1e7
 81006c0:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 81006c2:	4b39      	ldr	r3, [pc, #228]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006c4:	2200      	movs	r2, #0
 81006c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 81006ca:	4b37      	ldr	r3, [pc, #220]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006cc:	2200      	movs	r2, #0
 81006ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 81006d2:	4b35      	ldr	r3, [pc, #212]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006d4:	2200      	movs	r2, #0
 81006d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 81006da:	4833      	ldr	r0, [pc, #204]	; (81007a8 <MX_LTDC_Init+0x15c>)
 81006dc:	f004 fad8 	bl	8104c90 <HAL_LTDC_Init>
 81006e0:	4603      	mov	r3, r0
 81006e2:	2b00      	cmp	r3, #0
 81006e4:	d001      	beq.n	81006ea <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 81006e6:	f000 fa59 	bl	8100b9c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 81006ea:	2300      	movs	r3, #0
 81006ec:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 81006ee:	2300      	movs	r3, #0
 81006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 81006f2:	2300      	movs	r3, #0
 81006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 81006f6:	2300      	movs	r3, #0
 81006f8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 81006fa:	2300      	movs	r3, #0
 81006fc:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 81006fe:	2300      	movs	r3, #0
 8100700:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8100702:	2300      	movs	r3, #0
 8100704:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810070a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 810070c:	2305      	movs	r3, #5
 810070e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8100710:	2300      	movs	r3, #0
 8100712:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8100714:	2300      	movs	r3, #0
 8100716:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8100718:	2300      	movs	r3, #0
 810071a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 810071c:	2300      	movs	r3, #0
 810071e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8100722:	2300      	movs	r3, #0
 8100724:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8100728:	2300      	movs	r3, #0
 810072a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 810072e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100732:	2200      	movs	r2, #0
 8100734:	4619      	mov	r1, r3
 8100736:	481c      	ldr	r0, [pc, #112]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100738:	f004 fb7a 	bl	8104e30 <HAL_LTDC_ConfigLayer>
 810073c:	4603      	mov	r3, r0
 810073e:	2b00      	cmp	r3, #0
 8100740:	d001      	beq.n	8100746 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8100742:	f000 fa2b 	bl	8100b9c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8100746:	2300      	movs	r3, #0
 8100748:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 810074a:	2300      	movs	r3, #0
 810074c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 810074e:	2300      	movs	r3, #0
 8100750:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8100752:	2300      	movs	r3, #0
 8100754:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8100756:	2300      	movs	r3, #0
 8100758:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 810075a:	2300      	movs	r3, #0
 810075c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 810075e:	2300      	movs	r3, #0
 8100760:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8100762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100766:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8100768:	2305      	movs	r3, #5
 810076a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 810076c:	2300      	movs	r3, #0
 810076e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8100770:	2300      	movs	r3, #0
 8100772:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8100774:	2300      	movs	r3, #0
 8100776:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8100778:	2300      	movs	r3, #0
 810077a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 810077e:	2300      	movs	r3, #0
 8100780:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8100784:	2300      	movs	r3, #0
 8100786:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 810078a:	463b      	mov	r3, r7
 810078c:	2201      	movs	r2, #1
 810078e:	4619      	mov	r1, r3
 8100790:	4805      	ldr	r0, [pc, #20]	; (81007a8 <MX_LTDC_Init+0x15c>)
 8100792:	f004 fb4d 	bl	8104e30 <HAL_LTDC_ConfigLayer>
 8100796:	4603      	mov	r3, r0
 8100798:	2b00      	cmp	r3, #0
 810079a:	d001      	beq.n	81007a0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 810079c:	f000 f9fe 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 81007a0:	bf00      	nop
 81007a2:	3768      	adds	r7, #104	; 0x68
 81007a4:	46bd      	mov	sp, r7
 81007a6:	bd80      	pop	{r7, pc}
 81007a8:	100001dc 	.word	0x100001dc
 81007ac:	50001000 	.word	0x50001000

081007b0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 81007b0:	b580      	push	{r7, lr}
 81007b2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 81007b4:	4b07      	ldr	r3, [pc, #28]	; (81007d4 <MX_RNG_Init+0x24>)
 81007b6:	4a08      	ldr	r2, [pc, #32]	; (81007d8 <MX_RNG_Init+0x28>)
 81007b8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 81007ba:	4b06      	ldr	r3, [pc, #24]	; (81007d4 <MX_RNG_Init+0x24>)
 81007bc:	2200      	movs	r2, #0
 81007be:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 81007c0:	4804      	ldr	r0, [pc, #16]	; (81007d4 <MX_RNG_Init+0x24>)
 81007c2:	f007 fa03 	bl	8107bcc <HAL_RNG_Init>
 81007c6:	4603      	mov	r3, r0
 81007c8:	2b00      	cmp	r3, #0
 81007ca:	d001      	beq.n	81007d0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 81007cc:	f000 f9e6 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 81007d0:	bf00      	nop
 81007d2:	bd80      	pop	{r7, pc}
 81007d4:	100002f4 	.word	0x100002f4
 81007d8:	48021800 	.word	0x48021800

081007dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81007dc:	b580      	push	{r7, lr}
 81007de:	b086      	sub	sp, #24
 81007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 81007e2:	1d3b      	adds	r3, r7, #4
 81007e4:	2200      	movs	r2, #0
 81007e6:	601a      	str	r2, [r3, #0]
 81007e8:	605a      	str	r2, [r3, #4]
 81007ea:	609a      	str	r2, [r3, #8]
 81007ec:	60da      	str	r2, [r3, #12]
 81007ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 81007f0:	2300      	movs	r3, #0
 81007f2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 81007f4:	4b25      	ldr	r3, [pc, #148]	; (810088c <MX_RTC_Init+0xb0>)
 81007f6:	4a26      	ldr	r2, [pc, #152]	; (8100890 <MX_RTC_Init+0xb4>)
 81007f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 81007fa:	4b24      	ldr	r3, [pc, #144]	; (810088c <MX_RTC_Init+0xb0>)
 81007fc:	2200      	movs	r2, #0
 81007fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100800:	4b22      	ldr	r3, [pc, #136]	; (810088c <MX_RTC_Init+0xb0>)
 8100802:	227f      	movs	r2, #127	; 0x7f
 8100804:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100806:	4b21      	ldr	r3, [pc, #132]	; (810088c <MX_RTC_Init+0xb0>)
 8100808:	22ff      	movs	r2, #255	; 0xff
 810080a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 810080c:	4b1f      	ldr	r3, [pc, #124]	; (810088c <MX_RTC_Init+0xb0>)
 810080e:	2200      	movs	r2, #0
 8100810:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100812:	4b1e      	ldr	r3, [pc, #120]	; (810088c <MX_RTC_Init+0xb0>)
 8100814:	2200      	movs	r2, #0
 8100816:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100818:	4b1c      	ldr	r3, [pc, #112]	; (810088c <MX_RTC_Init+0xb0>)
 810081a:	2200      	movs	r2, #0
 810081c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 810081e:	4b1b      	ldr	r3, [pc, #108]	; (810088c <MX_RTC_Init+0xb0>)
 8100820:	2200      	movs	r2, #0
 8100822:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100824:	4819      	ldr	r0, [pc, #100]	; (810088c <MX_RTC_Init+0xb0>)
 8100826:	f007 fa2c 	bl	8107c82 <HAL_RTC_Init>
 810082a:	4603      	mov	r3, r0
 810082c:	2b00      	cmp	r3, #0
 810082e:	d001      	beq.n	8100834 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8100830:	f000 f9b4 	bl	8100b9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8100834:	2300      	movs	r3, #0
 8100836:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8100838:	2300      	movs	r3, #0
 810083a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 810083c:	2300      	movs	r3, #0
 810083e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8100840:	2300      	movs	r3, #0
 8100842:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8100844:	2300      	movs	r3, #0
 8100846:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8100848:	1d3b      	adds	r3, r7, #4
 810084a:	2201      	movs	r2, #1
 810084c:	4619      	mov	r1, r3
 810084e:	480f      	ldr	r0, [pc, #60]	; (810088c <MX_RTC_Init+0xb0>)
 8100850:	f007 fa8f 	bl	8107d72 <HAL_RTC_SetTime>
 8100854:	4603      	mov	r3, r0
 8100856:	2b00      	cmp	r3, #0
 8100858:	d001      	beq.n	810085e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 810085a:	f000 f99f 	bl	8100b9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 810085e:	2301      	movs	r3, #1
 8100860:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8100862:	2309      	movs	r3, #9
 8100864:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 8100866:	2327      	movs	r3, #39	; 0x27
 8100868:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 810086a:	2300      	movs	r3, #0
 810086c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 810086e:	463b      	mov	r3, r7
 8100870:	2201      	movs	r2, #1
 8100872:	4619      	mov	r1, r3
 8100874:	4805      	ldr	r0, [pc, #20]	; (810088c <MX_RTC_Init+0xb0>)
 8100876:	f007 fb19 	bl	8107eac <HAL_RTC_SetDate>
 810087a:	4603      	mov	r3, r0
 810087c:	2b00      	cmp	r3, #0
 810087e:	d001      	beq.n	8100884 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8100880:	f000 f98c 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100884:	bf00      	nop
 8100886:	3718      	adds	r7, #24
 8100888:	46bd      	mov	sp, r7
 810088a:	bd80      	pop	{r7, pc}
 810088c:	100002d0 	.word	0x100002d0
 8100890:	58004000 	.word	0x58004000

08100894 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8100894:	b580      	push	{r7, lr}
 8100896:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8100898:	4b0e      	ldr	r3, [pc, #56]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 810089a:	4a0f      	ldr	r2, [pc, #60]	; (81008d8 <MX_SDMMC2_SD_Init+0x44>)
 810089c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 810089e:	4b0d      	ldr	r3, [pc, #52]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 81008a0:	2200      	movs	r2, #0
 81008a2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 81008a4:	4b0b      	ldr	r3, [pc, #44]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 81008a6:	2200      	movs	r2, #0
 81008a8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 81008aa:	4b0a      	ldr	r3, [pc, #40]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 81008ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 81008b0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 81008b2:	4b08      	ldr	r3, [pc, #32]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 81008b4:	2200      	movs	r2, #0
 81008b6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 81008b8:	4b06      	ldr	r3, [pc, #24]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 81008ba:	2200      	movs	r2, #0
 81008bc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 81008be:	4805      	ldr	r0, [pc, #20]	; (81008d4 <MX_SDMMC2_SD_Init+0x40>)
 81008c0:	f007 fc30 	bl	8108124 <HAL_SD_Init>
 81008c4:	4603      	mov	r3, r0
 81008c6:	2b00      	cmp	r3, #0
 81008c8:	d001      	beq.n	81008ce <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 81008ca:	f000 f967 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 81008ce:	bf00      	nop
 81008d0:	bd80      	pop	{r7, pc}
 81008d2:	bf00      	nop
 81008d4:	10000160 	.word	0x10000160
 81008d8:	48022400 	.word	0x48022400

081008dc <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 81008dc:	b580      	push	{r7, lr}
 81008de:	b08e      	sub	sp, #56	; 0x38
 81008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 81008e2:	f107 031c 	add.w	r3, r7, #28
 81008e6:	2200      	movs	r2, #0
 81008e8:	601a      	str	r2, [r3, #0]
 81008ea:	605a      	str	r2, [r3, #4]
 81008ec:	609a      	str	r2, [r3, #8]
 81008ee:	60da      	str	r2, [r3, #12]
 81008f0:	611a      	str	r2, [r3, #16]
 81008f2:	615a      	str	r2, [r3, #20]
 81008f4:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 81008f6:	463b      	mov	r3, r7
 81008f8:	2200      	movs	r2, #0
 81008fa:	601a      	str	r2, [r3, #0]
 81008fc:	605a      	str	r2, [r3, #4]
 81008fe:	609a      	str	r2, [r3, #8]
 8100900:	60da      	str	r2, [r3, #12]
 8100902:	611a      	str	r2, [r3, #16]
 8100904:	615a      	str	r2, [r3, #20]
 8100906:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8100908:	4b44      	ldr	r3, [pc, #272]	; (8100a1c <MX_FMC_Init+0x140>)
 810090a:	4a45      	ldr	r2, [pc, #276]	; (8100a20 <MX_FMC_Init+0x144>)
 810090c:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 810090e:	4b43      	ldr	r3, [pc, #268]	; (8100a1c <MX_FMC_Init+0x140>)
 8100910:	4a44      	ldr	r2, [pc, #272]	; (8100a24 <MX_FMC_Init+0x148>)
 8100912:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8100914:	4b41      	ldr	r3, [pc, #260]	; (8100a1c <MX_FMC_Init+0x140>)
 8100916:	2200      	movs	r2, #0
 8100918:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 810091a:	4b40      	ldr	r3, [pc, #256]	; (8100a1c <MX_FMC_Init+0x140>)
 810091c:	2200      	movs	r2, #0
 810091e:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8100920:	4b3e      	ldr	r3, [pc, #248]	; (8100a1c <MX_FMC_Init+0x140>)
 8100922:	2208      	movs	r2, #8
 8100924:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_32;
 8100926:	4b3d      	ldr	r3, [pc, #244]	; (8100a1c <MX_FMC_Init+0x140>)
 8100928:	2220      	movs	r2, #32
 810092a:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 810092c:	4b3b      	ldr	r3, [pc, #236]	; (8100a1c <MX_FMC_Init+0x140>)
 810092e:	2200      	movs	r2, #0
 8100930:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8100932:	4b3a      	ldr	r3, [pc, #232]	; (8100a1c <MX_FMC_Init+0x140>)
 8100934:	2200      	movs	r2, #0
 8100936:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8100938:	4b38      	ldr	r3, [pc, #224]	; (8100a1c <MX_FMC_Init+0x140>)
 810093a:	2200      	movs	r2, #0
 810093c:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 810093e:	4b37      	ldr	r3, [pc, #220]	; (8100a1c <MX_FMC_Init+0x140>)
 8100940:	2200      	movs	r2, #0
 8100942:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8100944:	4b35      	ldr	r3, [pc, #212]	; (8100a1c <MX_FMC_Init+0x140>)
 8100946:	2200      	movs	r2, #0
 8100948:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 810094a:	4b34      	ldr	r3, [pc, #208]	; (8100a1c <MX_FMC_Init+0x140>)
 810094c:	2200      	movs	r2, #0
 810094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8100950:	4b32      	ldr	r3, [pc, #200]	; (8100a1c <MX_FMC_Init+0x140>)
 8100952:	2200      	movs	r2, #0
 8100954:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8100956:	4b31      	ldr	r3, [pc, #196]	; (8100a1c <MX_FMC_Init+0x140>)
 8100958:	2200      	movs	r2, #0
 810095a:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 810095c:	4b2f      	ldr	r3, [pc, #188]	; (8100a1c <MX_FMC_Init+0x140>)
 810095e:	2200      	movs	r2, #0
 8100960:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8100962:	4b2e      	ldr	r3, [pc, #184]	; (8100a1c <MX_FMC_Init+0x140>)
 8100964:	2200      	movs	r2, #0
 8100966:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8100968:	4b2c      	ldr	r3, [pc, #176]	; (8100a1c <MX_FMC_Init+0x140>)
 810096a:	2200      	movs	r2, #0
 810096c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 810096e:	230f      	movs	r3, #15
 8100970:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8100972:	230f      	movs	r3, #15
 8100974:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8100976:	23ff      	movs	r3, #255	; 0xff
 8100978:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 810097a:	230f      	movs	r3, #15
 810097c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 810097e:	2310      	movs	r3, #16
 8100980:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8100982:	2311      	movs	r3, #17
 8100984:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8100986:	2300      	movs	r3, #0
 8100988:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 810098a:	f107 031c 	add.w	r3, r7, #28
 810098e:	2200      	movs	r2, #0
 8100990:	4619      	mov	r1, r3
 8100992:	4822      	ldr	r0, [pc, #136]	; (8100a1c <MX_FMC_Init+0x140>)
 8100994:	f004 fc22 	bl	81051dc <HAL_NOR_Init>
 8100998:	4603      	mov	r3, r0
 810099a:	2b00      	cmp	r3, #0
 810099c:	d001      	beq.n	81009a2 <MX_FMC_Init+0xc6>
  {
    Error_Handler( );
 810099e:	f000 f8fd 	bl	8100b9c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 81009a2:	4b21      	ldr	r3, [pc, #132]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009a4:	4a21      	ldr	r2, [pc, #132]	; (8100a2c <MX_FMC_Init+0x150>)
 81009a6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 81009a8:	4b1f      	ldr	r3, [pc, #124]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009aa:	2200      	movs	r2, #0
 81009ac:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 81009ae:	4b1e      	ldr	r3, [pc, #120]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009b0:	2200      	movs	r2, #0
 81009b2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 81009b4:	4b1c      	ldr	r3, [pc, #112]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009b6:	2200      	movs	r2, #0
 81009b8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 81009ba:	4b1b      	ldr	r3, [pc, #108]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009bc:	2220      	movs	r2, #32
 81009be:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 81009c0:	4b19      	ldr	r3, [pc, #100]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009c2:	2240      	movs	r2, #64	; 0x40
 81009c4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 81009c6:	4b18      	ldr	r3, [pc, #96]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009c8:	2280      	movs	r2, #128	; 0x80
 81009ca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 81009cc:	4b16      	ldr	r3, [pc, #88]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009ce:	2200      	movs	r2, #0
 81009d0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 81009d2:	4b15      	ldr	r3, [pc, #84]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009d4:	2200      	movs	r2, #0
 81009d6:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 81009d8:	4b13      	ldr	r3, [pc, #76]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009da:	2200      	movs	r2, #0
 81009dc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 81009de:	4b12      	ldr	r3, [pc, #72]	; (8100a28 <MX_FMC_Init+0x14c>)
 81009e0:	2200      	movs	r2, #0
 81009e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 81009e4:	2310      	movs	r3, #16
 81009e6:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 81009e8:	2310      	movs	r3, #16
 81009ea:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 81009ec:	2310      	movs	r3, #16
 81009ee:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 81009f0:	2310      	movs	r3, #16
 81009f2:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 81009f4:	2310      	movs	r3, #16
 81009f6:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 81009f8:	2310      	movs	r3, #16
 81009fa:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 81009fc:	2310      	movs	r3, #16
 81009fe:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100a00:	463b      	mov	r3, r7
 8100a02:	4619      	mov	r1, r3
 8100a04:	4808      	ldr	r0, [pc, #32]	; (8100a28 <MX_FMC_Init+0x14c>)
 8100a06:	f008 ff17 	bl	8109838 <HAL_SDRAM_Init>
 8100a0a:	4603      	mov	r3, r0
 8100a0c:	2b00      	cmp	r3, #0
 8100a0e:	d001      	beq.n	8100a14 <MX_FMC_Init+0x138>
  {
    Error_Handler( );
 8100a10:	f000 f8c4 	bl	8100b9c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100a14:	bf00      	nop
 8100a16:	3738      	adds	r7, #56	; 0x38
 8100a18:	46bd      	mov	sp, r7
 8100a1a:	bd80      	pop	{r7, pc}
 8100a1c:	10000284 	.word	0x10000284
 8100a20:	52004000 	.word	0x52004000
 8100a24:	52004104 	.word	0x52004104
 8100a28:	10000370 	.word	0x10000370
 8100a2c:	52004140 	.word	0x52004140

08100a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100a30:	b580      	push	{r7, lr}
 8100a32:	b090      	sub	sp, #64	; 0x40
 8100a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100a3a:	2200      	movs	r2, #0
 8100a3c:	601a      	str	r2, [r3, #0]
 8100a3e:	605a      	str	r2, [r3, #4]
 8100a40:	609a      	str	r2, [r3, #8]
 8100a42:	60da      	str	r2, [r3, #12]
 8100a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100a46:	4b53      	ldr	r3, [pc, #332]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a4c:	4a51      	ldr	r2, [pc, #324]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100a52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a56:	4b4f      	ldr	r3, [pc, #316]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8100a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100a64:	4b4b      	ldr	r3, [pc, #300]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a6a:	4a4a      	ldr	r2, [pc, #296]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a6c:	f043 0308 	orr.w	r3, r3, #8
 8100a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a74:	4b47      	ldr	r3, [pc, #284]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a7a:	f003 0308 	and.w	r3, r3, #8
 8100a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8100a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100a82:	4b44      	ldr	r3, [pc, #272]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a88:	4a42      	ldr	r2, [pc, #264]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a8a:	f043 0310 	orr.w	r3, r3, #16
 8100a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a92:	4b40      	ldr	r3, [pc, #256]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a98:	f003 0310 	and.w	r3, r3, #16
 8100a9c:	623b      	str	r3, [r7, #32]
 8100a9e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100aa0:	4b3c      	ldr	r3, [pc, #240]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100aa6:	4a3b      	ldr	r2, [pc, #236]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100aa8:	f043 0302 	orr.w	r3, r3, #2
 8100aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ab0:	4b38      	ldr	r3, [pc, #224]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ab6:	f003 0302 	and.w	r3, r3, #2
 8100aba:	61fb      	str	r3, [r7, #28]
 8100abc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8100abe:	4b35      	ldr	r3, [pc, #212]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ac4:	4a33      	ldr	r2, [pc, #204]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ace:	4b31      	ldr	r3, [pc, #196]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100ad8:	61bb      	str	r3, [r7, #24]
 8100ada:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100adc:	4b2d      	ldr	r3, [pc, #180]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ae2:	4a2c      	ldr	r2, [pc, #176]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100aec:	4b29      	ldr	r3, [pc, #164]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100af6:	617b      	str	r3, [r7, #20]
 8100af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100afa:	4b26      	ldr	r3, [pc, #152]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b00:	4a24      	ldr	r2, [pc, #144]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b02:	f043 0301 	orr.w	r3, r3, #1
 8100b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b0a:	4b22      	ldr	r3, [pc, #136]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b10:	f003 0301 	and.w	r3, r3, #1
 8100b14:	613b      	str	r3, [r7, #16]
 8100b16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100b18:	4b1e      	ldr	r3, [pc, #120]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b1e:	4a1d      	ldr	r2, [pc, #116]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b20:	f043 0304 	orr.w	r3, r3, #4
 8100b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b28:	4b1a      	ldr	r3, [pc, #104]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b2e:	f003 0304 	and.w	r3, r3, #4
 8100b32:	60fb      	str	r3, [r7, #12]
 8100b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b36:	4b17      	ldr	r3, [pc, #92]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b3c:	4a15      	ldr	r2, [pc, #84]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b3e:	f043 0320 	orr.w	r3, r3, #32
 8100b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b46:	4b13      	ldr	r3, [pc, #76]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b4c:	f003 0320 	and.w	r3, r3, #32
 8100b50:	60bb      	str	r3, [r7, #8]
 8100b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100b54:	4b0f      	ldr	r3, [pc, #60]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b5a:	4a0e      	ldr	r2, [pc, #56]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b64:	4b0b      	ldr	r3, [pc, #44]	; (8100b94 <MX_GPIO_Init+0x164>)
 8100b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100b6e:	607b      	str	r3, [r7, #4]
 8100b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PJ5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8100b72:	2320      	movs	r3, #32
 8100b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100b76:	2300      	movs	r3, #0
 8100b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b7a:	2300      	movs	r3, #0
 8100b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8100b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8100b82:	4619      	mov	r1, r3
 8100b84:	4804      	ldr	r0, [pc, #16]	; (8100b98 <MX_GPIO_Init+0x168>)
 8100b86:	f001 fd17 	bl	81025b8 <HAL_GPIO_Init>

}
 8100b8a:	bf00      	nop
 8100b8c:	3740      	adds	r7, #64	; 0x40
 8100b8e:	46bd      	mov	sp, r7
 8100b90:	bd80      	pop	{r7, pc}
 8100b92:	bf00      	nop
 8100b94:	58024400 	.word	0x58024400
 8100b98:	58022400 	.word	0x58022400

08100b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100b9c:	b480      	push	{r7}
 8100b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100ba0:	b672      	cpsid	i
}
 8100ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100ba4:	e7fe      	b.n	8100ba4 <Error_Handler+0x8>
	...

08100ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100ba8:	b480      	push	{r7}
 8100baa:	b083      	sub	sp, #12
 8100bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100bae:	4b0a      	ldr	r3, [pc, #40]	; (8100bd8 <HAL_MspInit+0x30>)
 8100bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100bb4:	4a08      	ldr	r2, [pc, #32]	; (8100bd8 <HAL_MspInit+0x30>)
 8100bb6:	f043 0302 	orr.w	r3, r3, #2
 8100bba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100bbe:	4b06      	ldr	r3, [pc, #24]	; (8100bd8 <HAL_MspInit+0x30>)
 8100bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100bc4:	f003 0302 	and.w	r3, r3, #2
 8100bc8:	607b      	str	r3, [r7, #4]
 8100bca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100bcc:	bf00      	nop
 8100bce:	370c      	adds	r7, #12
 8100bd0:	46bd      	mov	sp, r7
 8100bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bd6:	4770      	bx	lr
 8100bd8:	58024400 	.word	0x58024400

08100bdc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8100bdc:	b480      	push	{r7}
 8100bde:	b085      	sub	sp, #20
 8100be0:	af00      	add	r7, sp, #0
 8100be2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8100be4:	687b      	ldr	r3, [r7, #4]
 8100be6:	681b      	ldr	r3, [r3, #0]
 8100be8:	4a0b      	ldr	r2, [pc, #44]	; (8100c18 <HAL_CRC_MspInit+0x3c>)
 8100bea:	4293      	cmp	r3, r2
 8100bec:	d10e      	bne.n	8100c0c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8100bee:	4b0b      	ldr	r3, [pc, #44]	; (8100c1c <HAL_CRC_MspInit+0x40>)
 8100bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bf4:	4a09      	ldr	r2, [pc, #36]	; (8100c1c <HAL_CRC_MspInit+0x40>)
 8100bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8100bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bfe:	4b07      	ldr	r3, [pc, #28]	; (8100c1c <HAL_CRC_MspInit+0x40>)
 8100c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8100c08:	60fb      	str	r3, [r7, #12]
 8100c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8100c0c:	bf00      	nop
 8100c0e:	3714      	adds	r7, #20
 8100c10:	46bd      	mov	sp, r7
 8100c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c16:	4770      	bx	lr
 8100c18:	58024c00 	.word	0x58024c00
 8100c1c:	58024400 	.word	0x58024400

08100c20 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8100c20:	b480      	push	{r7}
 8100c22:	b085      	sub	sp, #20
 8100c24:	af00      	add	r7, sp, #0
 8100c26:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8100c28:	687b      	ldr	r3, [r7, #4]
 8100c2a:	681b      	ldr	r3, [r3, #0]
 8100c2c:	4a0b      	ldr	r2, [pc, #44]	; (8100c5c <HAL_DMA2D_MspInit+0x3c>)
 8100c2e:	4293      	cmp	r3, r2
 8100c30:	d10e      	bne.n	8100c50 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8100c32:	4b0b      	ldr	r3, [pc, #44]	; (8100c60 <HAL_DMA2D_MspInit+0x40>)
 8100c34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100c38:	4a09      	ldr	r2, [pc, #36]	; (8100c60 <HAL_DMA2D_MspInit+0x40>)
 8100c3a:	f043 0310 	orr.w	r3, r3, #16
 8100c3e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100c42:	4b07      	ldr	r3, [pc, #28]	; (8100c60 <HAL_DMA2D_MspInit+0x40>)
 8100c44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100c48:	f003 0310 	and.w	r3, r3, #16
 8100c4c:	60fb      	str	r3, [r7, #12]
 8100c4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8100c50:	bf00      	nop
 8100c52:	3714      	adds	r7, #20
 8100c54:	46bd      	mov	sp, r7
 8100c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5a:	4770      	bx	lr
 8100c5c:	52001000 	.word	0x52001000
 8100c60:	58024400 	.word	0x58024400

08100c64 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8100c64:	b580      	push	{r7, lr}
 8100c66:	b0b4      	sub	sp, #208	; 0xd0
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100c6c:	f107 0310 	add.w	r3, r7, #16
 8100c70:	22c0      	movs	r2, #192	; 0xc0
 8100c72:	2100      	movs	r1, #0
 8100c74:	4618      	mov	r0, r3
 8100c76:	f00c fc25 	bl	810d4c4 <memset>
  if(hdsi->Instance==DSI)
 8100c7a:	687b      	ldr	r3, [r7, #4]
 8100c7c:	681b      	ldr	r3, [r3, #0]
 8100c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8100c82:	d11d      	bne.n	8100cc0 <HAL_DSI_MspInit+0x5c>
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8100c84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8100c88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
 8100c8a:	2300      	movs	r3, #0
 8100c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c8e:	f107 0310 	add.w	r3, r7, #16
 8100c92:	4618      	mov	r0, r3
 8100c94:	f004 fde4 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 8100c98:	4603      	mov	r3, r0
 8100c9a:	2b00      	cmp	r3, #0
 8100c9c:	d001      	beq.n	8100ca2 <HAL_DSI_MspInit+0x3e>
    {
      Error_Handler();
 8100c9e:	f7ff ff7d 	bl	8100b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8100ca2:	4b09      	ldr	r3, [pc, #36]	; (8100cc8 <HAL_DSI_MspInit+0x64>)
 8100ca4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8100ca8:	4a07      	ldr	r2, [pc, #28]	; (8100cc8 <HAL_DSI_MspInit+0x64>)
 8100caa:	f043 0310 	orr.w	r3, r3, #16
 8100cae:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8100cb2:	4b05      	ldr	r3, [pc, #20]	; (8100cc8 <HAL_DSI_MspInit+0x64>)
 8100cb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8100cb8:	f003 0310 	and.w	r3, r3, #16
 8100cbc:	60fb      	str	r3, [r7, #12]
 8100cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8100cc0:	bf00      	nop
 8100cc2:	37d0      	adds	r7, #208	; 0xd0
 8100cc4:	46bd      	mov	sp, r7
 8100cc6:	bd80      	pop	{r7, pc}
 8100cc8:	58024400 	.word	0x58024400

08100ccc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8100ccc:	b580      	push	{r7, lr}
 8100cce:	b0b4      	sub	sp, #208	; 0xd0
 8100cd0:	af00      	add	r7, sp, #0
 8100cd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cd4:	f107 0310 	add.w	r3, r7, #16
 8100cd8:	22c0      	movs	r2, #192	; 0xc0
 8100cda:	2100      	movs	r1, #0
 8100cdc:	4618      	mov	r0, r3
 8100cde:	f00c fbf1 	bl	810d4c4 <memset>
  if(hltdc->Instance==LTDC)
 8100ce2:	687b      	ldr	r3, [r7, #4]
 8100ce4:	681b      	ldr	r3, [r3, #0]
 8100ce6:	4a1a      	ldr	r2, [pc, #104]	; (8100d50 <HAL_LTDC_MspInit+0x84>)
 8100ce8:	4293      	cmp	r3, r2
 8100cea:	d12c      	bne.n	8100d46 <HAL_LTDC_MspInit+0x7a>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8100cec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8100cf0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8100cf2:	2301      	movs	r3, #1
 8100cf4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 8100cf6:	2304      	movs	r3, #4
 8100cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8100cfa:	2302      	movs	r3, #2
 8100cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8100cfe:	2302      	movs	r3, #2
 8100d00:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8100d02:	2302      	movs	r3, #2
 8100d04:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8100d06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100d0a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8100d0c:	2300      	movs	r3, #0
 8100d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8100d10:	2300      	movs	r3, #0
 8100d12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d14:	f107 0310 	add.w	r3, r7, #16
 8100d18:	4618      	mov	r0, r3
 8100d1a:	f004 fda1 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 8100d1e:	4603      	mov	r3, r0
 8100d20:	2b00      	cmp	r3, #0
 8100d22:	d001      	beq.n	8100d28 <HAL_LTDC_MspInit+0x5c>
    {
      Error_Handler();
 8100d24:	f7ff ff3a 	bl	8100b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8100d28:	4b0a      	ldr	r3, [pc, #40]	; (8100d54 <HAL_LTDC_MspInit+0x88>)
 8100d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8100d2e:	4a09      	ldr	r2, [pc, #36]	; (8100d54 <HAL_LTDC_MspInit+0x88>)
 8100d30:	f043 0308 	orr.w	r3, r3, #8
 8100d34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8100d38:	4b06      	ldr	r3, [pc, #24]	; (8100d54 <HAL_LTDC_MspInit+0x88>)
 8100d3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8100d3e:	f003 0308 	and.w	r3, r3, #8
 8100d42:	60fb      	str	r3, [r7, #12]
 8100d44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8100d46:	bf00      	nop
 8100d48:	37d0      	adds	r7, #208	; 0xd0
 8100d4a:	46bd      	mov	sp, r7
 8100d4c:	bd80      	pop	{r7, pc}
 8100d4e:	bf00      	nop
 8100d50:	50001000 	.word	0x50001000
 8100d54:	58024400 	.word	0x58024400

08100d58 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8100d58:	b580      	push	{r7, lr}
 8100d5a:	b0b4      	sub	sp, #208	; 0xd0
 8100d5c:	af00      	add	r7, sp, #0
 8100d5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100d60:	f107 0310 	add.w	r3, r7, #16
 8100d64:	22c0      	movs	r2, #192	; 0xc0
 8100d66:	2100      	movs	r1, #0
 8100d68:	4618      	mov	r0, r3
 8100d6a:	f00c fbab 	bl	810d4c4 <memset>
  if(hrng->Instance==RNG)
 8100d6e:	687b      	ldr	r3, [r7, #4]
 8100d70:	681b      	ldr	r3, [r3, #0]
 8100d72:	4a13      	ldr	r2, [pc, #76]	; (8100dc0 <HAL_RNG_MspInit+0x68>)
 8100d74:	4293      	cmp	r3, r2
 8100d76:	d11e      	bne.n	8100db6 <HAL_RNG_MspInit+0x5e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8100d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8100d7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8100d7e:	2300      	movs	r3, #0
 8100d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d84:	f107 0310 	add.w	r3, r7, #16
 8100d88:	4618      	mov	r0, r3
 8100d8a:	f004 fd69 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 8100d8e:	4603      	mov	r3, r0
 8100d90:	2b00      	cmp	r3, #0
 8100d92:	d001      	beq.n	8100d98 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8100d94:	f7ff ff02 	bl	8100b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8100d98:	4b0a      	ldr	r3, [pc, #40]	; (8100dc4 <HAL_RNG_MspInit+0x6c>)
 8100d9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8100d9e:	4a09      	ldr	r2, [pc, #36]	; (8100dc4 <HAL_RNG_MspInit+0x6c>)
 8100da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100da4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8100da8:	4b06      	ldr	r3, [pc, #24]	; (8100dc4 <HAL_RNG_MspInit+0x6c>)
 8100daa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8100dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100db2:	60fb      	str	r3, [r7, #12]
 8100db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8100db6:	bf00      	nop
 8100db8:	37d0      	adds	r7, #208	; 0xd0
 8100dba:	46bd      	mov	sp, r7
 8100dbc:	bd80      	pop	{r7, pc}
 8100dbe:	bf00      	nop
 8100dc0:	48021800 	.word	0x48021800
 8100dc4:	58024400 	.word	0x58024400

08100dc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100dc8:	b580      	push	{r7, lr}
 8100dca:	b0b2      	sub	sp, #200	; 0xc8
 8100dcc:	af00      	add	r7, sp, #0
 8100dce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100dd0:	f107 0308 	add.w	r3, r7, #8
 8100dd4:	22c0      	movs	r2, #192	; 0xc0
 8100dd6:	2100      	movs	r1, #0
 8100dd8:	4618      	mov	r0, r3
 8100dda:	f00c fb73 	bl	810d4c4 <memset>
  if(hrtc->Instance==RTC)
 8100dde:	687b      	ldr	r3, [r7, #4]
 8100de0:	681b      	ldr	r3, [r3, #0]
 8100de2:	4a0f      	ldr	r2, [pc, #60]	; (8100e20 <HAL_RTC_MspInit+0x58>)
 8100de4:	4293      	cmp	r3, r2
 8100de6:	d116      	bne.n	8100e16 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100de8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100dec:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100df6:	f107 0308 	add.w	r3, r7, #8
 8100dfa:	4618      	mov	r0, r3
 8100dfc:	f004 fd30 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 8100e00:	4603      	mov	r3, r0
 8100e02:	2b00      	cmp	r3, #0
 8100e04:	d001      	beq.n	8100e0a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8100e06:	f7ff fec9 	bl	8100b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100e0a:	4b06      	ldr	r3, [pc, #24]	; (8100e24 <HAL_RTC_MspInit+0x5c>)
 8100e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100e0e:	4a05      	ldr	r2, [pc, #20]	; (8100e24 <HAL_RTC_MspInit+0x5c>)
 8100e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100e14:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8100e16:	bf00      	nop
 8100e18:	37c8      	adds	r7, #200	; 0xc8
 8100e1a:	46bd      	mov	sp, r7
 8100e1c:	bd80      	pop	{r7, pc}
 8100e1e:	bf00      	nop
 8100e20:	58004000 	.word	0x58004000
 8100e24:	58024400 	.word	0x58024400

08100e28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8100e28:	b580      	push	{r7, lr}
 8100e2a:	b0ba      	sub	sp, #232	; 0xe8
 8100e2c:	af00      	add	r7, sp, #0
 8100e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100e34:	2200      	movs	r2, #0
 8100e36:	601a      	str	r2, [r3, #0]
 8100e38:	605a      	str	r2, [r3, #4]
 8100e3a:	609a      	str	r2, [r3, #8]
 8100e3c:	60da      	str	r2, [r3, #12]
 8100e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100e40:	f107 0314 	add.w	r3, r7, #20
 8100e44:	22c0      	movs	r2, #192	; 0xc0
 8100e46:	2100      	movs	r1, #0
 8100e48:	4618      	mov	r0, r3
 8100e4a:	f00c fb3b 	bl	810d4c4 <memset>
  if(hsd->Instance==SDMMC2)
 8100e4e:	687b      	ldr	r3, [r7, #4]
 8100e50:	681b      	ldr	r3, [r3, #0]
 8100e52:	4a3f      	ldr	r2, [pc, #252]	; (8100f50 <HAL_SD_MspInit+0x128>)
 8100e54:	4293      	cmp	r3, r2
 8100e56:	d177      	bne.n	8100f48 <HAL_SD_MspInit+0x120>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8100e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8100e5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8100e5e:	2320      	movs	r3, #32
 8100e60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8100e62:	2381      	movs	r3, #129	; 0x81
 8100e64:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100e66:	2302      	movs	r3, #2
 8100e68:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100e6a:	2302      	movs	r3, #2
 8100e6c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8100e6e:	2302      	movs	r3, #2
 8100e70:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8100e72:	2300      	movs	r3, #0
 8100e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8100e76:	2300      	movs	r3, #0
 8100e78:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8100e7a:	2300      	movs	r3, #0
 8100e7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8100e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8100e82:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e84:	f107 0314 	add.w	r3, r7, #20
 8100e88:	4618      	mov	r0, r3
 8100e8a:	f004 fce9 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 8100e8e:	4603      	mov	r3, r0
 8100e90:	2b00      	cmp	r3, #0
 8100e92:	d001      	beq.n	8100e98 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8100e94:	f7ff fe82 	bl	8100b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8100e98:	4b2e      	ldr	r3, [pc, #184]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100e9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8100e9e:	4a2d      	ldr	r2, [pc, #180]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100ea0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100ea4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8100ea8:	4b2a      	ldr	r3, [pc, #168]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100eaa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8100eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100eb2:	613b      	str	r3, [r7, #16]
 8100eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100eb6:	4b27      	ldr	r3, [pc, #156]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ebc:	4a25      	ldr	r2, [pc, #148]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100ebe:	f043 0302 	orr.w	r3, r3, #2
 8100ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ec6:	4b23      	ldr	r3, [pc, #140]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ecc:	f003 0302 	and.w	r3, r3, #2
 8100ed0:	60fb      	str	r3, [r7, #12]
 8100ed2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ed4:	4b1f      	ldr	r3, [pc, #124]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eda:	4a1e      	ldr	r2, [pc, #120]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100edc:	f043 0308 	orr.w	r3, r3, #8
 8100ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ee4:	4b1b      	ldr	r3, [pc, #108]	; (8100f54 <HAL_SD_MspInit+0x12c>)
 8100ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eea:	f003 0308 	and.w	r3, r3, #8
 8100eee:	60bb      	str	r3, [r7, #8]
 8100ef0:	68bb      	ldr	r3, [r7, #8]
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PD7     ------> SDMMC2_CMD
    PB15     ------> SDMMC2_D1
    PB14     ------> SDMMC2_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_15|GPIO_PIN_14;
 8100ef2:	f24c 0318 	movw	r3, #49176	; 0xc018
 8100ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100efa:	2302      	movs	r3, #2
 8100efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f00:	2300      	movs	r3, #0
 8100f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100f06:	2303      	movs	r3, #3
 8100f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8100f0c:	2309      	movs	r3, #9
 8100f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100f12:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100f16:	4619      	mov	r1, r3
 8100f18:	480f      	ldr	r0, [pc, #60]	; (8100f58 <HAL_SD_MspInit+0x130>)
 8100f1a:	f001 fb4d 	bl	81025b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8100f1e:	23c0      	movs	r3, #192	; 0xc0
 8100f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f24:	2302      	movs	r3, #2
 8100f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f2a:	2300      	movs	r3, #0
 8100f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100f30:	2303      	movs	r3, #3
 8100f32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 8100f36:	230b      	movs	r3, #11
 8100f38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100f40:	4619      	mov	r1, r3
 8100f42:	4806      	ldr	r0, [pc, #24]	; (8100f5c <HAL_SD_MspInit+0x134>)
 8100f44:	f001 fb38 	bl	81025b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8100f48:	bf00      	nop
 8100f4a:	37e8      	adds	r7, #232	; 0xe8
 8100f4c:	46bd      	mov	sp, r7
 8100f4e:	bd80      	pop	{r7, pc}
 8100f50:	48022400 	.word	0x48022400
 8100f54:	58024400 	.word	0x58024400
 8100f58:	58020400 	.word	0x58020400
 8100f5c:	58020c00 	.word	0x58020c00

08100f60 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100f60:	b580      	push	{r7, lr}
 8100f62:	b0b6      	sub	sp, #216	; 0xd8
 8100f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8100f66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100f6a:	2200      	movs	r2, #0
 8100f6c:	601a      	str	r2, [r3, #0]
 8100f6e:	605a      	str	r2, [r3, #4]
 8100f70:	609a      	str	r2, [r3, #8]
 8100f72:	60da      	str	r2, [r3, #12]
 8100f74:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8100f76:	4b6f      	ldr	r3, [pc, #444]	; (8101134 <HAL_FMC_MspInit+0x1d4>)
 8100f78:	681b      	ldr	r3, [r3, #0]
 8100f7a:	2b00      	cmp	r3, #0
 8100f7c:	f040 80d5 	bne.w	810112a <HAL_FMC_MspInit+0x1ca>
    return;
  }
  FMC_Initialized = 1;
 8100f80:	4b6c      	ldr	r3, [pc, #432]	; (8101134 <HAL_FMC_MspInit+0x1d4>)
 8100f82:	2201      	movs	r2, #1
 8100f84:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100f86:	1d3b      	adds	r3, r7, #4
 8100f88:	22c0      	movs	r2, #192	; 0xc0
 8100f8a:	2100      	movs	r1, #0
 8100f8c:	4618      	mov	r0, r3
 8100f8e:	f00c fa99 	bl	810d4c4 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8100f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8100f96:	607b      	str	r3, [r7, #4]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8100f98:	2300      	movs	r3, #0
 8100f9a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f9c:	1d3b      	adds	r3, r7, #4
 8100f9e:	4618      	mov	r0, r3
 8100fa0:	f004 fc5e 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 8100fa4:	4603      	mov	r3, r0
 8100fa6:	2b00      	cmp	r3, #0
 8100fa8:	d001      	beq.n	8100fae <HAL_FMC_MspInit+0x4e>
    {
      Error_Handler();
 8100faa:	f7ff fdf7 	bl	8100b9c <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8100fae:	4b62      	ldr	r3, [pc, #392]	; (8101138 <HAL_FMC_MspInit+0x1d8>)
 8100fb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100fb4:	4a60      	ldr	r2, [pc, #384]	; (8101138 <HAL_FMC_MspInit+0x1d8>)
 8100fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100fba:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100fbe:	4b5e      	ldr	r3, [pc, #376]	; (8101138 <HAL_FMC_MspInit+0x1d8>)
 8100fc0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100fc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100fc8:	603b      	str	r3, [r7, #0]
 8100fca:	683b      	ldr	r3, [r7, #0]
  PG1   ------> FMC_A11
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8100fcc:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8100fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fd4:	2302      	movs	r3, #2
 8100fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fda:	2300      	movs	r3, #0
 8100fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100fe0:	2303      	movs	r3, #3
 8100fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100fe6:	230c      	movs	r3, #12
 8100fe8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8100fec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8100ff0:	4619      	mov	r1, r3
 8100ff2:	4852      	ldr	r0, [pc, #328]	; (810113c <HAL_FMC_MspInit+0x1dc>)
 8100ff4:	f001 fae0 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_0|GPIO_PIN_1
 8100ff8:	f24c 7333 	movw	r3, #50995	; 0xc733
 8100ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101000:	2302      	movs	r3, #2
 8101002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101006:	2300      	movs	r3, #0
 8101008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810100c:	2303      	movs	r3, #3
 810100e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101012:	230c      	movs	r3, #12
 8101014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101018:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 810101c:	4619      	mov	r1, r3
 810101e:	4848      	ldr	r0, [pc, #288]	; (8101140 <HAL_FMC_MspInit+0x1e0>)
 8101020:	f001 faca 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8101024:	f64f 7383 	movw	r3, #65411	; 0xff83
 8101028:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810102c:	2302      	movs	r3, #2
 810102e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101032:	2300      	movs	r3, #0
 8101034:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101038:	2303      	movs	r3, #3
 810103a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810103e:	230c      	movs	r3, #12
 8101040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8101048:	4619      	mov	r1, r3
 810104a:	483e      	ldr	r0, [pc, #248]	; (8101144 <HAL_FMC_MspInit+0x1e4>)
 810104c:	f001 fab4 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_2
 8101050:	f64f 730c 	movw	r3, #65292	; 0xff0c
 8101054:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9
                          |GPIO_PIN_12|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101058:	2302      	movs	r3, #2
 810105a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810105e:	2300      	movs	r3, #0
 8101060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101064:	2303      	movs	r3, #3
 8101066:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810106a:	230c      	movs	r3, #12
 810106c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101070:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8101074:	4619      	mov	r1, r3
 8101076:	4834      	ldr	r0, [pc, #208]	; (8101148 <HAL_FMC_MspInit+0x1e8>)
 8101078:	f001 fa9e 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 810107c:	f248 1337 	movw	r3, #33079	; 0x8137
 8101080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101084:	2302      	movs	r3, #2
 8101086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810108a:	2300      	movs	r3, #0
 810108c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101090:	2303      	movs	r3, #3
 8101092:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101096:	230c      	movs	r3, #12
 8101098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810109c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 81010a0:	4619      	mov	r1, r3
 81010a2:	482a      	ldr	r0, [pc, #168]	; (810114c <HAL_FMC_MspInit+0x1ec>)
 81010a4:	f001 fa88 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7;
 81010a8:	2380      	movs	r3, #128	; 0x80
 81010aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010ae:	2302      	movs	r3, #2
 81010b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010b4:	2300      	movs	r3, #0
 81010b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81010ba:	2303      	movs	r3, #3
 81010bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 81010c0:	2309      	movs	r3, #9
 81010c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81010c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 81010ca:	4619      	mov	r1, r3
 81010cc:	4820      	ldr	r0, [pc, #128]	; (8101150 <HAL_FMC_MspInit+0x1f0>)
 81010ce:	f001 fa73 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 81010d2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 81010d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010da:	2302      	movs	r3, #2
 81010dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010e0:	2300      	movs	r3, #0
 81010e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81010e6:	2303      	movs	r3, #3
 81010e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81010ec:	230c      	movs	r3, #12
 81010ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81010f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 81010f6:	4619      	mov	r1, r3
 81010f8:	4816      	ldr	r0, [pc, #88]	; (8101154 <HAL_FMC_MspInit+0x1f4>)
 81010fa:	f001 fa5d 	bl	81025b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 81010fe:	2301      	movs	r3, #1
 8101100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101104:	2302      	movs	r3, #2
 8101106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810110a:	2300      	movs	r3, #0
 810110c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101110:	2303      	movs	r3, #3
 8101112:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8101116:	230c      	movs	r3, #12
 8101118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810111c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8101120:	4619      	mov	r1, r3
 8101122:	480b      	ldr	r0, [pc, #44]	; (8101150 <HAL_FMC_MspInit+0x1f0>)
 8101124:	f001 fa48 	bl	81025b8 <HAL_GPIO_Init>
 8101128:	e000      	b.n	810112c <HAL_FMC_MspInit+0x1cc>
    return;
 810112a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 810112c:	37d8      	adds	r7, #216	; 0xd8
 810112e:	46bd      	mov	sp, r7
 8101130:	bd80      	pop	{r7, pc}
 8101132:	bf00      	nop
 8101134:	100000b0 	.word	0x100000b0
 8101138:	58024400 	.word	0x58024400
 810113c:	58022000 	.word	0x58022000
 8101140:	58020c00 	.word	0x58020c00
 8101144:	58021000 	.word	0x58021000
 8101148:	58021c00 	.word	0x58021c00
 810114c:	58021800 	.word	0x58021800
 8101150:	58020800 	.word	0x58020800
 8101154:	58021400 	.word	0x58021400

08101158 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8101158:	b580      	push	{r7, lr}
 810115a:	b082      	sub	sp, #8
 810115c:	af00      	add	r7, sp, #0
 810115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8101160:	f7ff fefe 	bl	8100f60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8101164:	bf00      	nop
 8101166:	3708      	adds	r7, #8
 8101168:	46bd      	mov	sp, r7
 810116a:	bd80      	pop	{r7, pc}

0810116c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 810116c:	b580      	push	{r7, lr}
 810116e:	b082      	sub	sp, #8
 8101170:	af00      	add	r7, sp, #0
 8101172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8101174:	f7ff fef4 	bl	8100f60 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8101178:	bf00      	nop
 810117a:	3708      	adds	r7, #8
 810117c:	46bd      	mov	sp, r7
 810117e:	bd80      	pop	{r7, pc}

08101180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101180:	b480      	push	{r7}
 8101182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101184:	e7fe      	b.n	8101184 <NMI_Handler+0x4>

08101186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101186:	b480      	push	{r7}
 8101188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810118a:	e7fe      	b.n	810118a <HardFault_Handler+0x4>

0810118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810118c:	b480      	push	{r7}
 810118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101190:	e7fe      	b.n	8101190 <MemManage_Handler+0x4>

08101192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101192:	b480      	push	{r7}
 8101194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101196:	e7fe      	b.n	8101196 <BusFault_Handler+0x4>

08101198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101198:	b480      	push	{r7}
 810119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810119c:	e7fe      	b.n	810119c <UsageFault_Handler+0x4>

0810119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810119e:	b480      	push	{r7}
 81011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81011a2:	bf00      	nop
 81011a4:	46bd      	mov	sp, r7
 81011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011aa:	4770      	bx	lr

081011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81011ac:	b480      	push	{r7}
 81011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81011b0:	bf00      	nop
 81011b2:	46bd      	mov	sp, r7
 81011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b8:	4770      	bx	lr

081011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81011ba:	b480      	push	{r7}
 81011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81011be:	bf00      	nop
 81011c0:	46bd      	mov	sp, r7
 81011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011c6:	4770      	bx	lr

081011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81011c8:	b580      	push	{r7, lr}
 81011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81011cc:	f000 f900 	bl	81013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81011d0:	bf00      	nop
 81011d2:	bd80      	pop	{r7, pc}

081011d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 81011d4:	b580      	push	{r7, lr}
 81011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 81011d8:	4802      	ldr	r0, [pc, #8]	; (81011e4 <OTG_FS_IRQHandler+0x10>)
 81011da:	f001 fe1f 	bl	8102e1c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 81011de:	bf00      	nop
 81011e0:	bd80      	pop	{r7, pc}
 81011e2:	bf00      	nop
 81011e4:	10000c20 	.word	0x10000c20

081011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81011e8:	b580      	push	{r7, lr}
 81011ea:	b086      	sub	sp, #24
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81011f0:	4a14      	ldr	r2, [pc, #80]	; (8101244 <_sbrk+0x5c>)
 81011f2:	4b15      	ldr	r3, [pc, #84]	; (8101248 <_sbrk+0x60>)
 81011f4:	1ad3      	subs	r3, r2, r3
 81011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81011f8:	697b      	ldr	r3, [r7, #20]
 81011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81011fc:	4b13      	ldr	r3, [pc, #76]	; (810124c <_sbrk+0x64>)
 81011fe:	681b      	ldr	r3, [r3, #0]
 8101200:	2b00      	cmp	r3, #0
 8101202:	d102      	bne.n	810120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101204:	4b11      	ldr	r3, [pc, #68]	; (810124c <_sbrk+0x64>)
 8101206:	4a12      	ldr	r2, [pc, #72]	; (8101250 <_sbrk+0x68>)
 8101208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810120a:	4b10      	ldr	r3, [pc, #64]	; (810124c <_sbrk+0x64>)
 810120c:	681a      	ldr	r2, [r3, #0]
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	4413      	add	r3, r2
 8101212:	693a      	ldr	r2, [r7, #16]
 8101214:	429a      	cmp	r2, r3
 8101216:	d207      	bcs.n	8101228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101218:	f00c f91a 	bl	810d450 <__errno>
 810121c:	4603      	mov	r3, r0
 810121e:	220c      	movs	r2, #12
 8101220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8101226:	e009      	b.n	810123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101228:	4b08      	ldr	r3, [pc, #32]	; (810124c <_sbrk+0x64>)
 810122a:	681b      	ldr	r3, [r3, #0]
 810122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 810122e:	4b07      	ldr	r3, [pc, #28]	; (810124c <_sbrk+0x64>)
 8101230:	681a      	ldr	r2, [r3, #0]
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	4413      	add	r3, r2
 8101236:	4a05      	ldr	r2, [pc, #20]	; (810124c <_sbrk+0x64>)
 8101238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810123a:	68fb      	ldr	r3, [r7, #12]
}
 810123c:	4618      	mov	r0, r3
 810123e:	3718      	adds	r7, #24
 8101240:	46bd      	mov	sp, r7
 8101242:	bd80      	pop	{r7, pc}
 8101244:	10048000 	.word	0x10048000
 8101248:	00000400 	.word	0x00000400
 810124c:	100000b4 	.word	0x100000b4
 8101250:	10000f38 	.word	0x10000f38

08101254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101254:	f8df d034 	ldr.w	sp, [pc, #52]	; 810128c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101258:	f7ff f83e 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810125c:	480c      	ldr	r0, [pc, #48]	; (8101290 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810125e:	490d      	ldr	r1, [pc, #52]	; (8101294 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101260:	4a0d      	ldr	r2, [pc, #52]	; (8101298 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101264:	e002      	b.n	810126c <LoopCopyDataInit>

08101266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810126a:	3304      	adds	r3, #4

0810126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101270:	d3f9      	bcc.n	8101266 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101272:	4a0a      	ldr	r2, [pc, #40]	; (810129c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101274:	4c0a      	ldr	r4, [pc, #40]	; (81012a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101278:	e001      	b.n	810127e <LoopFillZerobss>

0810127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810127c:	3204      	adds	r2, #4

0810127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101280:	d3fb      	bcc.n	810127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101282:	f00c f8eb 	bl	810d45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101286:	f7ff f843 	bl	8100310 <main>
  bx  lr
 810128a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810128c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101290:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101294:	10000094 	.word	0x10000094
  ldr r2, =_sidata
 8101298:	0810d6ac 	.word	0x0810d6ac
  ldr r2, =_sbss
 810129c:	10000094 	.word	0x10000094
  ldr r4, =_ebss
 81012a0:	10000f34 	.word	0x10000f34

081012a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81012a4:	e7fe      	b.n	81012a4 <ADC3_IRQHandler>
	...

081012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81012a8:	b580      	push	{r7, lr}
 81012aa:	b082      	sub	sp, #8
 81012ac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81012ae:	4b28      	ldr	r3, [pc, #160]	; (8101350 <HAL_Init+0xa8>)
 81012b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012b4:	4a26      	ldr	r2, [pc, #152]	; (8101350 <HAL_Init+0xa8>)
 81012b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81012ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81012be:	4b24      	ldr	r3, [pc, #144]	; (8101350 <HAL_Init+0xa8>)
 81012c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81012c8:	603b      	str	r3, [r7, #0]
 81012ca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81012cc:	4b21      	ldr	r3, [pc, #132]	; (8101354 <HAL_Init+0xac>)
 81012ce:	681b      	ldr	r3, [r3, #0]
 81012d0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81012d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81012d8:	4a1e      	ldr	r2, [pc, #120]	; (8101354 <HAL_Init+0xac>)
 81012da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81012de:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81012e0:	4b1c      	ldr	r3, [pc, #112]	; (8101354 <HAL_Init+0xac>)
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	4a1b      	ldr	r2, [pc, #108]	; (8101354 <HAL_Init+0xac>)
 81012e6:	f043 0301 	orr.w	r3, r3, #1
 81012ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81012ec:	2003      	movs	r0, #3
 81012ee:	f000 f983 	bl	81015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81012f2:	f004 f909 	bl	8105508 <HAL_RCC_GetSysClockFreq>
 81012f6:	4602      	mov	r2, r0
 81012f8:	4b15      	ldr	r3, [pc, #84]	; (8101350 <HAL_Init+0xa8>)
 81012fa:	699b      	ldr	r3, [r3, #24]
 81012fc:	0a1b      	lsrs	r3, r3, #8
 81012fe:	f003 030f 	and.w	r3, r3, #15
 8101302:	4915      	ldr	r1, [pc, #84]	; (8101358 <HAL_Init+0xb0>)
 8101304:	5ccb      	ldrb	r3, [r1, r3]
 8101306:	f003 031f 	and.w	r3, r3, #31
 810130a:	fa22 f303 	lsr.w	r3, r2, r3
 810130e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101310:	4b0f      	ldr	r3, [pc, #60]	; (8101350 <HAL_Init+0xa8>)
 8101312:	699b      	ldr	r3, [r3, #24]
 8101314:	f003 030f 	and.w	r3, r3, #15
 8101318:	4a0f      	ldr	r2, [pc, #60]	; (8101358 <HAL_Init+0xb0>)
 810131a:	5cd3      	ldrb	r3, [r2, r3]
 810131c:	f003 031f 	and.w	r3, r3, #31
 8101320:	687a      	ldr	r2, [r7, #4]
 8101322:	fa22 f303 	lsr.w	r3, r2, r3
 8101326:	4a0d      	ldr	r2, [pc, #52]	; (810135c <HAL_Init+0xb4>)
 8101328:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810132a:	4b0c      	ldr	r3, [pc, #48]	; (810135c <HAL_Init+0xb4>)
 810132c:	681b      	ldr	r3, [r3, #0]
 810132e:	4a0c      	ldr	r2, [pc, #48]	; (8101360 <HAL_Init+0xb8>)
 8101330:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101332:	200f      	movs	r0, #15
 8101334:	f000 f816 	bl	8101364 <HAL_InitTick>
 8101338:	4603      	mov	r3, r0
 810133a:	2b00      	cmp	r3, #0
 810133c:	d001      	beq.n	8101342 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810133e:	2301      	movs	r3, #1
 8101340:	e002      	b.n	8101348 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101342:	f7ff fc31 	bl	8100ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101346:	2300      	movs	r3, #0
}
 8101348:	4618      	mov	r0, r3
 810134a:	3708      	adds	r7, #8
 810134c:	46bd      	mov	sp, r7
 810134e:	bd80      	pop	{r7, pc}
 8101350:	58024400 	.word	0x58024400
 8101354:	40024400 	.word	0x40024400
 8101358:	0810d680 	.word	0x0810d680
 810135c:	10000004 	.word	0x10000004
 8101360:	10000000 	.word	0x10000000

08101364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	b082      	sub	sp, #8
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 810136c:	4b15      	ldr	r3, [pc, #84]	; (81013c4 <HAL_InitTick+0x60>)
 810136e:	781b      	ldrb	r3, [r3, #0]
 8101370:	2b00      	cmp	r3, #0
 8101372:	d101      	bne.n	8101378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101374:	2301      	movs	r3, #1
 8101376:	e021      	b.n	81013bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101378:	4b13      	ldr	r3, [pc, #76]	; (81013c8 <HAL_InitTick+0x64>)
 810137a:	681a      	ldr	r2, [r3, #0]
 810137c:	4b11      	ldr	r3, [pc, #68]	; (81013c4 <HAL_InitTick+0x60>)
 810137e:	781b      	ldrb	r3, [r3, #0]
 8101380:	4619      	mov	r1, r3
 8101382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101386:	fbb3 f3f1 	udiv	r3, r3, r1
 810138a:	fbb2 f3f3 	udiv	r3, r2, r3
 810138e:	4618      	mov	r0, r3
 8101390:	f000 f965 	bl	810165e <HAL_SYSTICK_Config>
 8101394:	4603      	mov	r3, r0
 8101396:	2b00      	cmp	r3, #0
 8101398:	d001      	beq.n	810139e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810139a:	2301      	movs	r3, #1
 810139c:	e00e      	b.n	81013bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810139e:	687b      	ldr	r3, [r7, #4]
 81013a0:	2b0f      	cmp	r3, #15
 81013a2:	d80a      	bhi.n	81013ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81013a4:	2200      	movs	r2, #0
 81013a6:	6879      	ldr	r1, [r7, #4]
 81013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81013ac:	f000 f92f 	bl	810160e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81013b0:	4a06      	ldr	r2, [pc, #24]	; (81013cc <HAL_InitTick+0x68>)
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81013b6:	2300      	movs	r3, #0
 81013b8:	e000      	b.n	81013bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 81013ba:	2301      	movs	r3, #1
}
 81013bc:	4618      	mov	r0, r3
 81013be:	3708      	adds	r7, #8
 81013c0:	46bd      	mov	sp, r7
 81013c2:	bd80      	pop	{r7, pc}
 81013c4:	1000000c 	.word	0x1000000c
 81013c8:	10000000 	.word	0x10000000
 81013cc:	10000008 	.word	0x10000008

081013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81013d0:	b480      	push	{r7}
 81013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81013d4:	4b06      	ldr	r3, [pc, #24]	; (81013f0 <HAL_IncTick+0x20>)
 81013d6:	781b      	ldrb	r3, [r3, #0]
 81013d8:	461a      	mov	r2, r3
 81013da:	4b06      	ldr	r3, [pc, #24]	; (81013f4 <HAL_IncTick+0x24>)
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	4413      	add	r3, r2
 81013e0:	4a04      	ldr	r2, [pc, #16]	; (81013f4 <HAL_IncTick+0x24>)
 81013e2:	6013      	str	r3, [r2, #0]
}
 81013e4:	bf00      	nop
 81013e6:	46bd      	mov	sp, r7
 81013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ec:	4770      	bx	lr
 81013ee:	bf00      	nop
 81013f0:	1000000c 	.word	0x1000000c
 81013f4:	100003a4 	.word	0x100003a4

081013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81013f8:	b480      	push	{r7}
 81013fa:	af00      	add	r7, sp, #0
  return uwTick;
 81013fc:	4b03      	ldr	r3, [pc, #12]	; (810140c <HAL_GetTick+0x14>)
 81013fe:	681b      	ldr	r3, [r3, #0]
}
 8101400:	4618      	mov	r0, r3
 8101402:	46bd      	mov	sp, r7
 8101404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101408:	4770      	bx	lr
 810140a:	bf00      	nop
 810140c:	100003a4 	.word	0x100003a4

08101410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	b084      	sub	sp, #16
 8101414:	af00      	add	r7, sp, #0
 8101416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101418:	f7ff ffee 	bl	81013f8 <HAL_GetTick>
 810141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101422:	68fb      	ldr	r3, [r7, #12]
 8101424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8101428:	d005      	beq.n	8101436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810142a:	4b0a      	ldr	r3, [pc, #40]	; (8101454 <HAL_Delay+0x44>)
 810142c:	781b      	ldrb	r3, [r3, #0]
 810142e:	461a      	mov	r2, r3
 8101430:	68fb      	ldr	r3, [r7, #12]
 8101432:	4413      	add	r3, r2
 8101434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101436:	bf00      	nop
 8101438:	f7ff ffde 	bl	81013f8 <HAL_GetTick>
 810143c:	4602      	mov	r2, r0
 810143e:	68bb      	ldr	r3, [r7, #8]
 8101440:	1ad3      	subs	r3, r2, r3
 8101442:	68fa      	ldr	r2, [r7, #12]
 8101444:	429a      	cmp	r2, r3
 8101446:	d8f7      	bhi.n	8101438 <HAL_Delay+0x28>
  {
  }
}
 8101448:	bf00      	nop
 810144a:	bf00      	nop
 810144c:	3710      	adds	r7, #16
 810144e:	46bd      	mov	sp, r7
 8101450:	bd80      	pop	{r7, pc}
 8101452:	bf00      	nop
 8101454:	1000000c 	.word	0x1000000c

08101458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101458:	b480      	push	{r7}
 810145a:	b085      	sub	sp, #20
 810145c:	af00      	add	r7, sp, #0
 810145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101460:	687b      	ldr	r3, [r7, #4]
 8101462:	f003 0307 	and.w	r3, r3, #7
 8101466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101468:	4b0c      	ldr	r3, [pc, #48]	; (810149c <__NVIC_SetPriorityGrouping+0x44>)
 810146a:	68db      	ldr	r3, [r3, #12]
 810146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810146e:	68ba      	ldr	r2, [r7, #8]
 8101470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101474:	4013      	ands	r3, r2
 8101476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101478:	68fb      	ldr	r3, [r7, #12]
 810147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810147c:	68bb      	ldr	r3, [r7, #8]
 810147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810148a:	4a04      	ldr	r2, [pc, #16]	; (810149c <__NVIC_SetPriorityGrouping+0x44>)
 810148c:	68bb      	ldr	r3, [r7, #8]
 810148e:	60d3      	str	r3, [r2, #12]
}
 8101490:	bf00      	nop
 8101492:	3714      	adds	r7, #20
 8101494:	46bd      	mov	sp, r7
 8101496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810149a:	4770      	bx	lr
 810149c:	e000ed00 	.word	0xe000ed00

081014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81014a0:	b480      	push	{r7}
 81014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81014a4:	4b04      	ldr	r3, [pc, #16]	; (81014b8 <__NVIC_GetPriorityGrouping+0x18>)
 81014a6:	68db      	ldr	r3, [r3, #12]
 81014a8:	0a1b      	lsrs	r3, r3, #8
 81014aa:	f003 0307 	and.w	r3, r3, #7
}
 81014ae:	4618      	mov	r0, r3
 81014b0:	46bd      	mov	sp, r7
 81014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014b6:	4770      	bx	lr
 81014b8:	e000ed00 	.word	0xe000ed00

081014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81014bc:	b480      	push	{r7}
 81014be:	b083      	sub	sp, #12
 81014c0:	af00      	add	r7, sp, #0
 81014c2:	4603      	mov	r3, r0
 81014c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81014ca:	2b00      	cmp	r3, #0
 81014cc:	db0b      	blt.n	81014e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81014ce:	88fb      	ldrh	r3, [r7, #6]
 81014d0:	f003 021f 	and.w	r2, r3, #31
 81014d4:	4907      	ldr	r1, [pc, #28]	; (81014f4 <__NVIC_EnableIRQ+0x38>)
 81014d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81014da:	095b      	lsrs	r3, r3, #5
 81014dc:	2001      	movs	r0, #1
 81014de:	fa00 f202 	lsl.w	r2, r0, r2
 81014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81014e6:	bf00      	nop
 81014e8:	370c      	adds	r7, #12
 81014ea:	46bd      	mov	sp, r7
 81014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014f0:	4770      	bx	lr
 81014f2:	bf00      	nop
 81014f4:	e000e100 	.word	0xe000e100

081014f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81014f8:	b480      	push	{r7}
 81014fa:	b083      	sub	sp, #12
 81014fc:	af00      	add	r7, sp, #0
 81014fe:	4603      	mov	r3, r0
 8101500:	6039      	str	r1, [r7, #0]
 8101502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101508:	2b00      	cmp	r3, #0
 810150a:	db0a      	blt.n	8101522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810150c:	683b      	ldr	r3, [r7, #0]
 810150e:	b2da      	uxtb	r2, r3
 8101510:	490c      	ldr	r1, [pc, #48]	; (8101544 <__NVIC_SetPriority+0x4c>)
 8101512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101516:	0112      	lsls	r2, r2, #4
 8101518:	b2d2      	uxtb	r2, r2
 810151a:	440b      	add	r3, r1
 810151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101520:	e00a      	b.n	8101538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101522:	683b      	ldr	r3, [r7, #0]
 8101524:	b2da      	uxtb	r2, r3
 8101526:	4908      	ldr	r1, [pc, #32]	; (8101548 <__NVIC_SetPriority+0x50>)
 8101528:	88fb      	ldrh	r3, [r7, #6]
 810152a:	f003 030f 	and.w	r3, r3, #15
 810152e:	3b04      	subs	r3, #4
 8101530:	0112      	lsls	r2, r2, #4
 8101532:	b2d2      	uxtb	r2, r2
 8101534:	440b      	add	r3, r1
 8101536:	761a      	strb	r2, [r3, #24]
}
 8101538:	bf00      	nop
 810153a:	370c      	adds	r7, #12
 810153c:	46bd      	mov	sp, r7
 810153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101542:	4770      	bx	lr
 8101544:	e000e100 	.word	0xe000e100
 8101548:	e000ed00 	.word	0xe000ed00

0810154c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810154c:	b480      	push	{r7}
 810154e:	b089      	sub	sp, #36	; 0x24
 8101550:	af00      	add	r7, sp, #0
 8101552:	60f8      	str	r0, [r7, #12]
 8101554:	60b9      	str	r1, [r7, #8]
 8101556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101558:	68fb      	ldr	r3, [r7, #12]
 810155a:	f003 0307 	and.w	r3, r3, #7
 810155e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101560:	69fb      	ldr	r3, [r7, #28]
 8101562:	f1c3 0307 	rsb	r3, r3, #7
 8101566:	2b04      	cmp	r3, #4
 8101568:	bf28      	it	cs
 810156a:	2304      	movcs	r3, #4
 810156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810156e:	69fb      	ldr	r3, [r7, #28]
 8101570:	3304      	adds	r3, #4
 8101572:	2b06      	cmp	r3, #6
 8101574:	d902      	bls.n	810157c <NVIC_EncodePriority+0x30>
 8101576:	69fb      	ldr	r3, [r7, #28]
 8101578:	3b03      	subs	r3, #3
 810157a:	e000      	b.n	810157e <NVIC_EncodePriority+0x32>
 810157c:	2300      	movs	r3, #0
 810157e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8101584:	69bb      	ldr	r3, [r7, #24]
 8101586:	fa02 f303 	lsl.w	r3, r2, r3
 810158a:	43da      	mvns	r2, r3
 810158c:	68bb      	ldr	r3, [r7, #8]
 810158e:	401a      	ands	r2, r3
 8101590:	697b      	ldr	r3, [r7, #20]
 8101592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101598:	697b      	ldr	r3, [r7, #20]
 810159a:	fa01 f303 	lsl.w	r3, r1, r3
 810159e:	43d9      	mvns	r1, r3
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81015a4:	4313      	orrs	r3, r2
         );
}
 81015a6:	4618      	mov	r0, r3
 81015a8:	3724      	adds	r7, #36	; 0x24
 81015aa:	46bd      	mov	sp, r7
 81015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015b0:	4770      	bx	lr
	...

081015b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81015b4:	b580      	push	{r7, lr}
 81015b6:	b082      	sub	sp, #8
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81015bc:	687b      	ldr	r3, [r7, #4]
 81015be:	3b01      	subs	r3, #1
 81015c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81015c4:	d301      	bcc.n	81015ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81015c6:	2301      	movs	r3, #1
 81015c8:	e00f      	b.n	81015ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81015ca:	4a0a      	ldr	r2, [pc, #40]	; (81015f4 <SysTick_Config+0x40>)
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	3b01      	subs	r3, #1
 81015d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81015d2:	210f      	movs	r1, #15
 81015d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81015d8:	f7ff ff8e 	bl	81014f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81015dc:	4b05      	ldr	r3, [pc, #20]	; (81015f4 <SysTick_Config+0x40>)
 81015de:	2200      	movs	r2, #0
 81015e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81015e2:	4b04      	ldr	r3, [pc, #16]	; (81015f4 <SysTick_Config+0x40>)
 81015e4:	2207      	movs	r2, #7
 81015e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81015e8:	2300      	movs	r3, #0
}
 81015ea:	4618      	mov	r0, r3
 81015ec:	3708      	adds	r7, #8
 81015ee:	46bd      	mov	sp, r7
 81015f0:	bd80      	pop	{r7, pc}
 81015f2:	bf00      	nop
 81015f4:	e000e010 	.word	0xe000e010

081015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81015f8:	b580      	push	{r7, lr}
 81015fa:	b082      	sub	sp, #8
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101600:	6878      	ldr	r0, [r7, #4]
 8101602:	f7ff ff29 	bl	8101458 <__NVIC_SetPriorityGrouping>
}
 8101606:	bf00      	nop
 8101608:	3708      	adds	r7, #8
 810160a:	46bd      	mov	sp, r7
 810160c:	bd80      	pop	{r7, pc}

0810160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810160e:	b580      	push	{r7, lr}
 8101610:	b086      	sub	sp, #24
 8101612:	af00      	add	r7, sp, #0
 8101614:	4603      	mov	r3, r0
 8101616:	60b9      	str	r1, [r7, #8]
 8101618:	607a      	str	r2, [r7, #4]
 810161a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810161c:	f7ff ff40 	bl	81014a0 <__NVIC_GetPriorityGrouping>
 8101620:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101622:	687a      	ldr	r2, [r7, #4]
 8101624:	68b9      	ldr	r1, [r7, #8]
 8101626:	6978      	ldr	r0, [r7, #20]
 8101628:	f7ff ff90 	bl	810154c <NVIC_EncodePriority>
 810162c:	4602      	mov	r2, r0
 810162e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101632:	4611      	mov	r1, r2
 8101634:	4618      	mov	r0, r3
 8101636:	f7ff ff5f 	bl	81014f8 <__NVIC_SetPriority>
}
 810163a:	bf00      	nop
 810163c:	3718      	adds	r7, #24
 810163e:	46bd      	mov	sp, r7
 8101640:	bd80      	pop	{r7, pc}

08101642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101642:	b580      	push	{r7, lr}
 8101644:	b082      	sub	sp, #8
 8101646:	af00      	add	r7, sp, #0
 8101648:	4603      	mov	r3, r0
 810164a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810164c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101650:	4618      	mov	r0, r3
 8101652:	f7ff ff33 	bl	81014bc <__NVIC_EnableIRQ>
}
 8101656:	bf00      	nop
 8101658:	3708      	adds	r7, #8
 810165a:	46bd      	mov	sp, r7
 810165c:	bd80      	pop	{r7, pc}

0810165e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810165e:	b580      	push	{r7, lr}
 8101660:	b082      	sub	sp, #8
 8101662:	af00      	add	r7, sp, #0
 8101664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101666:	6878      	ldr	r0, [r7, #4]
 8101668:	f7ff ffa4 	bl	81015b4 <SysTick_Config>
 810166c:	4603      	mov	r3, r0
}
 810166e:	4618      	mov	r0, r3
 8101670:	3708      	adds	r7, #8
 8101672:	46bd      	mov	sp, r7
 8101674:	bd80      	pop	{r7, pc}
	...

08101678 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101678:	b480      	push	{r7}
 810167a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810167c:	4b07      	ldr	r3, [pc, #28]	; (810169c <HAL_GetCurrentCPUID+0x24>)
 810167e:	681b      	ldr	r3, [r3, #0]
 8101680:	091b      	lsrs	r3, r3, #4
 8101682:	f003 030f 	and.w	r3, r3, #15
 8101686:	2b07      	cmp	r3, #7
 8101688:	d101      	bne.n	810168e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810168a:	2303      	movs	r3, #3
 810168c:	e000      	b.n	8101690 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810168e:	2301      	movs	r3, #1
  }
}
 8101690:	4618      	mov	r0, r3
 8101692:	46bd      	mov	sp, r7
 8101694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101698:	4770      	bx	lr
 810169a:	bf00      	nop
 810169c:	e000ed00 	.word	0xe000ed00

081016a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	b082      	sub	sp, #8
 81016a4:	af00      	add	r7, sp, #0
 81016a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	2b00      	cmp	r3, #0
 81016ac:	d101      	bne.n	81016b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 81016ae:	2301      	movs	r3, #1
 81016b0:	e054      	b.n	810175c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	7f5b      	ldrb	r3, [r3, #29]
 81016b6:	b2db      	uxtb	r3, r3
 81016b8:	2b00      	cmp	r3, #0
 81016ba:	d105      	bne.n	81016c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	2200      	movs	r2, #0
 81016c0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 81016c2:	6878      	ldr	r0, [r7, #4]
 81016c4:	f7ff fa8a 	bl	8100bdc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 81016c8:	687b      	ldr	r3, [r7, #4]
 81016ca:	2202      	movs	r2, #2
 81016cc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	791b      	ldrb	r3, [r3, #4]
 81016d2:	2b00      	cmp	r3, #0
 81016d4:	d10c      	bne.n	81016f0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	681b      	ldr	r3, [r3, #0]
 81016da:	4a22      	ldr	r2, [pc, #136]	; (8101764 <HAL_CRC_Init+0xc4>)
 81016dc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 81016de:	687b      	ldr	r3, [r7, #4]
 81016e0:	681b      	ldr	r3, [r3, #0]
 81016e2:	689a      	ldr	r2, [r3, #8]
 81016e4:	687b      	ldr	r3, [r7, #4]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	f022 0218 	bic.w	r2, r2, #24
 81016ec:	609a      	str	r2, [r3, #8]
 81016ee:	e00c      	b.n	810170a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	6899      	ldr	r1, [r3, #8]
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	68db      	ldr	r3, [r3, #12]
 81016f8:	461a      	mov	r2, r3
 81016fa:	6878      	ldr	r0, [r7, #4]
 81016fc:	f000 f834 	bl	8101768 <HAL_CRCEx_Polynomial_Set>
 8101700:	4603      	mov	r3, r0
 8101702:	2b00      	cmp	r3, #0
 8101704:	d001      	beq.n	810170a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8101706:	2301      	movs	r3, #1
 8101708:	e028      	b.n	810175c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	795b      	ldrb	r3, [r3, #5]
 810170e:	2b00      	cmp	r3, #0
 8101710:	d105      	bne.n	810171e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8101712:	687b      	ldr	r3, [r7, #4]
 8101714:	681b      	ldr	r3, [r3, #0]
 8101716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810171a:	611a      	str	r2, [r3, #16]
 810171c:	e004      	b.n	8101728 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 810171e:	687b      	ldr	r3, [r7, #4]
 8101720:	681b      	ldr	r3, [r3, #0]
 8101722:	687a      	ldr	r2, [r7, #4]
 8101724:	6912      	ldr	r2, [r2, #16]
 8101726:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	681b      	ldr	r3, [r3, #0]
 810172c:	689b      	ldr	r3, [r3, #8]
 810172e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	695a      	ldr	r2, [r3, #20]
 8101736:	687b      	ldr	r3, [r7, #4]
 8101738:	681b      	ldr	r3, [r3, #0]
 810173a:	430a      	orrs	r2, r1
 810173c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 810173e:	687b      	ldr	r3, [r7, #4]
 8101740:	681b      	ldr	r3, [r3, #0]
 8101742:	689b      	ldr	r3, [r3, #8]
 8101744:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	699a      	ldr	r2, [r3, #24]
 810174c:	687b      	ldr	r3, [r7, #4]
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	430a      	orrs	r2, r1
 8101752:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	2201      	movs	r2, #1
 8101758:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 810175a:	2300      	movs	r3, #0
}
 810175c:	4618      	mov	r0, r3
 810175e:	3708      	adds	r7, #8
 8101760:	46bd      	mov	sp, r7
 8101762:	bd80      	pop	{r7, pc}
 8101764:	04c11db7 	.word	0x04c11db7

08101768 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8101768:	b480      	push	{r7}
 810176a:	b087      	sub	sp, #28
 810176c:	af00      	add	r7, sp, #0
 810176e:	60f8      	str	r0, [r7, #12]
 8101770:	60b9      	str	r1, [r7, #8]
 8101772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101774:	2300      	movs	r3, #0
 8101776:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8101778:	231f      	movs	r3, #31
 810177a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 810177c:	bf00      	nop
 810177e:	693b      	ldr	r3, [r7, #16]
 8101780:	1e5a      	subs	r2, r3, #1
 8101782:	613a      	str	r2, [r7, #16]
 8101784:	2b00      	cmp	r3, #0
 8101786:	d009      	beq.n	810179c <HAL_CRCEx_Polynomial_Set+0x34>
 8101788:	693b      	ldr	r3, [r7, #16]
 810178a:	f003 031f 	and.w	r3, r3, #31
 810178e:	68ba      	ldr	r2, [r7, #8]
 8101790:	fa22 f303 	lsr.w	r3, r2, r3
 8101794:	f003 0301 	and.w	r3, r3, #1
 8101798:	2b00      	cmp	r3, #0
 810179a:	d0f0      	beq.n	810177e <HAL_CRCEx_Polynomial_Set+0x16>
 810179c:	687b      	ldr	r3, [r7, #4]
 810179e:	2b18      	cmp	r3, #24
 81017a0:	d846      	bhi.n	8101830 <HAL_CRCEx_Polynomial_Set+0xc8>
 81017a2:	a201      	add	r2, pc, #4	; (adr r2, 81017a8 <HAL_CRCEx_Polynomial_Set+0x40>)
 81017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017a8:	08101837 	.word	0x08101837
 81017ac:	08101831 	.word	0x08101831
 81017b0:	08101831 	.word	0x08101831
 81017b4:	08101831 	.word	0x08101831
 81017b8:	08101831 	.word	0x08101831
 81017bc:	08101831 	.word	0x08101831
 81017c0:	08101831 	.word	0x08101831
 81017c4:	08101831 	.word	0x08101831
 81017c8:	08101825 	.word	0x08101825
 81017cc:	08101831 	.word	0x08101831
 81017d0:	08101831 	.word	0x08101831
 81017d4:	08101831 	.word	0x08101831
 81017d8:	08101831 	.word	0x08101831
 81017dc:	08101831 	.word	0x08101831
 81017e0:	08101831 	.word	0x08101831
 81017e4:	08101831 	.word	0x08101831
 81017e8:	08101819 	.word	0x08101819
 81017ec:	08101831 	.word	0x08101831
 81017f0:	08101831 	.word	0x08101831
 81017f4:	08101831 	.word	0x08101831
 81017f8:	08101831 	.word	0x08101831
 81017fc:	08101831 	.word	0x08101831
 8101800:	08101831 	.word	0x08101831
 8101804:	08101831 	.word	0x08101831
 8101808:	0810180d 	.word	0x0810180d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 810180c:	693b      	ldr	r3, [r7, #16]
 810180e:	2b06      	cmp	r3, #6
 8101810:	d913      	bls.n	810183a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8101812:	2301      	movs	r3, #1
 8101814:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8101816:	e010      	b.n	810183a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8101818:	693b      	ldr	r3, [r7, #16]
 810181a:	2b07      	cmp	r3, #7
 810181c:	d90f      	bls.n	810183e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 810181e:	2301      	movs	r3, #1
 8101820:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8101822:	e00c      	b.n	810183e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8101824:	693b      	ldr	r3, [r7, #16]
 8101826:	2b0f      	cmp	r3, #15
 8101828:	d90b      	bls.n	8101842 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 810182a:	2301      	movs	r3, #1
 810182c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 810182e:	e008      	b.n	8101842 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8101830:	2301      	movs	r3, #1
 8101832:	75fb      	strb	r3, [r7, #23]
      break;
 8101834:	e006      	b.n	8101844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8101836:	bf00      	nop
 8101838:	e004      	b.n	8101844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 810183a:	bf00      	nop
 810183c:	e002      	b.n	8101844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 810183e:	bf00      	nop
 8101840:	e000      	b.n	8101844 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8101842:	bf00      	nop
  }
  if (status == HAL_OK)
 8101844:	7dfb      	ldrb	r3, [r7, #23]
 8101846:	2b00      	cmp	r3, #0
 8101848:	d10d      	bne.n	8101866 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 810184a:	68fb      	ldr	r3, [r7, #12]
 810184c:	681b      	ldr	r3, [r3, #0]
 810184e:	68ba      	ldr	r2, [r7, #8]
 8101850:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8101852:	68fb      	ldr	r3, [r7, #12]
 8101854:	681b      	ldr	r3, [r3, #0]
 8101856:	689b      	ldr	r3, [r3, #8]
 8101858:	f023 0118 	bic.w	r1, r3, #24
 810185c:	68fb      	ldr	r3, [r7, #12]
 810185e:	681b      	ldr	r3, [r3, #0]
 8101860:	687a      	ldr	r2, [r7, #4]
 8101862:	430a      	orrs	r2, r1
 8101864:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8101866:	7dfb      	ldrb	r3, [r7, #23]
}
 8101868:	4618      	mov	r0, r3
 810186a:	371c      	adds	r7, #28
 810186c:	46bd      	mov	sp, r7
 810186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101872:	4770      	bx	lr

08101874 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8101874:	b580      	push	{r7, lr}
 8101876:	b082      	sub	sp, #8
 8101878:	af00      	add	r7, sp, #0
 810187a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	2b00      	cmp	r3, #0
 8101880:	d101      	bne.n	8101886 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8101882:	2301      	movs	r3, #1
 8101884:	e053      	b.n	810192e <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 810188c:	b2db      	uxtb	r3, r3
 810188e:	2b00      	cmp	r3, #0
 8101890:	d106      	bne.n	81018a0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	2200      	movs	r2, #0
 8101896:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 810189a:	6878      	ldr	r0, [r7, #4]
 810189c:	f7ff f9c0 	bl	8100c20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	2202      	movs	r2, #2
 81018a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 81018a8:	687b      	ldr	r3, [r7, #4]
 81018aa:	681b      	ldr	r3, [r3, #0]
 81018ac:	681b      	ldr	r3, [r3, #0]
 81018ae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 81018b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81018b6:	687a      	ldr	r2, [r7, #4]
 81018b8:	6851      	ldr	r1, [r2, #4]
 81018ba:	687a      	ldr	r2, [r7, #4]
 81018bc:	69d2      	ldr	r2, [r2, #28]
 81018be:	4311      	orrs	r1, r2
 81018c0:	687a      	ldr	r2, [r7, #4]
 81018c2:	6812      	ldr	r2, [r2, #0]
 81018c4:	430b      	orrs	r3, r1
 81018c6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 81018c8:	687b      	ldr	r3, [r7, #4]
 81018ca:	681b      	ldr	r3, [r3, #0]
 81018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81018ce:	f423 7383 	bic.w	r3, r3, #262	; 0x106
 81018d2:	f023 0301 	bic.w	r3, r3, #1
 81018d6:	687a      	ldr	r2, [r7, #4]
 81018d8:	6891      	ldr	r1, [r2, #8]
 81018da:	687a      	ldr	r2, [r7, #4]
 81018dc:	6992      	ldr	r2, [r2, #24]
 81018de:	4311      	orrs	r1, r2
 81018e0:	687a      	ldr	r2, [r7, #4]
 81018e2:	6812      	ldr	r2, [r2, #0]
 81018e4:	430b      	orrs	r3, r1
 81018e6:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 81018e8:	687b      	ldr	r3, [r7, #4]
 81018ea:	681b      	ldr	r3, [r3, #0]
 81018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81018ee:	0c1b      	lsrs	r3, r3, #16
 81018f0:	041b      	lsls	r3, r3, #16
 81018f2:	687a      	ldr	r2, [r7, #4]
 81018f4:	68d1      	ldr	r1, [r2, #12]
 81018f6:	687a      	ldr	r2, [r7, #4]
 81018f8:	6812      	ldr	r2, [r2, #0]
 81018fa:	430b      	orrs	r3, r1
 81018fc:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	681b      	ldr	r3, [r3, #0]
 8101902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101904:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	691b      	ldr	r3, [r3, #16]
 810190c:	051a      	lsls	r2, r3, #20
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	695b      	ldr	r3, [r3, #20]
 8101912:	055b      	lsls	r3, r3, #21
 8101914:	431a      	orrs	r2, r3
 8101916:	687b      	ldr	r3, [r7, #4]
 8101918:	681b      	ldr	r3, [r3, #0]
 810191a:	430a      	orrs	r2, r1
 810191c:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	2200      	movs	r2, #0
 8101922:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	2201      	movs	r2, #1
 8101928:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 810192c:	2300      	movs	r3, #0
}
 810192e:	4618      	mov	r0, r3
 8101930:	3708      	adds	r7, #8
 8101932:	46bd      	mov	sp, r7
 8101934:	bd80      	pop	{r7, pc}
	...

08101938 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8101938:	b480      	push	{r7}
 810193a:	b087      	sub	sp, #28
 810193c:	af00      	add	r7, sp, #0
 810193e:	6078      	str	r0, [r7, #4]
 8101940:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	685b      	ldr	r3, [r3, #4]
 8101946:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 810194a:	683b      	ldr	r3, [r7, #0]
 810194c:	2b01      	cmp	r3, #1
 810194e:	d104      	bne.n	810195a <HAL_DMA2D_ConfigLayer+0x22>
 8101950:	683a      	ldr	r2, [r7, #0]
 8101952:	4613      	mov	r3, r2
 8101954:	00db      	lsls	r3, r3, #3
 8101956:	1a9b      	subs	r3, r3, r2
 8101958:	009b      	lsls	r3, r3, #2
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 810195a:	687b      	ldr	r3, [r7, #4]
 810195c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8101960:	2b01      	cmp	r3, #1
 8101962:	d101      	bne.n	8101968 <HAL_DMA2D_ConfigLayer+0x30>
 8101964:	2302      	movs	r3, #2
 8101966:	e092      	b.n	8101a8e <HAL_DMA2D_ConfigLayer+0x156>
 8101968:	687b      	ldr	r3, [r7, #4]
 810196a:	2201      	movs	r2, #1
 810196c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	2202      	movs	r2, #2
 8101974:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8101978:	683a      	ldr	r2, [r7, #0]
 810197a:	4613      	mov	r3, r2
 810197c:	00db      	lsls	r3, r3, #3
 810197e:	1a9b      	subs	r3, r3, r2
 8101980:	009b      	lsls	r3, r3, #2
 8101982:	3328      	adds	r3, #40	; 0x28
 8101984:	687a      	ldr	r2, [r7, #4]
 8101986:	4413      	add	r3, r2
 8101988:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 810198a:	68fb      	ldr	r3, [r7, #12]
 810198c:	685a      	ldr	r2, [r3, #4]
 810198e:	68fb      	ldr	r3, [r7, #12]
 8101990:	689b      	ldr	r3, [r3, #8]
 8101992:	041b      	lsls	r3, r3, #16
 8101994:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8101996:	68fb      	ldr	r3, [r7, #12]
 8101998:	691b      	ldr	r3, [r3, #16]
 810199a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 810199c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 810199e:	68fb      	ldr	r3, [r7, #12]
 81019a0:	695b      	ldr	r3, [r3, #20]
 81019a2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 81019a4:	4313      	orrs	r3, r2
 81019a6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 81019a8:	4b3c      	ldr	r3, [pc, #240]	; (8101a9c <HAL_DMA2D_ConfigLayer+0x164>)
 81019aa:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 81019ac:	68fb      	ldr	r3, [r7, #12]
 81019ae:	685b      	ldr	r3, [r3, #4]
 81019b0:	2b0a      	cmp	r3, #10
 81019b2:	d003      	beq.n	81019bc <HAL_DMA2D_ConfigLayer+0x84>
 81019b4:	68fb      	ldr	r3, [r7, #12]
 81019b6:	685b      	ldr	r3, [r3, #4]
 81019b8:	2b09      	cmp	r3, #9
 81019ba:	d107      	bne.n	81019cc <HAL_DMA2D_ConfigLayer+0x94>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 81019bc:	68fb      	ldr	r3, [r7, #12]
 81019be:	68db      	ldr	r3, [r3, #12]
 81019c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 81019c4:	693a      	ldr	r2, [r7, #16]
 81019c6:	4313      	orrs	r3, r2
 81019c8:	613b      	str	r3, [r7, #16]
 81019ca:	e005      	b.n	81019d8 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 81019cc:	68fb      	ldr	r3, [r7, #12]
 81019ce:	68db      	ldr	r3, [r3, #12]
 81019d0:	061b      	lsls	r3, r3, #24
 81019d2:	693a      	ldr	r2, [r7, #16]
 81019d4:	4313      	orrs	r3, r2
 81019d6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 81019d8:	683b      	ldr	r3, [r7, #0]
 81019da:	2b00      	cmp	r3, #0
 81019dc:	d120      	bne.n	8101a20 <HAL_DMA2D_ConfigLayer+0xe8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	681b      	ldr	r3, [r3, #0]
 81019e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81019e4:	697b      	ldr	r3, [r7, #20]
 81019e6:	43db      	mvns	r3, r3
 81019e8:	ea02 0103 	and.w	r1, r2, r3
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	693a      	ldr	r2, [r7, #16]
 81019f2:	430a      	orrs	r2, r1
 81019f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	68fa      	ldr	r2, [r7, #12]
 81019fc:	6812      	ldr	r2, [r2, #0]
 81019fe:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8101a00:	68fb      	ldr	r3, [r7, #12]
 8101a02:	685b      	ldr	r3, [r3, #4]
 8101a04:	2b0a      	cmp	r3, #10
 8101a06:	d003      	beq.n	8101a10 <HAL_DMA2D_ConfigLayer+0xd8>
 8101a08:	68fb      	ldr	r3, [r7, #12]
 8101a0a:	685b      	ldr	r3, [r3, #4]
 8101a0c:	2b09      	cmp	r3, #9
 8101a0e:	d135      	bne.n	8101a7c <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8101a10:	68fb      	ldr	r3, [r7, #12]
 8101a12:	68da      	ldr	r2, [r3, #12]
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	681b      	ldr	r3, [r3, #0]
 8101a18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8101a1c:	629a      	str	r2, [r3, #40]	; 0x28
 8101a1e:	e02d      	b.n	8101a7c <HAL_DMA2D_ConfigLayer+0x144>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8101a20:	68fb      	ldr	r3, [r7, #12]
 8101a22:	685b      	ldr	r3, [r3, #4]
 8101a24:	2b0b      	cmp	r3, #11
 8101a26:	d109      	bne.n	8101a3c <HAL_DMA2D_ConfigLayer+0x104>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8101a28:	68fb      	ldr	r3, [r7, #12]
 8101a2a:	699b      	ldr	r3, [r3, #24]
 8101a2c:	049b      	lsls	r3, r3, #18
 8101a2e:	693a      	ldr	r2, [r7, #16]
 8101a30:	4313      	orrs	r3, r2
 8101a32:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8101a34:	697b      	ldr	r3, [r7, #20]
 8101a36:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8101a3a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	681b      	ldr	r3, [r3, #0]
 8101a40:	69da      	ldr	r2, [r3, #28]
 8101a42:	697b      	ldr	r3, [r7, #20]
 8101a44:	43db      	mvns	r3, r3
 8101a46:	ea02 0103 	and.w	r1, r2, r3
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	693a      	ldr	r2, [r7, #16]
 8101a50:	430a      	orrs	r2, r1
 8101a52:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	68fa      	ldr	r2, [r7, #12]
 8101a5a:	6812      	ldr	r2, [r2, #0]
 8101a5c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8101a5e:	68fb      	ldr	r3, [r7, #12]
 8101a60:	685b      	ldr	r3, [r3, #4]
 8101a62:	2b0a      	cmp	r3, #10
 8101a64:	d003      	beq.n	8101a6e <HAL_DMA2D_ConfigLayer+0x136>
 8101a66:	68fb      	ldr	r3, [r7, #12]
 8101a68:	685b      	ldr	r3, [r3, #4]
 8101a6a:	2b09      	cmp	r3, #9
 8101a6c:	d106      	bne.n	8101a7c <HAL_DMA2D_ConfigLayer+0x144>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8101a6e:	68fb      	ldr	r3, [r7, #12]
 8101a70:	68da      	ldr	r2, [r3, #12]
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	681b      	ldr	r3, [r3, #0]
 8101a76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8101a7a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	2201      	movs	r2, #1
 8101a80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	2200      	movs	r2, #0
 8101a88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8101a8c:	2300      	movs	r3, #0
}
 8101a8e:	4618      	mov	r0, r3
 8101a90:	371c      	adds	r7, #28
 8101a92:	46bd      	mov	sp, r7
 8101a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a98:	4770      	bx	lr
 8101a9a:	bf00      	nop
 8101a9c:	ff33000f 	.word	0xff33000f

08101aa0 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8101aa0:	b580      	push	{r7, lr}
 8101aa2:	b088      	sub	sp, #32
 8101aa4:	af00      	add	r7, sp, #0
 8101aa6:	6078      	str	r0, [r7, #4]
 8101aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8101aaa:	687b      	ldr	r3, [r7, #4]
 8101aac:	2b00      	cmp	r3, #0
 8101aae:	d101      	bne.n	8101ab4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8101ab0:	2301      	movs	r3, #1
 8101ab2:	e108      	b.n	8101cc6 <HAL_DSI_Init+0x226>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	7c5b      	ldrb	r3, [r3, #17]
 8101ab8:	b2db      	uxtb	r3, r3
 8101aba:	2b00      	cmp	r3, #0
 8101abc:	d102      	bne.n	8101ac4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8101abe:	6878      	ldr	r0, [r7, #4]
 8101ac0:	f7ff f8d0 	bl	8100c64 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8101ac4:	687b      	ldr	r3, [r7, #4]
 8101ac6:	2203      	movs	r2, #3
 8101ac8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8101aca:	2300      	movs	r3, #0
 8101acc:	613b      	str	r3, [r7, #16]
 8101ace:	687b      	ldr	r3, [r7, #4]
 8101ad0:	681b      	ldr	r3, [r3, #0]
 8101ad2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8101ade:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8101aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101aee:	613b      	str	r3, [r7, #16]
 8101af0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101af2:	f7ff fc81 	bl	81013f8 <HAL_GetTick>
 8101af6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8101af8:	e009      	b.n	8101b0e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8101afa:	f7ff fc7d 	bl	81013f8 <HAL_GetTick>
 8101afe:	4602      	mov	r2, r0
 8101b00:	69fb      	ldr	r3, [r7, #28]
 8101b02:	1ad3      	subs	r3, r2, r3
 8101b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8101b08:	d901      	bls.n	8101b0e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8101b0a:	2303      	movs	r3, #3
 8101b0c:	e0db      	b.n	8101cc6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	681b      	ldr	r3, [r3, #0]
 8101b12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8101b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	d0ed      	beq.n	8101afa <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	681b      	ldr	r3, [r3, #0]
 8101b22:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8101b26:	687a      	ldr	r2, [r7, #4]
 8101b28:	6812      	ldr	r2, [r2, #0]
 8101b2a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8101b2e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8101b32:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8101b3e:	683b      	ldr	r3, [r7, #0]
 8101b40:	681b      	ldr	r3, [r3, #0]
 8101b42:	009a      	lsls	r2, r3, #2
 8101b44:	683b      	ldr	r3, [r7, #0]
 8101b46:	685b      	ldr	r3, [r3, #4]
 8101b48:	02db      	lsls	r3, r3, #11
 8101b4a:	431a      	orrs	r2, r3
 8101b4c:	683b      	ldr	r3, [r7, #0]
 8101b4e:	689b      	ldr	r3, [r3, #8]
 8101b50:	041b      	lsls	r3, r3, #16
 8101b52:	431a      	orrs	r2, r3
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	430a      	orrs	r2, r1
 8101b5a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8101b5e:	2300      	movs	r3, #0
 8101b60:	60fb      	str	r3, [r7, #12]
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	681b      	ldr	r3, [r3, #0]
 8101b66:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	f042 0201 	orr.w	r2, r2, #1
 8101b72:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	681b      	ldr	r3, [r3, #0]
 8101b7a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8101b7e:	f003 0301 	and.w	r3, r3, #1
 8101b82:	60fb      	str	r3, [r7, #12]
 8101b84:	68fb      	ldr	r3, [r7, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101b86:	f7ff fc37 	bl	81013f8 <HAL_GetTick>
 8101b8a:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8101b8c:	e009      	b.n	8101ba2 <HAL_DSI_Init+0x102>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8101b8e:	f7ff fc33 	bl	81013f8 <HAL_GetTick>
 8101b92:	4602      	mov	r2, r0
 8101b94:	69fb      	ldr	r3, [r7, #28]
 8101b96:	1ad3      	subs	r3, r2, r3
 8101b98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8101b9c:	d901      	bls.n	8101ba2 <HAL_DSI_Init+0x102>
    {
      return HAL_TIMEOUT;
 8101b9e:	2303      	movs	r3, #3
 8101ba0:	e091      	b.n	8101cc6 <HAL_DSI_Init+0x226>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8101baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101bae:	2b00      	cmp	r3, #0
 8101bb0:	d0ed      	beq.n	8101b8e <HAL_DSI_Init+0xee>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	681b      	ldr	r3, [r3, #0]
 8101bb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8101bba:	687b      	ldr	r3, [r7, #4]
 8101bbc:	681b      	ldr	r3, [r3, #0]
 8101bbe:	f042 0206 	orr.w	r2, r2, #6
 8101bc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8101bce:	687b      	ldr	r3, [r7, #4]
 8101bd0:	681b      	ldr	r3, [r3, #0]
 8101bd2:	f022 0203 	bic.w	r2, r2, #3
 8101bd6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8101bda:	687b      	ldr	r3, [r7, #4]
 8101bdc:	681b      	ldr	r3, [r3, #0]
 8101bde:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	685b      	ldr	r3, [r3, #4]
 8101be6:	431a      	orrs	r2, r3
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	f042 0201 	orr.w	r2, r2, #1
 8101bf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	681b      	ldr	r3, [r3, #0]
 8101c00:	f022 0203 	bic.w	r2, r2, #3
 8101c04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8101c08:	687b      	ldr	r3, [r7, #4]
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	68da      	ldr	r2, [r3, #12]
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	681b      	ldr	r3, [r3, #0]
 8101c18:	430a      	orrs	r2, r1
 8101c1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	681b      	ldr	r3, [r3, #0]
 8101c22:	689a      	ldr	r2, [r3, #8]
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	681b      	ldr	r3, [r3, #0]
 8101c28:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8101c2c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	6899      	ldr	r1, [r3, #8]
 8101c34:	687b      	ldr	r3, [r7, #4]
 8101c36:	689a      	ldr	r2, [r3, #8]
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	430a      	orrs	r2, r1
 8101c3e:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8101c40:	683b      	ldr	r3, [r7, #0]
 8101c42:	685b      	ldr	r3, [r3, #4]
 8101c44:	2b00      	cmp	r3, #0
 8101c46:	d002      	beq.n	8101c4e <HAL_DSI_Init+0x1ae>
 8101c48:	683b      	ldr	r3, [r7, #0]
 8101c4a:	685b      	ldr	r3, [r3, #4]
 8101c4c:	e000      	b.n	8101c50 <HAL_DSI_Init+0x1b0>
 8101c4e:	2301      	movs	r3, #1
 8101c50:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8101c52:	69bb      	ldr	r3, [r7, #24]
 8101c54:	4a1e      	ldr	r2, [pc, #120]	; (8101cd0 <HAL_DSI_Init+0x230>)
 8101c56:	fb02 f203 	mul.w	r2, r2, r3
 8101c5a:	683b      	ldr	r3, [r7, #0]
 8101c5c:	689b      	ldr	r3, [r3, #8]
 8101c5e:	f003 0303 	and.w	r3, r3, #3
 8101c62:	409a      	lsls	r2, r3
 8101c64:	683b      	ldr	r3, [r7, #0]
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8101c6c:	fb01 f303 	mul.w	r3, r1, r3
 8101c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8101c74:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	681b      	ldr	r3, [r3, #0]
 8101c82:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8101c86:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	681b      	ldr	r3, [r3, #0]
 8101c96:	697a      	ldr	r2, [r7, #20]
 8101c98:	430a      	orrs	r2, r1
 8101c9a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	681b      	ldr	r3, [r3, #0]
 8101ca2:	2200      	movs	r2, #0
 8101ca4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	2200      	movs	r2, #0
 8101cae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	2200      	movs	r2, #0
 8101cb6:	619a      	str	r2, [r3, #24]

  /* Initialise the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8101cb8:	687b      	ldr	r3, [r7, #4]
 8101cba:	2200      	movs	r2, #0
 8101cbc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	2201      	movs	r2, #1
 8101cc2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8101cc4:	2300      	movs	r3, #0
}
 8101cc6:	4618      	mov	r0, r3
 8101cc8:	3720      	adds	r7, #32
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	bd80      	pop	{r7, pc}
 8101cce:	bf00      	nop
 8101cd0:	003d0900 	.word	0x003d0900

08101cd4 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8101cd4:	b480      	push	{r7}
 8101cd6:	b083      	sub	sp, #12
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	6078      	str	r0, [r7, #4]
 8101cdc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	7c1b      	ldrb	r3, [r3, #16]
 8101ce2:	2b01      	cmp	r3, #1
 8101ce4:	d101      	bne.n	8101cea <HAL_DSI_ConfigErrorMonitor+0x16>
 8101ce6:	2302      	movs	r3, #2
 8101ce8:	e0ab      	b.n	8101e42 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	2201      	movs	r2, #1
 8101cee:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	2200      	movs	r2, #0
 8101cf6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	2200      	movs	r2, #0
 8101d00:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	683a      	ldr	r2, [r7, #0]
 8101d08:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8101d0a:	683b      	ldr	r3, [r7, #0]
 8101d0c:	f003 0301 	and.w	r3, r3, #1
 8101d10:	2b00      	cmp	r3, #0
 8101d12:	d00b      	beq.n	8101d2c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8101d14:	687b      	ldr	r3, [r7, #4]
 8101d16:	681b      	ldr	r3, [r3, #0]
 8101d18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8101d1c:	687a      	ldr	r2, [r7, #4]
 8101d1e:	6812      	ldr	r2, [r2, #0]
 8101d20:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8101d24:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8101d28:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8101d2c:	683b      	ldr	r3, [r7, #0]
 8101d2e:	f003 0302 	and.w	r3, r3, #2
 8101d32:	2b00      	cmp	r3, #0
 8101d34:	d009      	beq.n	8101d4a <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	681b      	ldr	r3, [r3, #0]
 8101d3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	681b      	ldr	r3, [r3, #0]
 8101d42:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8101d46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8101d4a:	683b      	ldr	r3, [r7, #0]
 8101d4c:	f003 0304 	and.w	r3, r3, #4
 8101d50:	2b00      	cmp	r3, #0
 8101d52:	d009      	beq.n	8101d68 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	681b      	ldr	r3, [r3, #0]
 8101d58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	f042 0201 	orr.w	r2, r2, #1
 8101d64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8101d68:	683b      	ldr	r3, [r7, #0]
 8101d6a:	f003 0308 	and.w	r3, r3, #8
 8101d6e:	2b00      	cmp	r3, #0
 8101d70:	d009      	beq.n	8101d86 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8101d72:	687b      	ldr	r3, [r7, #4]
 8101d74:	681b      	ldr	r3, [r3, #0]
 8101d76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	681b      	ldr	r3, [r3, #0]
 8101d7e:	f042 0202 	orr.w	r2, r2, #2
 8101d82:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8101d86:	683b      	ldr	r3, [r7, #0]
 8101d88:	f003 0310 	and.w	r3, r3, #16
 8101d8c:	2b00      	cmp	r3, #0
 8101d8e:	d009      	beq.n	8101da4 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8101d90:	687b      	ldr	r3, [r7, #4]
 8101d92:	681b      	ldr	r3, [r3, #0]
 8101d94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	f042 020c 	orr.w	r2, r2, #12
 8101da0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8101da4:	683b      	ldr	r3, [r7, #0]
 8101da6:	f003 0320 	and.w	r3, r3, #32
 8101daa:	2b00      	cmp	r3, #0
 8101dac:	d009      	beq.n	8101dc2 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	f042 0210 	orr.w	r2, r2, #16
 8101dbe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8101dc2:	683b      	ldr	r3, [r7, #0]
 8101dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d009      	beq.n	8101de0 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	681b      	ldr	r3, [r3, #0]
 8101dd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101dd4:	687b      	ldr	r3, [r7, #4]
 8101dd6:	681b      	ldr	r3, [r3, #0]
 8101dd8:	f042 0220 	orr.w	r2, r2, #32
 8101ddc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8101de0:	683b      	ldr	r3, [r7, #0]
 8101de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101de6:	2b00      	cmp	r3, #0
 8101de8:	d009      	beq.n	8101dfe <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8101dea:	687b      	ldr	r3, [r7, #4]
 8101dec:	681b      	ldr	r3, [r3, #0]
 8101dee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101df2:	687b      	ldr	r3, [r7, #4]
 8101df4:	681b      	ldr	r3, [r3, #0]
 8101df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8101dfa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8101dfe:	683b      	ldr	r3, [r7, #0]
 8101e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101e04:	2b00      	cmp	r3, #0
 8101e06:	d009      	beq.n	8101e1c <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101e10:	687b      	ldr	r3, [r7, #4]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8101e18:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8101e1c:	683b      	ldr	r3, [r7, #0]
 8101e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d009      	beq.n	8101e3a <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	681b      	ldr	r3, [r3, #0]
 8101e2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8101e36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	2200      	movs	r2, #0
 8101e3e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8101e40:	2300      	movs	r3, #0
}
 8101e42:	4618      	mov	r0, r3
 8101e44:	370c      	adds	r7, #12
 8101e46:	46bd      	mov	sp, r7
 8101e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e4c:	4770      	bx	lr

08101e4e <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8101e4e:	b480      	push	{r7}
 8101e50:	b083      	sub	sp, #12
 8101e52:	af00      	add	r7, sp, #0
 8101e54:	6078      	str	r0, [r7, #4]
 8101e56:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	7c1b      	ldrb	r3, [r3, #16]
 8101e5c:	2b01      	cmp	r3, #1
 8101e5e:	d101      	bne.n	8101e64 <HAL_DSI_SetGenericVCID+0x16>
 8101e60:	2302      	movs	r3, #2
 8101e62:	e016      	b.n	8101e92 <HAL_DSI_SetGenericVCID+0x44>
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	2201      	movs	r2, #1
 8101e68:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	681b      	ldr	r3, [r3, #0]
 8101e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	f022 0203 	bic.w	r2, r2, #3
 8101e78:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	681b      	ldr	r3, [r3, #0]
 8101e7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8101e80:	687b      	ldr	r3, [r7, #4]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	683a      	ldr	r2, [r7, #0]
 8101e86:	430a      	orrs	r2, r1
 8101e88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8101e8a:	687b      	ldr	r3, [r7, #4]
 8101e8c:	2200      	movs	r2, #0
 8101e8e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8101e90:	2300      	movs	r3, #0
}
 8101e92:	4618      	mov	r0, r3
 8101e94:	370c      	adds	r7, #12
 8101e96:	46bd      	mov	sp, r7
 8101e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e9c:	4770      	bx	lr

08101e9e <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8101e9e:	b480      	push	{r7}
 8101ea0:	b083      	sub	sp, #12
 8101ea2:	af00      	add	r7, sp, #0
 8101ea4:	6078      	str	r0, [r7, #4]
 8101ea6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	7c1b      	ldrb	r3, [r3, #16]
 8101eac:	2b01      	cmp	r3, #1
 8101eae:	d101      	bne.n	8101eb4 <HAL_DSI_ConfigVideoMode+0x16>
 8101eb0:	2302      	movs	r3, #2
 8101eb2:	e1f6      	b.n	81022a2 <HAL_DSI_ConfigVideoMode+0x404>
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	2201      	movs	r2, #1
 8101eb8:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	681b      	ldr	r3, [r3, #0]
 8101ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101ec0:	687b      	ldr	r3, [r7, #4]
 8101ec2:	681b      	ldr	r3, [r3, #0]
 8101ec4:	f022 0201 	bic.w	r2, r2, #1
 8101ec8:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	681b      	ldr	r3, [r3, #0]
 8101ece:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8101ed2:	687b      	ldr	r3, [r7, #4]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	f022 0201 	bic.w	r2, r2, #1
 8101eda:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	681b      	ldr	r3, [r3, #0]
 8101ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	681b      	ldr	r3, [r3, #0]
 8101ee8:	f022 0203 	bic.w	r2, r2, #3
 8101eec:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	681b      	ldr	r3, [r3, #0]
 8101ef2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8101ef4:	683b      	ldr	r3, [r7, #0]
 8101ef6:	68da      	ldr	r2, [r3, #12]
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	681b      	ldr	r3, [r3, #0]
 8101efc:	430a      	orrs	r2, r1
 8101efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101f06:	687a      	ldr	r2, [r7, #4]
 8101f08:	6812      	ldr	r2, [r2, #0]
 8101f0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8101f0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101f12:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	681b      	ldr	r3, [r3, #0]
 8101f18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	691a      	ldr	r2, [r3, #16]
 8101f1e:	687b      	ldr	r3, [r7, #4]
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	430a      	orrs	r2, r1
 8101f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	681b      	ldr	r3, [r3, #0]
 8101f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101f2c:	687a      	ldr	r2, [r7, #4]
 8101f2e:	6812      	ldr	r2, [r2, #0]
 8101f30:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8101f34:	f023 031f 	bic.w	r3, r3, #31
 8101f38:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	681b      	ldr	r3, [r3, #0]
 8101f3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8101f40:	683b      	ldr	r3, [r7, #0]
 8101f42:	695a      	ldr	r2, [r3, #20]
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	681b      	ldr	r3, [r3, #0]
 8101f48:	430a      	orrs	r2, r1
 8101f4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101f52:	687a      	ldr	r2, [r7, #4]
 8101f54:	6812      	ldr	r2, [r2, #0]
 8101f56:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8101f5a:	f023 031f 	bic.w	r3, r3, #31
 8101f5e:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8101f66:	683b      	ldr	r3, [r7, #0]
 8101f68:	699a      	ldr	r2, [r3, #24]
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	681b      	ldr	r3, [r3, #0]
 8101f6e:	430a      	orrs	r2, r1
 8101f70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	68da      	ldr	r2, [r3, #12]
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	681b      	ldr	r3, [r3, #0]
 8101f7c:	f022 0203 	bic.w	r2, r2, #3
 8101f80:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8101f82:	687b      	ldr	r3, [r7, #4]
 8101f84:	681b      	ldr	r3, [r3, #0]
 8101f86:	68d9      	ldr	r1, [r3, #12]
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	681a      	ldr	r2, [r3, #0]
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	430a      	orrs	r2, r1
 8101f92:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	681b      	ldr	r3, [r3, #0]
 8101f98:	695a      	ldr	r2, [r3, #20]
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	681b      	ldr	r3, [r3, #0]
 8101f9e:	f022 0207 	bic.w	r2, r2, #7
 8101fa2:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	6959      	ldr	r1, [r3, #20]
 8101faa:	683b      	ldr	r3, [r7, #0]
 8101fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8101fae:	683b      	ldr	r3, [r7, #0]
 8101fb0:	6a1b      	ldr	r3, [r3, #32]
 8101fb2:	431a      	orrs	r2, r3
 8101fb4:	683b      	ldr	r3, [r7, #0]
 8101fb6:	69db      	ldr	r3, [r3, #28]
 8101fb8:	431a      	orrs	r2, r3
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	430a      	orrs	r2, r1
 8101fc0:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	691a      	ldr	r2, [r3, #16]
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	f022 020f 	bic.w	r2, r2, #15
 8101fd0:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	681b      	ldr	r3, [r3, #0]
 8101fd6:	6919      	ldr	r1, [r3, #16]
 8101fd8:	683b      	ldr	r3, [r7, #0]
 8101fda:	685a      	ldr	r2, [r3, #4]
 8101fdc:	687b      	ldr	r3, [r7, #4]
 8101fde:	681b      	ldr	r3, [r3, #0]
 8101fe0:	430a      	orrs	r2, r1
 8101fe2:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	f022 020e 	bic.w	r2, r2, #14
 8101ff4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8102000:	683b      	ldr	r3, [r7, #0]
 8102002:	685b      	ldr	r3, [r3, #4]
 8102004:	005a      	lsls	r2, r3, #1
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	430a      	orrs	r2, r1
 810200c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8102010:	683b      	ldr	r3, [r7, #0]
 8102012:	685b      	ldr	r3, [r3, #4]
 8102014:	2b03      	cmp	r3, #3
 8102016:	d110      	bne.n	810203a <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	691a      	ldr	r2, [r3, #16]
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102026:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
 810202c:	6919      	ldr	r1, [r3, #16]
 810202e:	683b      	ldr	r3, [r7, #0]
 8102030:	689a      	ldr	r2, [r3, #8]
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	681b      	ldr	r3, [r3, #0]
 8102036:	430a      	orrs	r2, r1
 8102038:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	681b      	ldr	r3, [r3, #0]
 810203e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102040:	687a      	ldr	r2, [r7, #4]
 8102042:	6812      	ldr	r2, [r2, #0]
 8102044:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8102048:	f023 030f 	bic.w	r3, r3, #15
 810204c:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8102054:	683b      	ldr	r3, [r7, #0]
 8102056:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	430a      	orrs	r2, r1
 810205e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102066:	687a      	ldr	r2, [r7, #4]
 8102068:	6812      	ldr	r2, [r2, #0]
 810206a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 810206e:	f023 030f 	bic.w	r3, r3, #15
 8102072:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810207a:	683b      	ldr	r3, [r7, #0]
 810207c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810207e:	687b      	ldr	r3, [r7, #4]
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	430a      	orrs	r2, r1
 8102084:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810208c:	687a      	ldr	r2, [r7, #4]
 810208e:	6812      	ldr	r2, [r2, #0]
 8102090:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8102094:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8102098:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 81020a0:	683b      	ldr	r3, [r7, #0]
 81020a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	681b      	ldr	r3, [r3, #0]
 81020a8:	430a      	orrs	r2, r1
 81020aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 81020ac:	687b      	ldr	r3, [r7, #4]
 81020ae:	681b      	ldr	r3, [r3, #0]
 81020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020b2:	687a      	ldr	r2, [r7, #4]
 81020b4:	6812      	ldr	r2, [r2, #0]
 81020b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81020ba:	f023 0303 	bic.w	r3, r3, #3
 81020be:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81020c6:	683b      	ldr	r3, [r7, #0]
 81020c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	430a      	orrs	r2, r1
 81020d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	681b      	ldr	r3, [r3, #0]
 81020d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81020d8:	687a      	ldr	r2, [r7, #4]
 81020da:	6812      	ldr	r2, [r2, #0]
 81020dc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 81020e0:	f023 0303 	bic.w	r3, r3, #3
 81020e4:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	681b      	ldr	r3, [r3, #0]
 81020ea:	6d99      	ldr	r1, [r3, #88]	; 0x58
 81020ec:	683b      	ldr	r3, [r7, #0]
 81020ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	430a      	orrs	r2, r1
 81020f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81020fe:	687a      	ldr	r2, [r7, #4]
 8102100:	6812      	ldr	r2, [r2, #0]
 8102102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8102106:	f023 0303 	bic.w	r3, r3, #3
 810210a:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	681b      	ldr	r3, [r3, #0]
 8102110:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8102112:	683b      	ldr	r3, [r7, #0]
 8102114:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	681b      	ldr	r3, [r3, #0]
 810211a:	430a      	orrs	r2, r1
 810211c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	681b      	ldr	r3, [r3, #0]
 8102122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102124:	687a      	ldr	r2, [r7, #4]
 8102126:	6812      	ldr	r2, [r2, #0]
 8102128:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 810212c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8102130:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8102132:	687b      	ldr	r3, [r7, #4]
 8102134:	681b      	ldr	r3, [r3, #0]
 8102136:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8102138:	683b      	ldr	r3, [r7, #0]
 810213a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	681b      	ldr	r3, [r3, #0]
 8102140:	430a      	orrs	r2, r1
 8102142:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	681b      	ldr	r3, [r3, #0]
 8102148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102152:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8102154:	687b      	ldr	r3, [r7, #4]
 8102156:	681b      	ldr	r3, [r3, #0]
 8102158:	6b99      	ldr	r1, [r3, #56]	; 0x38
 810215a:	683b      	ldr	r3, [r7, #0]
 810215c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	681b      	ldr	r3, [r3, #0]
 8102162:	430a      	orrs	r2, r1
 8102164:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	699a      	ldr	r2, [r3, #24]
 810216c:	687b      	ldr	r3, [r7, #4]
 810216e:	681b      	ldr	r3, [r3, #0]
 8102170:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8102174:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	6999      	ldr	r1, [r3, #24]
 810217c:	683b      	ldr	r3, [r7, #0]
 810217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102180:	041a      	lsls	r2, r3, #16
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	430a      	orrs	r2, r1
 8102188:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	699a      	ldr	r2, [r3, #24]
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8102198:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	681b      	ldr	r3, [r3, #0]
 810219e:	6999      	ldr	r1, [r3, #24]
 81021a0:	683b      	ldr	r3, [r7, #0]
 81021a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	430a      	orrs	r2, r1
 81021aa:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	681b      	ldr	r3, [r3, #0]
 81021b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 81021ba:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 81021bc:	687b      	ldr	r3, [r7, #4]
 81021be:	681b      	ldr	r3, [r3, #0]
 81021c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 81021c2:	683b      	ldr	r3, [r7, #0]
 81021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81021c6:	687b      	ldr	r3, [r7, #4]
 81021c8:	681b      	ldr	r3, [r3, #0]
 81021ca:	430a      	orrs	r2, r1
 81021cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	681b      	ldr	r3, [r3, #0]
 81021d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81021d4:	687b      	ldr	r3, [r7, #4]
 81021d6:	681b      	ldr	r3, [r3, #0]
 81021d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81021dc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 81021de:	687b      	ldr	r3, [r7, #4]
 81021e0:	681b      	ldr	r3, [r3, #0]
 81021e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 81021e4:	683b      	ldr	r3, [r7, #0]
 81021e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	681b      	ldr	r3, [r3, #0]
 81021ec:	430a      	orrs	r2, r1
 81021ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 81021fe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8102200:	687b      	ldr	r3, [r7, #4]
 8102202:	681b      	ldr	r3, [r3, #0]
 8102204:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8102206:	683b      	ldr	r3, [r7, #0]
 8102208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	430a      	orrs	r2, r1
 8102210:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8102220:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	681b      	ldr	r3, [r3, #0]
 8102226:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8102228:	683b      	ldr	r3, [r7, #0]
 810222a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	681b      	ldr	r3, [r3, #0]
 8102230:	430a      	orrs	r2, r1
 8102232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	681b      	ldr	r3, [r3, #0]
 8102238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8102242:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	6b99      	ldr	r1, [r3, #56]	; 0x38
 810224a:	683b      	ldr	r3, [r7, #0]
 810224c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	430a      	orrs	r2, r1
 8102254:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810225c:	687b      	ldr	r3, [r7, #4]
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102264:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	681b      	ldr	r3, [r3, #0]
 810226a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 810226c:	683b      	ldr	r3, [r7, #0]
 810226e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	681b      	ldr	r3, [r3, #0]
 8102274:	430a      	orrs	r2, r1
 8102276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	681b      	ldr	r3, [r3, #0]
 810227c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8102286:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 810228e:	683b      	ldr	r3, [r7, #0]
 8102290:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	430a      	orrs	r2, r1
 8102298:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	2200      	movs	r2, #0
 810229e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 81022a0:	2300      	movs	r3, #0
}
 81022a2:	4618      	mov	r0, r3
 81022a4:	370c      	adds	r7, #12
 81022a6:	46bd      	mov	sp, r7
 81022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ac:	4770      	bx	lr

081022ae <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 81022ae:	b480      	push	{r7}
 81022b0:	b083      	sub	sp, #12
 81022b2:	af00      	add	r7, sp, #0
 81022b4:	6078      	str	r0, [r7, #4]
 81022b6:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	7c1b      	ldrb	r3, [r3, #16]
 81022bc:	2b01      	cmp	r3, #1
 81022be:	d101      	bne.n	81022c4 <HAL_DSI_ConfigFlowControl+0x16>
 81022c0:	2302      	movs	r3, #2
 81022c2:	e016      	b.n	81022f2 <HAL_DSI_ConfigFlowControl+0x44>
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	2201      	movs	r2, #1
 81022c8:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	681b      	ldr	r3, [r3, #0]
 81022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81022d0:	687b      	ldr	r3, [r7, #4]
 81022d2:	681b      	ldr	r3, [r3, #0]
 81022d4:	f022 021f 	bic.w	r2, r2, #31
 81022d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	681b      	ldr	r3, [r3, #0]
 81022de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	683a      	ldr	r2, [r7, #0]
 81022e6:	430a      	orrs	r2, r1
 81022e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 81022ea:	687b      	ldr	r3, [r7, #4]
 81022ec:	2200      	movs	r2, #0
 81022ee:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 81022f0:	2300      	movs	r3, #0
}
 81022f2:	4618      	mov	r0, r3
 81022f4:	370c      	adds	r7, #12
 81022f6:	46bd      	mov	sp, r7
 81022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fc:	4770      	bx	lr

081022fe <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 81022fe:	b480      	push	{r7}
 8102300:	b085      	sub	sp, #20
 8102302:	af00      	add	r7, sp, #0
 8102304:	6078      	str	r0, [r7, #4]
 8102306:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	7c1b      	ldrb	r3, [r3, #16]
 810230c:	2b01      	cmp	r3, #1
 810230e:	d101      	bne.n	8102314 <HAL_DSI_ConfigPhyTimer+0x16>
 8102310:	2302      	movs	r3, #2
 8102312:	e058      	b.n	81023c6 <HAL_DSI_ConfigPhyTimer+0xc8>
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	2201      	movs	r2, #1
 8102318:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 810231a:	683b      	ldr	r3, [r7, #0]
 810231c:	681a      	ldr	r2, [r3, #0]
 810231e:	683b      	ldr	r3, [r7, #0]
 8102320:	685b      	ldr	r3, [r3, #4]
 8102322:	4293      	cmp	r3, r2
 8102324:	bf38      	it	cc
 8102326:	4613      	movcc	r3, r2
 8102328:	60fb      	str	r3, [r7, #12]
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 810233a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8102346:	68fb      	ldr	r3, [r7, #12]
 8102348:	041a      	lsls	r2, r3, #16
 810234a:	68fb      	ldr	r3, [r7, #12]
 810234c:	431a      	orrs	r2, r3
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	430a      	orrs	r2, r1
 8102354:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8102368:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	681b      	ldr	r3, [r3, #0]
 8102370:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8102374:	683b      	ldr	r3, [r7, #0]
 8102376:	691a      	ldr	r2, [r3, #16]
 8102378:	683b      	ldr	r3, [r7, #0]
 810237a:	68db      	ldr	r3, [r3, #12]
 810237c:	041b      	lsls	r3, r3, #16
 810237e:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8102380:	683b      	ldr	r3, [r7, #0]
 8102382:	689b      	ldr	r3, [r3, #8]
 8102384:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8102386:	431a      	orrs	r2, r3
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	430a      	orrs	r2, r1
 810238e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
 8102396:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 810239a:	687b      	ldr	r3, [r7, #4]
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 81023a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 81023ae:	683b      	ldr	r3, [r7, #0]
 81023b0:	695b      	ldr	r3, [r3, #20]
 81023b2:	021a      	lsls	r2, r3, #8
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	430a      	orrs	r2, r1
 81023ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	2200      	movs	r2, #0
 81023c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 81023c4:	2300      	movs	r3, #0
}
 81023c6:	4618      	mov	r0, r3
 81023c8:	3714      	adds	r7, #20
 81023ca:	46bd      	mov	sp, r7
 81023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023d0:	4770      	bx	lr

081023d2 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 81023d2:	b480      	push	{r7}
 81023d4:	b083      	sub	sp, #12
 81023d6:	af00      	add	r7, sp, #0
 81023d8:	6078      	str	r0, [r7, #4]
 81023da:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	7c1b      	ldrb	r3, [r3, #16]
 81023e0:	2b01      	cmp	r3, #1
 81023e2:	d101      	bne.n	81023e8 <HAL_DSI_ConfigHostTimeouts+0x16>
 81023e4:	2302      	movs	r3, #2
 81023e6:	e0b4      	b.n	8102552 <HAL_DSI_ConfigHostTimeouts+0x180>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	2201      	movs	r2, #1
 81023ec:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	689a      	ldr	r2, [r3, #8]
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 81023fc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	6899      	ldr	r1, [r3, #8]
 8102404:	683b      	ldr	r3, [r7, #0]
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	021a      	lsls	r2, r3, #8
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	681b      	ldr	r3, [r3, #0]
 810240e:	430a      	orrs	r2, r1
 8102410:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	681b      	ldr	r3, [r3, #0]
 810241c:	b292      	uxth	r2, r2
 810241e:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8102426:	683b      	ldr	r3, [r7, #0]
 8102428:	685b      	ldr	r3, [r3, #4]
 810242a:	041a      	lsls	r2, r3, #16
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	430a      	orrs	r2, r1
 8102432:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810243a:	687a      	ldr	r2, [r7, #4]
 810243c:	6812      	ldr	r2, [r2, #0]
 810243e:	0c1b      	lsrs	r3, r3, #16
 8102440:	041b      	lsls	r3, r3, #16
 8102442:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	6f99      	ldr	r1, [r3, #120]	; 0x78
 810244a:	683b      	ldr	r3, [r7, #0]
 810244c:	689a      	ldr	r2, [r3, #8]
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	681b      	ldr	r3, [r3, #0]
 8102452:	430a      	orrs	r2, r1
 8102454:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810245c:	687a      	ldr	r2, [r7, #4]
 810245e:	6812      	ldr	r2, [r2, #0]
 8102460:	0c1b      	lsrs	r3, r3, #16
 8102462:	041b      	lsls	r3, r3, #16
 8102464:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 810246c:	683b      	ldr	r3, [r7, #0]
 810246e:	68da      	ldr	r2, [r3, #12]
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	681b      	ldr	r3, [r3, #0]
 8102474:	430a      	orrs	r2, r1
 8102476:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	681b      	ldr	r3, [r3, #0]
 810247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102480:	687a      	ldr	r2, [r7, #4]
 8102482:	6812      	ldr	r2, [r2, #0]
 8102484:	0c1b      	lsrs	r3, r3, #16
 8102486:	041b      	lsls	r3, r3, #16
 8102488:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8102494:	683b      	ldr	r3, [r7, #0]
 8102496:	691a      	ldr	r2, [r3, #16]
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	681b      	ldr	r3, [r3, #0]
 810249c:	430a      	orrs	r2, r1
 810249e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81024aa:	687a      	ldr	r2, [r7, #4]
 81024ac:	6812      	ldr	r2, [r2, #0]
 81024ae:	0c1b      	lsrs	r3, r3, #16
 81024b0:	041b      	lsls	r3, r3, #16
 81024b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 81024be:	683b      	ldr	r3, [r7, #0]
 81024c0:	695a      	ldr	r2, [r3, #20]
 81024c2:	687b      	ldr	r3, [r7, #4]
 81024c4:	681b      	ldr	r3, [r3, #0]
 81024c6:	430a      	orrs	r2, r1
 81024c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	681b      	ldr	r3, [r3, #0]
 81024d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 81024dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	681b      	ldr	r3, [r3, #0]
 81024e4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 81024e8:	683b      	ldr	r3, [r7, #0]
 81024ea:	699a      	ldr	r2, [r3, #24]
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	430a      	orrs	r2, r1
 81024f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81024fe:	687a      	ldr	r2, [r7, #4]
 8102500:	6812      	ldr	r2, [r2, #0]
 8102502:	0c1b      	lsrs	r3, r3, #16
 8102504:	041b      	lsls	r3, r3, #16
 8102506:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	681b      	ldr	r3, [r3, #0]
 810250e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8102512:	683b      	ldr	r3, [r7, #0]
 8102514:	69da      	ldr	r2, [r3, #28]
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	430a      	orrs	r2, r1
 810251c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102528:	687a      	ldr	r2, [r7, #4]
 810252a:	6812      	ldr	r2, [r2, #0]
 810252c:	0c1b      	lsrs	r3, r3, #16
 810252e:	041b      	lsls	r3, r3, #16
 8102530:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 810253c:	683b      	ldr	r3, [r7, #0]
 810253e:	6a1a      	ldr	r2, [r3, #32]
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	430a      	orrs	r2, r1
 8102546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	2200      	movs	r2, #0
 810254e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8102550:	2300      	movs	r3, #0
}
 8102552:	4618      	mov	r0, r3
 8102554:	370c      	adds	r7, #12
 8102556:	46bd      	mov	sp, r7
 8102558:	f85d 7b04 	ldr.w	r7, [sp], #4
 810255c:	4770      	bx	lr

0810255e <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 810255e:	b480      	push	{r7}
 8102560:	b083      	sub	sp, #12
 8102562:	af00      	add	r7, sp, #0
 8102564:	6078      	str	r0, [r7, #4]
 8102566:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	7c1b      	ldrb	r3, [r3, #16]
 810256c:	2b01      	cmp	r3, #1
 810256e:	d101      	bne.n	8102574 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8102570:	2302      	movs	r3, #2
 8102572:	e01b      	b.n	81025ac <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	2201      	movs	r2, #1
 8102578:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	681b      	ldr	r3, [r3, #0]
 810257e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 810258a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	681b      	ldr	r3, [r3, #0]
 8102592:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8102596:	683b      	ldr	r3, [r7, #0]
 8102598:	065a      	lsls	r2, r3, #25
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	681b      	ldr	r3, [r3, #0]
 810259e:	430a      	orrs	r2, r1
 81025a0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	2200      	movs	r2, #0
 81025a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 81025aa:	2300      	movs	r3, #0
}
 81025ac:	4618      	mov	r0, r3
 81025ae:	370c      	adds	r7, #12
 81025b0:	46bd      	mov	sp, r7
 81025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025b6:	4770      	bx	lr

081025b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81025b8:	b480      	push	{r7}
 81025ba:	b089      	sub	sp, #36	; 0x24
 81025bc:	af00      	add	r7, sp, #0
 81025be:	6078      	str	r0, [r7, #4]
 81025c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81025c2:	2300      	movs	r3, #0
 81025c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81025c6:	4b89      	ldr	r3, [pc, #548]	; (81027ec <HAL_GPIO_Init+0x234>)
 81025c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81025ca:	e194      	b.n	81028f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81025cc:	683b      	ldr	r3, [r7, #0]
 81025ce:	681a      	ldr	r2, [r3, #0]
 81025d0:	2101      	movs	r1, #1
 81025d2:	69fb      	ldr	r3, [r7, #28]
 81025d4:	fa01 f303 	lsl.w	r3, r1, r3
 81025d8:	4013      	ands	r3, r2
 81025da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81025dc:	693b      	ldr	r3, [r7, #16]
 81025de:	2b00      	cmp	r3, #0
 81025e0:	f000 8186 	beq.w	81028f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81025e4:	683b      	ldr	r3, [r7, #0]
 81025e6:	685b      	ldr	r3, [r3, #4]
 81025e8:	2b01      	cmp	r3, #1
 81025ea:	d00b      	beq.n	8102604 <HAL_GPIO_Init+0x4c>
 81025ec:	683b      	ldr	r3, [r7, #0]
 81025ee:	685b      	ldr	r3, [r3, #4]
 81025f0:	2b02      	cmp	r3, #2
 81025f2:	d007      	beq.n	8102604 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81025f4:	683b      	ldr	r3, [r7, #0]
 81025f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81025f8:	2b11      	cmp	r3, #17
 81025fa:	d003      	beq.n	8102604 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81025fc:	683b      	ldr	r3, [r7, #0]
 81025fe:	685b      	ldr	r3, [r3, #4]
 8102600:	2b12      	cmp	r3, #18
 8102602:	d130      	bne.n	8102666 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	689b      	ldr	r3, [r3, #8]
 8102608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810260a:	69fb      	ldr	r3, [r7, #28]
 810260c:	005b      	lsls	r3, r3, #1
 810260e:	2203      	movs	r2, #3
 8102610:	fa02 f303 	lsl.w	r3, r2, r3
 8102614:	43db      	mvns	r3, r3
 8102616:	69ba      	ldr	r2, [r7, #24]
 8102618:	4013      	ands	r3, r2
 810261a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810261c:	683b      	ldr	r3, [r7, #0]
 810261e:	68da      	ldr	r2, [r3, #12]
 8102620:	69fb      	ldr	r3, [r7, #28]
 8102622:	005b      	lsls	r3, r3, #1
 8102624:	fa02 f303 	lsl.w	r3, r2, r3
 8102628:	69ba      	ldr	r2, [r7, #24]
 810262a:	4313      	orrs	r3, r2
 810262c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	69ba      	ldr	r2, [r7, #24]
 8102632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	685b      	ldr	r3, [r3, #4]
 8102638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810263a:	2201      	movs	r2, #1
 810263c:	69fb      	ldr	r3, [r7, #28]
 810263e:	fa02 f303 	lsl.w	r3, r2, r3
 8102642:	43db      	mvns	r3, r3
 8102644:	69ba      	ldr	r2, [r7, #24]
 8102646:	4013      	ands	r3, r2
 8102648:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810264a:	683b      	ldr	r3, [r7, #0]
 810264c:	685b      	ldr	r3, [r3, #4]
 810264e:	091b      	lsrs	r3, r3, #4
 8102650:	f003 0201 	and.w	r2, r3, #1
 8102654:	69fb      	ldr	r3, [r7, #28]
 8102656:	fa02 f303 	lsl.w	r3, r2, r3
 810265a:	69ba      	ldr	r2, [r7, #24]
 810265c:	4313      	orrs	r3, r2
 810265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	69ba      	ldr	r2, [r7, #24]
 8102664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	68db      	ldr	r3, [r3, #12]
 810266a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810266c:	69fb      	ldr	r3, [r7, #28]
 810266e:	005b      	lsls	r3, r3, #1
 8102670:	2203      	movs	r2, #3
 8102672:	fa02 f303 	lsl.w	r3, r2, r3
 8102676:	43db      	mvns	r3, r3
 8102678:	69ba      	ldr	r2, [r7, #24]
 810267a:	4013      	ands	r3, r2
 810267c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810267e:	683b      	ldr	r3, [r7, #0]
 8102680:	689a      	ldr	r2, [r3, #8]
 8102682:	69fb      	ldr	r3, [r7, #28]
 8102684:	005b      	lsls	r3, r3, #1
 8102686:	fa02 f303 	lsl.w	r3, r2, r3
 810268a:	69ba      	ldr	r2, [r7, #24]
 810268c:	4313      	orrs	r3, r2
 810268e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	69ba      	ldr	r2, [r7, #24]
 8102694:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102696:	683b      	ldr	r3, [r7, #0]
 8102698:	685b      	ldr	r3, [r3, #4]
 810269a:	2b02      	cmp	r3, #2
 810269c:	d003      	beq.n	81026a6 <HAL_GPIO_Init+0xee>
 810269e:	683b      	ldr	r3, [r7, #0]
 81026a0:	685b      	ldr	r3, [r3, #4]
 81026a2:	2b12      	cmp	r3, #18
 81026a4:	d123      	bne.n	81026ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81026a6:	69fb      	ldr	r3, [r7, #28]
 81026a8:	08da      	lsrs	r2, r3, #3
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	3208      	adds	r2, #8
 81026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81026b4:	69fb      	ldr	r3, [r7, #28]
 81026b6:	f003 0307 	and.w	r3, r3, #7
 81026ba:	009b      	lsls	r3, r3, #2
 81026bc:	220f      	movs	r2, #15
 81026be:	fa02 f303 	lsl.w	r3, r2, r3
 81026c2:	43db      	mvns	r3, r3
 81026c4:	69ba      	ldr	r2, [r7, #24]
 81026c6:	4013      	ands	r3, r2
 81026c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81026ca:	683b      	ldr	r3, [r7, #0]
 81026cc:	691a      	ldr	r2, [r3, #16]
 81026ce:	69fb      	ldr	r3, [r7, #28]
 81026d0:	f003 0307 	and.w	r3, r3, #7
 81026d4:	009b      	lsls	r3, r3, #2
 81026d6:	fa02 f303 	lsl.w	r3, r2, r3
 81026da:	69ba      	ldr	r2, [r7, #24]
 81026dc:	4313      	orrs	r3, r2
 81026de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81026e0:	69fb      	ldr	r3, [r7, #28]
 81026e2:	08da      	lsrs	r2, r3, #3
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	3208      	adds	r2, #8
 81026e8:	69b9      	ldr	r1, [r7, #24]
 81026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	681b      	ldr	r3, [r3, #0]
 81026f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81026f4:	69fb      	ldr	r3, [r7, #28]
 81026f6:	005b      	lsls	r3, r3, #1
 81026f8:	2203      	movs	r2, #3
 81026fa:	fa02 f303 	lsl.w	r3, r2, r3
 81026fe:	43db      	mvns	r3, r3
 8102700:	69ba      	ldr	r2, [r7, #24]
 8102702:	4013      	ands	r3, r2
 8102704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102706:	683b      	ldr	r3, [r7, #0]
 8102708:	685b      	ldr	r3, [r3, #4]
 810270a:	f003 0203 	and.w	r2, r3, #3
 810270e:	69fb      	ldr	r3, [r7, #28]
 8102710:	005b      	lsls	r3, r3, #1
 8102712:	fa02 f303 	lsl.w	r3, r2, r3
 8102716:	69ba      	ldr	r2, [r7, #24]
 8102718:	4313      	orrs	r3, r2
 810271a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	69ba      	ldr	r2, [r7, #24]
 8102720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8102722:	683b      	ldr	r3, [r7, #0]
 8102724:	685b      	ldr	r3, [r3, #4]
 8102726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810272a:	2b00      	cmp	r3, #0
 810272c:	f000 80e0 	beq.w	81028f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102730:	4b2f      	ldr	r3, [pc, #188]	; (81027f0 <HAL_GPIO_Init+0x238>)
 8102732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102736:	4a2e      	ldr	r2, [pc, #184]	; (81027f0 <HAL_GPIO_Init+0x238>)
 8102738:	f043 0302 	orr.w	r3, r3, #2
 810273c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102740:	4b2b      	ldr	r3, [pc, #172]	; (81027f0 <HAL_GPIO_Init+0x238>)
 8102742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102746:	f003 0302 	and.w	r3, r3, #2
 810274a:	60fb      	str	r3, [r7, #12]
 810274c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810274e:	4a29      	ldr	r2, [pc, #164]	; (81027f4 <HAL_GPIO_Init+0x23c>)
 8102750:	69fb      	ldr	r3, [r7, #28]
 8102752:	089b      	lsrs	r3, r3, #2
 8102754:	3302      	adds	r3, #2
 8102756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810275c:	69fb      	ldr	r3, [r7, #28]
 810275e:	f003 0303 	and.w	r3, r3, #3
 8102762:	009b      	lsls	r3, r3, #2
 8102764:	220f      	movs	r2, #15
 8102766:	fa02 f303 	lsl.w	r3, r2, r3
 810276a:	43db      	mvns	r3, r3
 810276c:	69ba      	ldr	r2, [r7, #24]
 810276e:	4013      	ands	r3, r2
 8102770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	4a20      	ldr	r2, [pc, #128]	; (81027f8 <HAL_GPIO_Init+0x240>)
 8102776:	4293      	cmp	r3, r2
 8102778:	d052      	beq.n	8102820 <HAL_GPIO_Init+0x268>
 810277a:	687b      	ldr	r3, [r7, #4]
 810277c:	4a1f      	ldr	r2, [pc, #124]	; (81027fc <HAL_GPIO_Init+0x244>)
 810277e:	4293      	cmp	r3, r2
 8102780:	d031      	beq.n	81027e6 <HAL_GPIO_Init+0x22e>
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	4a1e      	ldr	r2, [pc, #120]	; (8102800 <HAL_GPIO_Init+0x248>)
 8102786:	4293      	cmp	r3, r2
 8102788:	d02b      	beq.n	81027e2 <HAL_GPIO_Init+0x22a>
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	4a1d      	ldr	r2, [pc, #116]	; (8102804 <HAL_GPIO_Init+0x24c>)
 810278e:	4293      	cmp	r3, r2
 8102790:	d025      	beq.n	81027de <HAL_GPIO_Init+0x226>
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	4a1c      	ldr	r2, [pc, #112]	; (8102808 <HAL_GPIO_Init+0x250>)
 8102796:	4293      	cmp	r3, r2
 8102798:	d01f      	beq.n	81027da <HAL_GPIO_Init+0x222>
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	4a1b      	ldr	r2, [pc, #108]	; (810280c <HAL_GPIO_Init+0x254>)
 810279e:	4293      	cmp	r3, r2
 81027a0:	d019      	beq.n	81027d6 <HAL_GPIO_Init+0x21e>
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	4a1a      	ldr	r2, [pc, #104]	; (8102810 <HAL_GPIO_Init+0x258>)
 81027a6:	4293      	cmp	r3, r2
 81027a8:	d013      	beq.n	81027d2 <HAL_GPIO_Init+0x21a>
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	4a19      	ldr	r2, [pc, #100]	; (8102814 <HAL_GPIO_Init+0x25c>)
 81027ae:	4293      	cmp	r3, r2
 81027b0:	d00d      	beq.n	81027ce <HAL_GPIO_Init+0x216>
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	4a18      	ldr	r2, [pc, #96]	; (8102818 <HAL_GPIO_Init+0x260>)
 81027b6:	4293      	cmp	r3, r2
 81027b8:	d007      	beq.n	81027ca <HAL_GPIO_Init+0x212>
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	4a17      	ldr	r2, [pc, #92]	; (810281c <HAL_GPIO_Init+0x264>)
 81027be:	4293      	cmp	r3, r2
 81027c0:	d101      	bne.n	81027c6 <HAL_GPIO_Init+0x20e>
 81027c2:	2309      	movs	r3, #9
 81027c4:	e02d      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027c6:	230a      	movs	r3, #10
 81027c8:	e02b      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027ca:	2308      	movs	r3, #8
 81027cc:	e029      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027ce:	2307      	movs	r3, #7
 81027d0:	e027      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027d2:	2306      	movs	r3, #6
 81027d4:	e025      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027d6:	2305      	movs	r3, #5
 81027d8:	e023      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027da:	2304      	movs	r3, #4
 81027dc:	e021      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027de:	2303      	movs	r3, #3
 81027e0:	e01f      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027e2:	2302      	movs	r3, #2
 81027e4:	e01d      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027e6:	2301      	movs	r3, #1
 81027e8:	e01b      	b.n	8102822 <HAL_GPIO_Init+0x26a>
 81027ea:	bf00      	nop
 81027ec:	580000c0 	.word	0x580000c0
 81027f0:	58024400 	.word	0x58024400
 81027f4:	58000400 	.word	0x58000400
 81027f8:	58020000 	.word	0x58020000
 81027fc:	58020400 	.word	0x58020400
 8102800:	58020800 	.word	0x58020800
 8102804:	58020c00 	.word	0x58020c00
 8102808:	58021000 	.word	0x58021000
 810280c:	58021400 	.word	0x58021400
 8102810:	58021800 	.word	0x58021800
 8102814:	58021c00 	.word	0x58021c00
 8102818:	58022000 	.word	0x58022000
 810281c:	58022400 	.word	0x58022400
 8102820:	2300      	movs	r3, #0
 8102822:	69fa      	ldr	r2, [r7, #28]
 8102824:	f002 0203 	and.w	r2, r2, #3
 8102828:	0092      	lsls	r2, r2, #2
 810282a:	4093      	lsls	r3, r2
 810282c:	69ba      	ldr	r2, [r7, #24]
 810282e:	4313      	orrs	r3, r2
 8102830:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102832:	4938      	ldr	r1, [pc, #224]	; (8102914 <HAL_GPIO_Init+0x35c>)
 8102834:	69fb      	ldr	r3, [r7, #28]
 8102836:	089b      	lsrs	r3, r3, #2
 8102838:	3302      	adds	r3, #2
 810283a:	69ba      	ldr	r2, [r7, #24]
 810283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102840:	697b      	ldr	r3, [r7, #20]
 8102842:	681b      	ldr	r3, [r3, #0]
 8102844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102846:	693b      	ldr	r3, [r7, #16]
 8102848:	43db      	mvns	r3, r3
 810284a:	69ba      	ldr	r2, [r7, #24]
 810284c:	4013      	ands	r3, r2
 810284e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8102850:	683b      	ldr	r3, [r7, #0]
 8102852:	685b      	ldr	r3, [r3, #4]
 8102854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102858:	2b00      	cmp	r3, #0
 810285a:	d003      	beq.n	8102864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810285c:	69ba      	ldr	r2, [r7, #24]
 810285e:	693b      	ldr	r3, [r7, #16]
 8102860:	4313      	orrs	r3, r2
 8102862:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102864:	697b      	ldr	r3, [r7, #20]
 8102866:	69ba      	ldr	r2, [r7, #24]
 8102868:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810286a:	697b      	ldr	r3, [r7, #20]
 810286c:	685b      	ldr	r3, [r3, #4]
 810286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102870:	693b      	ldr	r3, [r7, #16]
 8102872:	43db      	mvns	r3, r3
 8102874:	69ba      	ldr	r2, [r7, #24]
 8102876:	4013      	ands	r3, r2
 8102878:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810287a:	683b      	ldr	r3, [r7, #0]
 810287c:	685b      	ldr	r3, [r3, #4]
 810287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102882:	2b00      	cmp	r3, #0
 8102884:	d003      	beq.n	810288e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8102886:	69ba      	ldr	r2, [r7, #24]
 8102888:	693b      	ldr	r3, [r7, #16]
 810288a:	4313      	orrs	r3, r2
 810288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810288e:	697b      	ldr	r3, [r7, #20]
 8102890:	69ba      	ldr	r2, [r7, #24]
 8102892:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810289c:	693b      	ldr	r3, [r7, #16]
 810289e:	43db      	mvns	r3, r3
 81028a0:	69ba      	ldr	r2, [r7, #24]
 81028a2:	4013      	ands	r3, r2
 81028a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81028a6:	683b      	ldr	r3, [r7, #0]
 81028a8:	685b      	ldr	r3, [r3, #4]
 81028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81028ae:	2b00      	cmp	r3, #0
 81028b0:	d003      	beq.n	81028ba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81028b2:	69ba      	ldr	r2, [r7, #24]
 81028b4:	693b      	ldr	r3, [r7, #16]
 81028b6:	4313      	orrs	r3, r2
 81028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81028ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81028be:	69bb      	ldr	r3, [r7, #24]
 81028c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81028c6:	685b      	ldr	r3, [r3, #4]
 81028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81028ca:	693b      	ldr	r3, [r7, #16]
 81028cc:	43db      	mvns	r3, r3
 81028ce:	69ba      	ldr	r2, [r7, #24]
 81028d0:	4013      	ands	r3, r2
 81028d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81028d4:	683b      	ldr	r3, [r7, #0]
 81028d6:	685b      	ldr	r3, [r3, #4]
 81028d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81028dc:	2b00      	cmp	r3, #0
 81028de:	d003      	beq.n	81028e8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81028e0:	69ba      	ldr	r2, [r7, #24]
 81028e2:	693b      	ldr	r3, [r7, #16]
 81028e4:	4313      	orrs	r3, r2
 81028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81028e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81028ec:	69bb      	ldr	r3, [r7, #24]
 81028ee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81028f0:	69fb      	ldr	r3, [r7, #28]
 81028f2:	3301      	adds	r3, #1
 81028f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81028f6:	683b      	ldr	r3, [r7, #0]
 81028f8:	681a      	ldr	r2, [r3, #0]
 81028fa:	69fb      	ldr	r3, [r7, #28]
 81028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8102900:	2b00      	cmp	r3, #0
 8102902:	f47f ae63 	bne.w	81025cc <HAL_GPIO_Init+0x14>
  }
}
 8102906:	bf00      	nop
 8102908:	bf00      	nop
 810290a:	3724      	adds	r7, #36	; 0x24
 810290c:	46bd      	mov	sp, r7
 810290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102912:	4770      	bx	lr
 8102914:	58000400 	.word	0x58000400

08102918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8102918:	b480      	push	{r7}
 810291a:	b085      	sub	sp, #20
 810291c:	af00      	add	r7, sp, #0
 810291e:	6078      	str	r0, [r7, #4]
 8102920:	460b      	mov	r3, r1
 8102922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	691a      	ldr	r2, [r3, #16]
 8102928:	887b      	ldrh	r3, [r7, #2]
 810292a:	4013      	ands	r3, r2
 810292c:	2b00      	cmp	r3, #0
 810292e:	d002      	beq.n	8102936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8102930:	2301      	movs	r3, #1
 8102932:	73fb      	strb	r3, [r7, #15]
 8102934:	e001      	b.n	810293a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8102936:	2300      	movs	r3, #0
 8102938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 810293a:	7bfb      	ldrb	r3, [r7, #15]
}
 810293c:	4618      	mov	r0, r3
 810293e:	3714      	adds	r7, #20
 8102940:	46bd      	mov	sp, r7
 8102942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102946:	4770      	bx	lr

08102948 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8102948:	b5f0      	push	{r4, r5, r6, r7, lr}
 810294a:	b08f      	sub	sp, #60	; 0x3c
 810294c:	af0a      	add	r7, sp, #40	; 0x28
 810294e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	2b00      	cmp	r3, #0
 8102954:	d101      	bne.n	810295a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8102956:	2301      	movs	r3, #1
 8102958:	e054      	b.n	8102a04 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	681b      	ldr	r3, [r3, #0]
 810295e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8102966:	b2db      	uxtb	r3, r3
 8102968:	2b00      	cmp	r3, #0
 810296a:	d106      	bne.n	810297a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 810296c:	687b      	ldr	r3, [r7, #4]
 810296e:	2200      	movs	r2, #0
 8102970:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8102974:	6878      	ldr	r0, [r7, #4]
 8102976:	f00a fadf 	bl	810cf38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	2203      	movs	r2, #3
 810297e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810298a:	2b00      	cmp	r3, #0
 810298c:	d102      	bne.n	8102994 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	2200      	movs	r2, #0
 8102992:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4618      	mov	r0, r3
 810299a:	f007 ffb0 	bl	810a8fe <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	681b      	ldr	r3, [r3, #0]
 81029a2:	603b      	str	r3, [r7, #0]
 81029a4:	687e      	ldr	r6, [r7, #4]
 81029a6:	466d      	mov	r5, sp
 81029a8:	f106 0410 	add.w	r4, r6, #16
 81029ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81029ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81029b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81029b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81029b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 81029b8:	e885 0003 	stmia.w	r5, {r0, r1}
 81029bc:	1d33      	adds	r3, r6, #4
 81029be:	cb0e      	ldmia	r3, {r1, r2, r3}
 81029c0:	6838      	ldr	r0, [r7, #0]
 81029c2:	f007 ff1d 	bl	810a800 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	2101      	movs	r1, #1
 81029cc:	4618      	mov	r0, r3
 81029ce:	f007 ffa7 	bl	810a920 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	603b      	str	r3, [r7, #0]
 81029d8:	687e      	ldr	r6, [r7, #4]
 81029da:	466d      	mov	r5, sp
 81029dc:	f106 0410 	add.w	r4, r6, #16
 81029e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81029e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81029e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81029e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81029e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 81029ec:	e885 0003 	stmia.w	r5, {r0, r1}
 81029f0:	1d33      	adds	r3, r6, #4
 81029f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 81029f4:	6838      	ldr	r0, [r7, #0]
 81029f6:	f008 f8f1 	bl	810abdc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	2201      	movs	r2, #1
 81029fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8102a02:	2300      	movs	r3, #0
}
 8102a04:	4618      	mov	r0, r3
 8102a06:	3714      	adds	r7, #20
 8102a08:	46bd      	mov	sp, r7
 8102a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08102a0c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8102a0c:	b590      	push	{r4, r7, lr}
 8102a0e:	b089      	sub	sp, #36	; 0x24
 8102a10:	af04      	add	r7, sp, #16
 8102a12:	6078      	str	r0, [r7, #4]
 8102a14:	4608      	mov	r0, r1
 8102a16:	4611      	mov	r1, r2
 8102a18:	461a      	mov	r2, r3
 8102a1a:	4603      	mov	r3, r0
 8102a1c:	70fb      	strb	r3, [r7, #3]
 8102a1e:	460b      	mov	r3, r1
 8102a20:	70bb      	strb	r3, [r7, #2]
 8102a22:	4613      	mov	r3, r2
 8102a24:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8102a2c:	2b01      	cmp	r3, #1
 8102a2e:	d101      	bne.n	8102a34 <HAL_HCD_HC_Init+0x28>
 8102a30:	2302      	movs	r3, #2
 8102a32:	e076      	b.n	8102b22 <HAL_HCD_HC_Init+0x116>
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	2201      	movs	r2, #1
 8102a38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8102a3c:	78fb      	ldrb	r3, [r7, #3]
 8102a3e:	687a      	ldr	r2, [r7, #4]
 8102a40:	212c      	movs	r1, #44	; 0x2c
 8102a42:	fb01 f303 	mul.w	r3, r1, r3
 8102a46:	4413      	add	r3, r2
 8102a48:	333d      	adds	r3, #61	; 0x3d
 8102a4a:	2200      	movs	r2, #0
 8102a4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8102a4e:	78fb      	ldrb	r3, [r7, #3]
 8102a50:	687a      	ldr	r2, [r7, #4]
 8102a52:	212c      	movs	r1, #44	; 0x2c
 8102a54:	fb01 f303 	mul.w	r3, r1, r3
 8102a58:	4413      	add	r3, r2
 8102a5a:	3338      	adds	r3, #56	; 0x38
 8102a5c:	787a      	ldrb	r2, [r7, #1]
 8102a5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8102a60:	78fb      	ldrb	r3, [r7, #3]
 8102a62:	687a      	ldr	r2, [r7, #4]
 8102a64:	212c      	movs	r1, #44	; 0x2c
 8102a66:	fb01 f303 	mul.w	r3, r1, r3
 8102a6a:	4413      	add	r3, r2
 8102a6c:	3340      	adds	r3, #64	; 0x40
 8102a6e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8102a70:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8102a72:	78fb      	ldrb	r3, [r7, #3]
 8102a74:	687a      	ldr	r2, [r7, #4]
 8102a76:	212c      	movs	r1, #44	; 0x2c
 8102a78:	fb01 f303 	mul.w	r3, r1, r3
 8102a7c:	4413      	add	r3, r2
 8102a7e:	3339      	adds	r3, #57	; 0x39
 8102a80:	78fa      	ldrb	r2, [r7, #3]
 8102a82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8102a84:	78fb      	ldrb	r3, [r7, #3]
 8102a86:	687a      	ldr	r2, [r7, #4]
 8102a88:	212c      	movs	r1, #44	; 0x2c
 8102a8a:	fb01 f303 	mul.w	r3, r1, r3
 8102a8e:	4413      	add	r3, r2
 8102a90:	333f      	adds	r3, #63	; 0x3f
 8102a92:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8102a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8102a98:	78fb      	ldrb	r3, [r7, #3]
 8102a9a:	78ba      	ldrb	r2, [r7, #2]
 8102a9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8102aa0:	b2d0      	uxtb	r0, r2
 8102aa2:	687a      	ldr	r2, [r7, #4]
 8102aa4:	212c      	movs	r1, #44	; 0x2c
 8102aa6:	fb01 f303 	mul.w	r3, r1, r3
 8102aaa:	4413      	add	r3, r2
 8102aac:	333a      	adds	r3, #58	; 0x3a
 8102aae:	4602      	mov	r2, r0
 8102ab0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8102ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8102ab6:	2b00      	cmp	r3, #0
 8102ab8:	da09      	bge.n	8102ace <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8102aba:	78fb      	ldrb	r3, [r7, #3]
 8102abc:	687a      	ldr	r2, [r7, #4]
 8102abe:	212c      	movs	r1, #44	; 0x2c
 8102ac0:	fb01 f303 	mul.w	r3, r1, r3
 8102ac4:	4413      	add	r3, r2
 8102ac6:	333b      	adds	r3, #59	; 0x3b
 8102ac8:	2201      	movs	r2, #1
 8102aca:	701a      	strb	r2, [r3, #0]
 8102acc:	e008      	b.n	8102ae0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8102ace:	78fb      	ldrb	r3, [r7, #3]
 8102ad0:	687a      	ldr	r2, [r7, #4]
 8102ad2:	212c      	movs	r1, #44	; 0x2c
 8102ad4:	fb01 f303 	mul.w	r3, r1, r3
 8102ad8:	4413      	add	r3, r2
 8102ada:	333b      	adds	r3, #59	; 0x3b
 8102adc:	2200      	movs	r2, #0
 8102ade:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8102ae0:	78fb      	ldrb	r3, [r7, #3]
 8102ae2:	687a      	ldr	r2, [r7, #4]
 8102ae4:	212c      	movs	r1, #44	; 0x2c
 8102ae6:	fb01 f303 	mul.w	r3, r1, r3
 8102aea:	4413      	add	r3, r2
 8102aec:	333c      	adds	r3, #60	; 0x3c
 8102aee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8102af2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	6818      	ldr	r0, [r3, #0]
 8102af8:	787c      	ldrb	r4, [r7, #1]
 8102afa:	78ba      	ldrb	r2, [r7, #2]
 8102afc:	78f9      	ldrb	r1, [r7, #3]
 8102afe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8102b00:	9302      	str	r3, [sp, #8]
 8102b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8102b06:	9301      	str	r3, [sp, #4]
 8102b08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8102b0c:	9300      	str	r3, [sp, #0]
 8102b0e:	4623      	mov	r3, r4
 8102b10:	f008 f9b6 	bl	810ae80 <USB_HC_Init>
 8102b14:	4603      	mov	r3, r0
 8102b16:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	2200      	movs	r2, #0
 8102b1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8102b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8102b22:	4618      	mov	r0, r3
 8102b24:	3714      	adds	r7, #20
 8102b26:	46bd      	mov	sp, r7
 8102b28:	bd90      	pop	{r4, r7, pc}

08102b2a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8102b2a:	b580      	push	{r7, lr}
 8102b2c:	b084      	sub	sp, #16
 8102b2e:	af00      	add	r7, sp, #0
 8102b30:	6078      	str	r0, [r7, #4]
 8102b32:	460b      	mov	r3, r1
 8102b34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8102b36:	2300      	movs	r3, #0
 8102b38:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8102b40:	2b01      	cmp	r3, #1
 8102b42:	d101      	bne.n	8102b48 <HAL_HCD_HC_Halt+0x1e>
 8102b44:	2302      	movs	r3, #2
 8102b46:	e00f      	b.n	8102b68 <HAL_HCD_HC_Halt+0x3e>
 8102b48:	687b      	ldr	r3, [r7, #4]
 8102b4a:	2201      	movs	r2, #1
 8102b4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	681b      	ldr	r3, [r3, #0]
 8102b54:	78fa      	ldrb	r2, [r7, #3]
 8102b56:	4611      	mov	r1, r2
 8102b58:	4618      	mov	r0, r3
 8102b5a:	f008 fbf2 	bl	810b342 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	2200      	movs	r2, #0
 8102b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8102b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8102b68:	4618      	mov	r0, r3
 8102b6a:	3710      	adds	r7, #16
 8102b6c:	46bd      	mov	sp, r7
 8102b6e:	bd80      	pop	{r7, pc}

08102b70 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8102b70:	b580      	push	{r7, lr}
 8102b72:	b082      	sub	sp, #8
 8102b74:	af00      	add	r7, sp, #0
 8102b76:	6078      	str	r0, [r7, #4]
 8102b78:	4608      	mov	r0, r1
 8102b7a:	4611      	mov	r1, r2
 8102b7c:	461a      	mov	r2, r3
 8102b7e:	4603      	mov	r3, r0
 8102b80:	70fb      	strb	r3, [r7, #3]
 8102b82:	460b      	mov	r3, r1
 8102b84:	70bb      	strb	r3, [r7, #2]
 8102b86:	4613      	mov	r3, r2
 8102b88:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8102b8a:	78fb      	ldrb	r3, [r7, #3]
 8102b8c:	687a      	ldr	r2, [r7, #4]
 8102b8e:	212c      	movs	r1, #44	; 0x2c
 8102b90:	fb01 f303 	mul.w	r3, r1, r3
 8102b94:	4413      	add	r3, r2
 8102b96:	333b      	adds	r3, #59	; 0x3b
 8102b98:	78ba      	ldrb	r2, [r7, #2]
 8102b9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8102b9c:	78fb      	ldrb	r3, [r7, #3]
 8102b9e:	687a      	ldr	r2, [r7, #4]
 8102ba0:	212c      	movs	r1, #44	; 0x2c
 8102ba2:	fb01 f303 	mul.w	r3, r1, r3
 8102ba6:	4413      	add	r3, r2
 8102ba8:	333f      	adds	r3, #63	; 0x3f
 8102baa:	787a      	ldrb	r2, [r7, #1]
 8102bac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8102bae:	7c3b      	ldrb	r3, [r7, #16]
 8102bb0:	2b00      	cmp	r3, #0
 8102bb2:	d112      	bne.n	8102bda <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8102bb4:	78fb      	ldrb	r3, [r7, #3]
 8102bb6:	687a      	ldr	r2, [r7, #4]
 8102bb8:	212c      	movs	r1, #44	; 0x2c
 8102bba:	fb01 f303 	mul.w	r3, r1, r3
 8102bbe:	4413      	add	r3, r2
 8102bc0:	3342      	adds	r3, #66	; 0x42
 8102bc2:	2203      	movs	r2, #3
 8102bc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8102bc6:	78fb      	ldrb	r3, [r7, #3]
 8102bc8:	687a      	ldr	r2, [r7, #4]
 8102bca:	212c      	movs	r1, #44	; 0x2c
 8102bcc:	fb01 f303 	mul.w	r3, r1, r3
 8102bd0:	4413      	add	r3, r2
 8102bd2:	333d      	adds	r3, #61	; 0x3d
 8102bd4:	7f3a      	ldrb	r2, [r7, #28]
 8102bd6:	701a      	strb	r2, [r3, #0]
 8102bd8:	e008      	b.n	8102bec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8102bda:	78fb      	ldrb	r3, [r7, #3]
 8102bdc:	687a      	ldr	r2, [r7, #4]
 8102bde:	212c      	movs	r1, #44	; 0x2c
 8102be0:	fb01 f303 	mul.w	r3, r1, r3
 8102be4:	4413      	add	r3, r2
 8102be6:	3342      	adds	r3, #66	; 0x42
 8102be8:	2202      	movs	r2, #2
 8102bea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8102bec:	787b      	ldrb	r3, [r7, #1]
 8102bee:	2b03      	cmp	r3, #3
 8102bf0:	f200 80c6 	bhi.w	8102d80 <HAL_HCD_HC_SubmitRequest+0x210>
 8102bf4:	a201      	add	r2, pc, #4	; (adr r2, 8102bfc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8102bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bfa:	bf00      	nop
 8102bfc:	08102c0d 	.word	0x08102c0d
 8102c00:	08102d6d 	.word	0x08102d6d
 8102c04:	08102c71 	.word	0x08102c71
 8102c08:	08102cef 	.word	0x08102cef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8102c0c:	7c3b      	ldrb	r3, [r7, #16]
 8102c0e:	2b01      	cmp	r3, #1
 8102c10:	f040 80b8 	bne.w	8102d84 <HAL_HCD_HC_SubmitRequest+0x214>
 8102c14:	78bb      	ldrb	r3, [r7, #2]
 8102c16:	2b00      	cmp	r3, #0
 8102c18:	f040 80b4 	bne.w	8102d84 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8102c1c:	8b3b      	ldrh	r3, [r7, #24]
 8102c1e:	2b00      	cmp	r3, #0
 8102c20:	d108      	bne.n	8102c34 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8102c22:	78fb      	ldrb	r3, [r7, #3]
 8102c24:	687a      	ldr	r2, [r7, #4]
 8102c26:	212c      	movs	r1, #44	; 0x2c
 8102c28:	fb01 f303 	mul.w	r3, r1, r3
 8102c2c:	4413      	add	r3, r2
 8102c2e:	3355      	adds	r3, #85	; 0x55
 8102c30:	2201      	movs	r2, #1
 8102c32:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8102c34:	78fb      	ldrb	r3, [r7, #3]
 8102c36:	687a      	ldr	r2, [r7, #4]
 8102c38:	212c      	movs	r1, #44	; 0x2c
 8102c3a:	fb01 f303 	mul.w	r3, r1, r3
 8102c3e:	4413      	add	r3, r2
 8102c40:	3355      	adds	r3, #85	; 0x55
 8102c42:	781b      	ldrb	r3, [r3, #0]
 8102c44:	2b00      	cmp	r3, #0
 8102c46:	d109      	bne.n	8102c5c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8102c48:	78fb      	ldrb	r3, [r7, #3]
 8102c4a:	687a      	ldr	r2, [r7, #4]
 8102c4c:	212c      	movs	r1, #44	; 0x2c
 8102c4e:	fb01 f303 	mul.w	r3, r1, r3
 8102c52:	4413      	add	r3, r2
 8102c54:	3342      	adds	r3, #66	; 0x42
 8102c56:	2200      	movs	r2, #0
 8102c58:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8102c5a:	e093      	b.n	8102d84 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8102c5c:	78fb      	ldrb	r3, [r7, #3]
 8102c5e:	687a      	ldr	r2, [r7, #4]
 8102c60:	212c      	movs	r1, #44	; 0x2c
 8102c62:	fb01 f303 	mul.w	r3, r1, r3
 8102c66:	4413      	add	r3, r2
 8102c68:	3342      	adds	r3, #66	; 0x42
 8102c6a:	2202      	movs	r2, #2
 8102c6c:	701a      	strb	r2, [r3, #0]
      break;
 8102c6e:	e089      	b.n	8102d84 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8102c70:	78bb      	ldrb	r3, [r7, #2]
 8102c72:	2b00      	cmp	r3, #0
 8102c74:	d11d      	bne.n	8102cb2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8102c76:	78fb      	ldrb	r3, [r7, #3]
 8102c78:	687a      	ldr	r2, [r7, #4]
 8102c7a:	212c      	movs	r1, #44	; 0x2c
 8102c7c:	fb01 f303 	mul.w	r3, r1, r3
 8102c80:	4413      	add	r3, r2
 8102c82:	3355      	adds	r3, #85	; 0x55
 8102c84:	781b      	ldrb	r3, [r3, #0]
 8102c86:	2b00      	cmp	r3, #0
 8102c88:	d109      	bne.n	8102c9e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8102c8a:	78fb      	ldrb	r3, [r7, #3]
 8102c8c:	687a      	ldr	r2, [r7, #4]
 8102c8e:	212c      	movs	r1, #44	; 0x2c
 8102c90:	fb01 f303 	mul.w	r3, r1, r3
 8102c94:	4413      	add	r3, r2
 8102c96:	3342      	adds	r3, #66	; 0x42
 8102c98:	2200      	movs	r2, #0
 8102c9a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8102c9c:	e073      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8102c9e:	78fb      	ldrb	r3, [r7, #3]
 8102ca0:	687a      	ldr	r2, [r7, #4]
 8102ca2:	212c      	movs	r1, #44	; 0x2c
 8102ca4:	fb01 f303 	mul.w	r3, r1, r3
 8102ca8:	4413      	add	r3, r2
 8102caa:	3342      	adds	r3, #66	; 0x42
 8102cac:	2202      	movs	r2, #2
 8102cae:	701a      	strb	r2, [r3, #0]
      break;
 8102cb0:	e069      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8102cb2:	78fb      	ldrb	r3, [r7, #3]
 8102cb4:	687a      	ldr	r2, [r7, #4]
 8102cb6:	212c      	movs	r1, #44	; 0x2c
 8102cb8:	fb01 f303 	mul.w	r3, r1, r3
 8102cbc:	4413      	add	r3, r2
 8102cbe:	3354      	adds	r3, #84	; 0x54
 8102cc0:	781b      	ldrb	r3, [r3, #0]
 8102cc2:	2b00      	cmp	r3, #0
 8102cc4:	d109      	bne.n	8102cda <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8102cc6:	78fb      	ldrb	r3, [r7, #3]
 8102cc8:	687a      	ldr	r2, [r7, #4]
 8102cca:	212c      	movs	r1, #44	; 0x2c
 8102ccc:	fb01 f303 	mul.w	r3, r1, r3
 8102cd0:	4413      	add	r3, r2
 8102cd2:	3342      	adds	r3, #66	; 0x42
 8102cd4:	2200      	movs	r2, #0
 8102cd6:	701a      	strb	r2, [r3, #0]
      break;
 8102cd8:	e055      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8102cda:	78fb      	ldrb	r3, [r7, #3]
 8102cdc:	687a      	ldr	r2, [r7, #4]
 8102cde:	212c      	movs	r1, #44	; 0x2c
 8102ce0:	fb01 f303 	mul.w	r3, r1, r3
 8102ce4:	4413      	add	r3, r2
 8102ce6:	3342      	adds	r3, #66	; 0x42
 8102ce8:	2202      	movs	r2, #2
 8102cea:	701a      	strb	r2, [r3, #0]
      break;
 8102cec:	e04b      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8102cee:	78bb      	ldrb	r3, [r7, #2]
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d11d      	bne.n	8102d30 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8102cf4:	78fb      	ldrb	r3, [r7, #3]
 8102cf6:	687a      	ldr	r2, [r7, #4]
 8102cf8:	212c      	movs	r1, #44	; 0x2c
 8102cfa:	fb01 f303 	mul.w	r3, r1, r3
 8102cfe:	4413      	add	r3, r2
 8102d00:	3355      	adds	r3, #85	; 0x55
 8102d02:	781b      	ldrb	r3, [r3, #0]
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d109      	bne.n	8102d1c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8102d08:	78fb      	ldrb	r3, [r7, #3]
 8102d0a:	687a      	ldr	r2, [r7, #4]
 8102d0c:	212c      	movs	r1, #44	; 0x2c
 8102d0e:	fb01 f303 	mul.w	r3, r1, r3
 8102d12:	4413      	add	r3, r2
 8102d14:	3342      	adds	r3, #66	; 0x42
 8102d16:	2200      	movs	r2, #0
 8102d18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8102d1a:	e034      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8102d1c:	78fb      	ldrb	r3, [r7, #3]
 8102d1e:	687a      	ldr	r2, [r7, #4]
 8102d20:	212c      	movs	r1, #44	; 0x2c
 8102d22:	fb01 f303 	mul.w	r3, r1, r3
 8102d26:	4413      	add	r3, r2
 8102d28:	3342      	adds	r3, #66	; 0x42
 8102d2a:	2202      	movs	r2, #2
 8102d2c:	701a      	strb	r2, [r3, #0]
      break;
 8102d2e:	e02a      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8102d30:	78fb      	ldrb	r3, [r7, #3]
 8102d32:	687a      	ldr	r2, [r7, #4]
 8102d34:	212c      	movs	r1, #44	; 0x2c
 8102d36:	fb01 f303 	mul.w	r3, r1, r3
 8102d3a:	4413      	add	r3, r2
 8102d3c:	3354      	adds	r3, #84	; 0x54
 8102d3e:	781b      	ldrb	r3, [r3, #0]
 8102d40:	2b00      	cmp	r3, #0
 8102d42:	d109      	bne.n	8102d58 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8102d44:	78fb      	ldrb	r3, [r7, #3]
 8102d46:	687a      	ldr	r2, [r7, #4]
 8102d48:	212c      	movs	r1, #44	; 0x2c
 8102d4a:	fb01 f303 	mul.w	r3, r1, r3
 8102d4e:	4413      	add	r3, r2
 8102d50:	3342      	adds	r3, #66	; 0x42
 8102d52:	2200      	movs	r2, #0
 8102d54:	701a      	strb	r2, [r3, #0]
      break;
 8102d56:	e016      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8102d58:	78fb      	ldrb	r3, [r7, #3]
 8102d5a:	687a      	ldr	r2, [r7, #4]
 8102d5c:	212c      	movs	r1, #44	; 0x2c
 8102d5e:	fb01 f303 	mul.w	r3, r1, r3
 8102d62:	4413      	add	r3, r2
 8102d64:	3342      	adds	r3, #66	; 0x42
 8102d66:	2202      	movs	r2, #2
 8102d68:	701a      	strb	r2, [r3, #0]
      break;
 8102d6a:	e00c      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8102d6c:	78fb      	ldrb	r3, [r7, #3]
 8102d6e:	687a      	ldr	r2, [r7, #4]
 8102d70:	212c      	movs	r1, #44	; 0x2c
 8102d72:	fb01 f303 	mul.w	r3, r1, r3
 8102d76:	4413      	add	r3, r2
 8102d78:	3342      	adds	r3, #66	; 0x42
 8102d7a:	2200      	movs	r2, #0
 8102d7c:	701a      	strb	r2, [r3, #0]
      break;
 8102d7e:	e002      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8102d80:	bf00      	nop
 8102d82:	e000      	b.n	8102d86 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8102d84:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8102d86:	78fb      	ldrb	r3, [r7, #3]
 8102d88:	687a      	ldr	r2, [r7, #4]
 8102d8a:	212c      	movs	r1, #44	; 0x2c
 8102d8c:	fb01 f303 	mul.w	r3, r1, r3
 8102d90:	4413      	add	r3, r2
 8102d92:	3344      	adds	r3, #68	; 0x44
 8102d94:	697a      	ldr	r2, [r7, #20]
 8102d96:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8102d98:	78fb      	ldrb	r3, [r7, #3]
 8102d9a:	8b3a      	ldrh	r2, [r7, #24]
 8102d9c:	6879      	ldr	r1, [r7, #4]
 8102d9e:	202c      	movs	r0, #44	; 0x2c
 8102da0:	fb00 f303 	mul.w	r3, r0, r3
 8102da4:	440b      	add	r3, r1
 8102da6:	334c      	adds	r3, #76	; 0x4c
 8102da8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8102daa:	78fb      	ldrb	r3, [r7, #3]
 8102dac:	687a      	ldr	r2, [r7, #4]
 8102dae:	212c      	movs	r1, #44	; 0x2c
 8102db0:	fb01 f303 	mul.w	r3, r1, r3
 8102db4:	4413      	add	r3, r2
 8102db6:	3360      	adds	r3, #96	; 0x60
 8102db8:	2200      	movs	r2, #0
 8102dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8102dbc:	78fb      	ldrb	r3, [r7, #3]
 8102dbe:	687a      	ldr	r2, [r7, #4]
 8102dc0:	212c      	movs	r1, #44	; 0x2c
 8102dc2:	fb01 f303 	mul.w	r3, r1, r3
 8102dc6:	4413      	add	r3, r2
 8102dc8:	3350      	adds	r3, #80	; 0x50
 8102dca:	2200      	movs	r2, #0
 8102dcc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8102dce:	78fb      	ldrb	r3, [r7, #3]
 8102dd0:	687a      	ldr	r2, [r7, #4]
 8102dd2:	212c      	movs	r1, #44	; 0x2c
 8102dd4:	fb01 f303 	mul.w	r3, r1, r3
 8102dd8:	4413      	add	r3, r2
 8102dda:	3339      	adds	r3, #57	; 0x39
 8102ddc:	78fa      	ldrb	r2, [r7, #3]
 8102dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8102de0:	78fb      	ldrb	r3, [r7, #3]
 8102de2:	687a      	ldr	r2, [r7, #4]
 8102de4:	212c      	movs	r1, #44	; 0x2c
 8102de6:	fb01 f303 	mul.w	r3, r1, r3
 8102dea:	4413      	add	r3, r2
 8102dec:	3361      	adds	r3, #97	; 0x61
 8102dee:	2200      	movs	r2, #0
 8102df0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	6818      	ldr	r0, [r3, #0]
 8102df6:	78fb      	ldrb	r3, [r7, #3]
 8102df8:	222c      	movs	r2, #44	; 0x2c
 8102dfa:	fb02 f303 	mul.w	r3, r2, r3
 8102dfe:	3338      	adds	r3, #56	; 0x38
 8102e00:	687a      	ldr	r2, [r7, #4]
 8102e02:	18d1      	adds	r1, r2, r3
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	691b      	ldr	r3, [r3, #16]
 8102e08:	b2db      	uxtb	r3, r3
 8102e0a:	461a      	mov	r2, r3
 8102e0c:	f008 f946 	bl	810b09c <USB_HC_StartXfer>
 8102e10:	4603      	mov	r3, r0
}
 8102e12:	4618      	mov	r0, r3
 8102e14:	3708      	adds	r7, #8
 8102e16:	46bd      	mov	sp, r7
 8102e18:	bd80      	pop	{r7, pc}
 8102e1a:	bf00      	nop

08102e1c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8102e1c:	b580      	push	{r7, lr}
 8102e1e:	b086      	sub	sp, #24
 8102e20:	af00      	add	r7, sp, #0
 8102e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	681b      	ldr	r3, [r3, #0]
 8102e28:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8102e2a:	693b      	ldr	r3, [r7, #16]
 8102e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8102e2e:	687b      	ldr	r3, [r7, #4]
 8102e30:	681b      	ldr	r3, [r3, #0]
 8102e32:	4618      	mov	r0, r3
 8102e34:	f007 fe8f 	bl	810ab56 <USB_GetMode>
 8102e38:	4603      	mov	r3, r0
 8102e3a:	2b01      	cmp	r3, #1
 8102e3c:	f040 80ef 	bne.w	810301e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	681b      	ldr	r3, [r3, #0]
 8102e44:	4618      	mov	r0, r3
 8102e46:	f007 fe73 	bl	810ab30 <USB_ReadInterrupts>
 8102e4a:	4603      	mov	r3, r0
 8102e4c:	2b00      	cmp	r3, #0
 8102e4e:	f000 80e5 	beq.w	810301c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	4618      	mov	r0, r3
 8102e58:	f007 fe6a 	bl	810ab30 <USB_ReadInterrupts>
 8102e5c:	4603      	mov	r3, r0
 8102e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102e66:	d104      	bne.n	8102e72 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	681b      	ldr	r3, [r3, #0]
 8102e6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8102e70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	681b      	ldr	r3, [r3, #0]
 8102e76:	4618      	mov	r0, r3
 8102e78:	f007 fe5a 	bl	810ab30 <USB_ReadInterrupts>
 8102e7c:	4603      	mov	r3, r0
 8102e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102e86:	d104      	bne.n	8102e92 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8102e90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	4618      	mov	r0, r3
 8102e98:	f007 fe4a 	bl	810ab30 <USB_ReadInterrupts>
 8102e9c:	4603      	mov	r3, r0
 8102e9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8102ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102ea6:	d104      	bne.n	8102eb2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102eb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	4618      	mov	r0, r3
 8102eb8:	f007 fe3a 	bl	810ab30 <USB_ReadInterrupts>
 8102ebc:	4603      	mov	r3, r0
 8102ebe:	f003 0302 	and.w	r3, r3, #2
 8102ec2:	2b02      	cmp	r3, #2
 8102ec4:	d103      	bne.n	8102ece <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	2202      	movs	r2, #2
 8102ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	4618      	mov	r0, r3
 8102ed4:	f007 fe2c 	bl	810ab30 <USB_ReadInterrupts>
 8102ed8:	4603      	mov	r3, r0
 8102eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ee2:	d115      	bne.n	8102f10 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8102eec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8102eee:	68fb      	ldr	r3, [r7, #12]
 8102ef0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	f003 0301 	and.w	r3, r3, #1
 8102efa:	2b00      	cmp	r3, #0
 8102efc:	d108      	bne.n	8102f10 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8102efe:	6878      	ldr	r0, [r7, #4]
 8102f00:	f00a f8a8 	bl	810d054 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	2101      	movs	r1, #1
 8102f0a:	4618      	mov	r0, r3
 8102f0c:	f007 ff1c 	bl	810ad48 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	681b      	ldr	r3, [r3, #0]
 8102f14:	4618      	mov	r0, r3
 8102f16:	f007 fe0b 	bl	810ab30 <USB_ReadInterrupts>
 8102f1a:	4603      	mov	r3, r0
 8102f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f24:	d102      	bne.n	8102f2c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8102f26:	6878      	ldr	r0, [r7, #4]
 8102f28:	f001 f9e3 	bl	81042f2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	4618      	mov	r0, r3
 8102f32:	f007 fdfd 	bl	810ab30 <USB_ReadInterrupts>
 8102f36:	4603      	mov	r3, r0
 8102f38:	f003 0308 	and.w	r3, r3, #8
 8102f3c:	2b08      	cmp	r3, #8
 8102f3e:	d106      	bne.n	8102f4e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8102f40:	6878      	ldr	r0, [r7, #4]
 8102f42:	f00a f86b 	bl	810d01c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	2208      	movs	r2, #8
 8102f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4618      	mov	r0, r3
 8102f54:	f007 fdec 	bl	810ab30 <USB_ReadInterrupts>
 8102f58:	4603      	mov	r3, r0
 8102f5a:	f003 0310 	and.w	r3, r3, #16
 8102f5e:	2b10      	cmp	r3, #16
 8102f60:	d101      	bne.n	8102f66 <HAL_HCD_IRQHandler+0x14a>
 8102f62:	2301      	movs	r3, #1
 8102f64:	e000      	b.n	8102f68 <HAL_HCD_IRQHandler+0x14c>
 8102f66:	2300      	movs	r3, #0
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d012      	beq.n	8102f92 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	699a      	ldr	r2, [r3, #24]
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	f022 0210 	bic.w	r2, r2, #16
 8102f7a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8102f7c:	6878      	ldr	r0, [r7, #4]
 8102f7e:	f001 f8e6 	bl	810414e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	681b      	ldr	r3, [r3, #0]
 8102f86:	699a      	ldr	r2, [r3, #24]
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	f042 0210 	orr.w	r2, r2, #16
 8102f90:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	4618      	mov	r0, r3
 8102f98:	f007 fdca 	bl	810ab30 <USB_ReadInterrupts>
 8102f9c:	4603      	mov	r3, r0
 8102f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102fa6:	d13a      	bne.n	810301e <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8102fa8:	687b      	ldr	r3, [r7, #4]
 8102faa:	681b      	ldr	r3, [r3, #0]
 8102fac:	4618      	mov	r0, r3
 8102fae:	f008 f9b7 	bl	810b320 <USB_HC_ReadInterrupt>
 8102fb2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8102fb4:	2300      	movs	r3, #0
 8102fb6:	617b      	str	r3, [r7, #20]
 8102fb8:	e025      	b.n	8103006 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8102fba:	697b      	ldr	r3, [r7, #20]
 8102fbc:	f003 030f 	and.w	r3, r3, #15
 8102fc0:	68ba      	ldr	r2, [r7, #8]
 8102fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8102fc6:	f003 0301 	and.w	r3, r3, #1
 8102fca:	2b00      	cmp	r3, #0
 8102fcc:	d018      	beq.n	8103000 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8102fce:	697b      	ldr	r3, [r7, #20]
 8102fd0:	015a      	lsls	r2, r3, #5
 8102fd2:	68fb      	ldr	r3, [r7, #12]
 8102fd4:	4413      	add	r3, r2
 8102fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102fe4:	d106      	bne.n	8102ff4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8102fe6:	697b      	ldr	r3, [r7, #20]
 8102fe8:	b2db      	uxtb	r3, r3
 8102fea:	4619      	mov	r1, r3
 8102fec:	6878      	ldr	r0, [r7, #4]
 8102fee:	f000 f88f 	bl	8103110 <HCD_HC_IN_IRQHandler>
 8102ff2:	e005      	b.n	8103000 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8102ff4:	697b      	ldr	r3, [r7, #20]
 8102ff6:	b2db      	uxtb	r3, r3
 8102ff8:	4619      	mov	r1, r3
 8102ffa:	6878      	ldr	r0, [r7, #4]
 8102ffc:	f000 fcaa 	bl	8103954 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8103000:	697b      	ldr	r3, [r7, #20]
 8103002:	3301      	adds	r3, #1
 8103004:	617b      	str	r3, [r7, #20]
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	689b      	ldr	r3, [r3, #8]
 810300a:	697a      	ldr	r2, [r7, #20]
 810300c:	429a      	cmp	r2, r3
 810300e:	d3d4      	bcc.n	8102fba <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	681b      	ldr	r3, [r3, #0]
 8103014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8103018:	615a      	str	r2, [r3, #20]
 810301a:	e000      	b.n	810301e <HAL_HCD_IRQHandler+0x202>
      return;
 810301c:	bf00      	nop
    }
  }
}
 810301e:	3718      	adds	r7, #24
 8103020:	46bd      	mov	sp, r7
 8103022:	bd80      	pop	{r7, pc}

08103024 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8103024:	b580      	push	{r7, lr}
 8103026:	b082      	sub	sp, #8
 8103028:	af00      	add	r7, sp, #0
 810302a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8103032:	2b01      	cmp	r3, #1
 8103034:	d101      	bne.n	810303a <HAL_HCD_Start+0x16>
 8103036:	2302      	movs	r3, #2
 8103038:	e013      	b.n	8103062 <HAL_HCD_Start+0x3e>
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	2201      	movs	r2, #1
 810303e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	681b      	ldr	r3, [r3, #0]
 8103046:	4618      	mov	r0, r3
 8103048:	f007 fc48 	bl	810a8dc <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	2101      	movs	r1, #1
 8103052:	4618      	mov	r0, r3
 8103054:	f007 feb2 	bl	810adbc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	2200      	movs	r2, #0
 810305c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8103060:	2300      	movs	r3, #0
}
 8103062:	4618      	mov	r0, r3
 8103064:	3708      	adds	r7, #8
 8103066:	46bd      	mov	sp, r7
 8103068:	bd80      	pop	{r7, pc}

0810306a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 810306a:	b580      	push	{r7, lr}
 810306c:	b082      	sub	sp, #8
 810306e:	af00      	add	r7, sp, #0
 8103070:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8103072:	687b      	ldr	r3, [r7, #4]
 8103074:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8103078:	2b01      	cmp	r3, #1
 810307a:	d101      	bne.n	8103080 <HAL_HCD_Stop+0x16>
 810307c:	2302      	movs	r3, #2
 810307e:	e00d      	b.n	810309c <HAL_HCD_Stop+0x32>
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	2201      	movs	r2, #1
 8103084:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8103088:	687b      	ldr	r3, [r7, #4]
 810308a:	681b      	ldr	r3, [r3, #0]
 810308c:	4618      	mov	r0, r3
 810308e:	f008 fab1 	bl	810b5f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	2200      	movs	r2, #0
 8103096:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 810309a:	2300      	movs	r3, #0
}
 810309c:	4618      	mov	r0, r3
 810309e:	3708      	adds	r7, #8
 81030a0:	46bd      	mov	sp, r7
 81030a2:	bd80      	pop	{r7, pc}

081030a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 81030a4:	b480      	push	{r7}
 81030a6:	b083      	sub	sp, #12
 81030a8:	af00      	add	r7, sp, #0
 81030aa:	6078      	str	r0, [r7, #4]
 81030ac:	460b      	mov	r3, r1
 81030ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 81030b0:	78fb      	ldrb	r3, [r7, #3]
 81030b2:	687a      	ldr	r2, [r7, #4]
 81030b4:	212c      	movs	r1, #44	; 0x2c
 81030b6:	fb01 f303 	mul.w	r3, r1, r3
 81030ba:	4413      	add	r3, r2
 81030bc:	3360      	adds	r3, #96	; 0x60
 81030be:	781b      	ldrb	r3, [r3, #0]
}
 81030c0:	4618      	mov	r0, r3
 81030c2:	370c      	adds	r7, #12
 81030c4:	46bd      	mov	sp, r7
 81030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ca:	4770      	bx	lr

081030cc <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 81030cc:	b480      	push	{r7}
 81030ce:	b083      	sub	sp, #12
 81030d0:	af00      	add	r7, sp, #0
 81030d2:	6078      	str	r0, [r7, #4]
 81030d4:	460b      	mov	r3, r1
 81030d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 81030d8:	78fb      	ldrb	r3, [r7, #3]
 81030da:	687a      	ldr	r2, [r7, #4]
 81030dc:	212c      	movs	r1, #44	; 0x2c
 81030de:	fb01 f303 	mul.w	r3, r1, r3
 81030e2:	4413      	add	r3, r2
 81030e4:	3350      	adds	r3, #80	; 0x50
 81030e6:	681b      	ldr	r3, [r3, #0]
}
 81030e8:	4618      	mov	r0, r3
 81030ea:	370c      	adds	r7, #12
 81030ec:	46bd      	mov	sp, r7
 81030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030f2:	4770      	bx	lr

081030f4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 81030f4:	b580      	push	{r7, lr}
 81030f6:	b082      	sub	sp, #8
 81030f8:	af00      	add	r7, sp, #0
 81030fa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	4618      	mov	r0, r3
 8103102:	f007 feab 	bl	810ae5c <USB_GetCurrentFrame>
 8103106:	4603      	mov	r3, r0
}
 8103108:	4618      	mov	r0, r3
 810310a:	3708      	adds	r7, #8
 810310c:	46bd      	mov	sp, r7
 810310e:	bd80      	pop	{r7, pc}

08103110 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8103110:	b580      	push	{r7, lr}
 8103112:	b086      	sub	sp, #24
 8103114:	af00      	add	r7, sp, #0
 8103116:	6078      	str	r0, [r7, #4]
 8103118:	460b      	mov	r3, r1
 810311a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8103122:	697b      	ldr	r3, [r7, #20]
 8103124:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8103126:	78fb      	ldrb	r3, [r7, #3]
 8103128:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 810312a:	68fb      	ldr	r3, [r7, #12]
 810312c:	015a      	lsls	r2, r3, #5
 810312e:	693b      	ldr	r3, [r7, #16]
 8103130:	4413      	add	r3, r2
 8103132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103136:	689b      	ldr	r3, [r3, #8]
 8103138:	f003 0304 	and.w	r3, r3, #4
 810313c:	2b04      	cmp	r3, #4
 810313e:	d119      	bne.n	8103174 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8103140:	68fb      	ldr	r3, [r7, #12]
 8103142:	015a      	lsls	r2, r3, #5
 8103144:	693b      	ldr	r3, [r7, #16]
 8103146:	4413      	add	r3, r2
 8103148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810314c:	461a      	mov	r2, r3
 810314e:	2304      	movs	r3, #4
 8103150:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103152:	68fb      	ldr	r3, [r7, #12]
 8103154:	015a      	lsls	r2, r3, #5
 8103156:	693b      	ldr	r3, [r7, #16]
 8103158:	4413      	add	r3, r2
 810315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810315e:	68db      	ldr	r3, [r3, #12]
 8103160:	68fa      	ldr	r2, [r7, #12]
 8103162:	0151      	lsls	r1, r2, #5
 8103164:	693a      	ldr	r2, [r7, #16]
 8103166:	440a      	add	r2, r1
 8103168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810316c:	f043 0302 	orr.w	r3, r3, #2
 8103170:	60d3      	str	r3, [r2, #12]
 8103172:	e101      	b.n	8103378 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8103174:	68fb      	ldr	r3, [r7, #12]
 8103176:	015a      	lsls	r2, r3, #5
 8103178:	693b      	ldr	r3, [r7, #16]
 810317a:	4413      	add	r3, r2
 810317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103180:	689b      	ldr	r3, [r3, #8]
 8103182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810318a:	d12b      	bne.n	81031e4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 810318c:	68fb      	ldr	r3, [r7, #12]
 810318e:	015a      	lsls	r2, r3, #5
 8103190:	693b      	ldr	r3, [r7, #16]
 8103192:	4413      	add	r3, r2
 8103194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103198:	461a      	mov	r2, r3
 810319a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810319e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 81031a0:	687a      	ldr	r2, [r7, #4]
 81031a2:	68fb      	ldr	r3, [r7, #12]
 81031a4:	212c      	movs	r1, #44	; 0x2c
 81031a6:	fb01 f303 	mul.w	r3, r1, r3
 81031aa:	4413      	add	r3, r2
 81031ac:	3361      	adds	r3, #97	; 0x61
 81031ae:	2207      	movs	r2, #7
 81031b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 81031b2:	68fb      	ldr	r3, [r7, #12]
 81031b4:	015a      	lsls	r2, r3, #5
 81031b6:	693b      	ldr	r3, [r7, #16]
 81031b8:	4413      	add	r3, r2
 81031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81031be:	68db      	ldr	r3, [r3, #12]
 81031c0:	68fa      	ldr	r2, [r7, #12]
 81031c2:	0151      	lsls	r1, r2, #5
 81031c4:	693a      	ldr	r2, [r7, #16]
 81031c6:	440a      	add	r2, r1
 81031c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 81031cc:	f043 0302 	orr.w	r3, r3, #2
 81031d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	68fa      	ldr	r2, [r7, #12]
 81031d8:	b2d2      	uxtb	r2, r2
 81031da:	4611      	mov	r1, r2
 81031dc:	4618      	mov	r0, r3
 81031de:	f008 f8b0 	bl	810b342 <USB_HC_Halt>
 81031e2:	e0c9      	b.n	8103378 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 81031e4:	68fb      	ldr	r3, [r7, #12]
 81031e6:	015a      	lsls	r2, r3, #5
 81031e8:	693b      	ldr	r3, [r7, #16]
 81031ea:	4413      	add	r3, r2
 81031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81031f0:	689b      	ldr	r3, [r3, #8]
 81031f2:	f003 0320 	and.w	r3, r3, #32
 81031f6:	2b20      	cmp	r3, #32
 81031f8:	d109      	bne.n	810320e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 81031fa:	68fb      	ldr	r3, [r7, #12]
 81031fc:	015a      	lsls	r2, r3, #5
 81031fe:	693b      	ldr	r3, [r7, #16]
 8103200:	4413      	add	r3, r2
 8103202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103206:	461a      	mov	r2, r3
 8103208:	2320      	movs	r3, #32
 810320a:	6093      	str	r3, [r2, #8]
 810320c:	e0b4      	b.n	8103378 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 810320e:	68fb      	ldr	r3, [r7, #12]
 8103210:	015a      	lsls	r2, r3, #5
 8103212:	693b      	ldr	r3, [r7, #16]
 8103214:	4413      	add	r3, r2
 8103216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810321a:	689b      	ldr	r3, [r3, #8]
 810321c:	f003 0308 	and.w	r3, r3, #8
 8103220:	2b08      	cmp	r3, #8
 8103222:	d133      	bne.n	810328c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103224:	68fb      	ldr	r3, [r7, #12]
 8103226:	015a      	lsls	r2, r3, #5
 8103228:	693b      	ldr	r3, [r7, #16]
 810322a:	4413      	add	r3, r2
 810322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103230:	68db      	ldr	r3, [r3, #12]
 8103232:	68fa      	ldr	r2, [r7, #12]
 8103234:	0151      	lsls	r1, r2, #5
 8103236:	693a      	ldr	r2, [r7, #16]
 8103238:	440a      	add	r2, r1
 810323a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810323e:	f043 0302 	orr.w	r3, r3, #2
 8103242:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8103244:	687a      	ldr	r2, [r7, #4]
 8103246:	68fb      	ldr	r3, [r7, #12]
 8103248:	212c      	movs	r1, #44	; 0x2c
 810324a:	fb01 f303 	mul.w	r3, r1, r3
 810324e:	4413      	add	r3, r2
 8103250:	3361      	adds	r3, #97	; 0x61
 8103252:	2205      	movs	r2, #5
 8103254:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8103256:	68fb      	ldr	r3, [r7, #12]
 8103258:	015a      	lsls	r2, r3, #5
 810325a:	693b      	ldr	r3, [r7, #16]
 810325c:	4413      	add	r3, r2
 810325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103262:	461a      	mov	r2, r3
 8103264:	2310      	movs	r3, #16
 8103266:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8103268:	68fb      	ldr	r3, [r7, #12]
 810326a:	015a      	lsls	r2, r3, #5
 810326c:	693b      	ldr	r3, [r7, #16]
 810326e:	4413      	add	r3, r2
 8103270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103274:	461a      	mov	r2, r3
 8103276:	2308      	movs	r3, #8
 8103278:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	681b      	ldr	r3, [r3, #0]
 810327e:	68fa      	ldr	r2, [r7, #12]
 8103280:	b2d2      	uxtb	r2, r2
 8103282:	4611      	mov	r1, r2
 8103284:	4618      	mov	r0, r3
 8103286:	f008 f85c 	bl	810b342 <USB_HC_Halt>
 810328a:	e075      	b.n	8103378 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	015a      	lsls	r2, r3, #5
 8103290:	693b      	ldr	r3, [r7, #16]
 8103292:	4413      	add	r3, r2
 8103294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103298:	689b      	ldr	r3, [r3, #8]
 810329a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810329e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81032a2:	d134      	bne.n	810330e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 81032a4:	68fb      	ldr	r3, [r7, #12]
 81032a6:	015a      	lsls	r2, r3, #5
 81032a8:	693b      	ldr	r3, [r7, #16]
 81032aa:	4413      	add	r3, r2
 81032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81032b0:	68db      	ldr	r3, [r3, #12]
 81032b2:	68fa      	ldr	r2, [r7, #12]
 81032b4:	0151      	lsls	r1, r2, #5
 81032b6:	693a      	ldr	r2, [r7, #16]
 81032b8:	440a      	add	r2, r1
 81032ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 81032be:	f043 0302 	orr.w	r3, r3, #2
 81032c2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 81032c4:	687a      	ldr	r2, [r7, #4]
 81032c6:	68fb      	ldr	r3, [r7, #12]
 81032c8:	212c      	movs	r1, #44	; 0x2c
 81032ca:	fb01 f303 	mul.w	r3, r1, r3
 81032ce:	4413      	add	r3, r2
 81032d0:	3361      	adds	r3, #97	; 0x61
 81032d2:	2208      	movs	r2, #8
 81032d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 81032d6:	68fb      	ldr	r3, [r7, #12]
 81032d8:	015a      	lsls	r2, r3, #5
 81032da:	693b      	ldr	r3, [r7, #16]
 81032dc:	4413      	add	r3, r2
 81032de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81032e2:	461a      	mov	r2, r3
 81032e4:	2310      	movs	r3, #16
 81032e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	015a      	lsls	r2, r3, #5
 81032ec:	693b      	ldr	r3, [r7, #16]
 81032ee:	4413      	add	r3, r2
 81032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81032f4:	461a      	mov	r2, r3
 81032f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81032fa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	681b      	ldr	r3, [r3, #0]
 8103300:	68fa      	ldr	r2, [r7, #12]
 8103302:	b2d2      	uxtb	r2, r2
 8103304:	4611      	mov	r1, r2
 8103306:	4618      	mov	r0, r3
 8103308:	f008 f81b 	bl	810b342 <USB_HC_Halt>
 810330c:	e034      	b.n	8103378 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 810330e:	68fb      	ldr	r3, [r7, #12]
 8103310:	015a      	lsls	r2, r3, #5
 8103312:	693b      	ldr	r3, [r7, #16]
 8103314:	4413      	add	r3, r2
 8103316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810331a:	689b      	ldr	r3, [r3, #8]
 810331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103320:	2b80      	cmp	r3, #128	; 0x80
 8103322:	d129      	bne.n	8103378 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103324:	68fb      	ldr	r3, [r7, #12]
 8103326:	015a      	lsls	r2, r3, #5
 8103328:	693b      	ldr	r3, [r7, #16]
 810332a:	4413      	add	r3, r2
 810332c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103330:	68db      	ldr	r3, [r3, #12]
 8103332:	68fa      	ldr	r2, [r7, #12]
 8103334:	0151      	lsls	r1, r2, #5
 8103336:	693a      	ldr	r2, [r7, #16]
 8103338:	440a      	add	r2, r1
 810333a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810333e:	f043 0302 	orr.w	r3, r3, #2
 8103342:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8103344:	687a      	ldr	r2, [r7, #4]
 8103346:	68fb      	ldr	r3, [r7, #12]
 8103348:	212c      	movs	r1, #44	; 0x2c
 810334a:	fb01 f303 	mul.w	r3, r1, r3
 810334e:	4413      	add	r3, r2
 8103350:	3361      	adds	r3, #97	; 0x61
 8103352:	2206      	movs	r2, #6
 8103354:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	68fa      	ldr	r2, [r7, #12]
 810335c:	b2d2      	uxtb	r2, r2
 810335e:	4611      	mov	r1, r2
 8103360:	4618      	mov	r0, r3
 8103362:	f007 ffee 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8103366:	68fb      	ldr	r3, [r7, #12]
 8103368:	015a      	lsls	r2, r3, #5
 810336a:	693b      	ldr	r3, [r7, #16]
 810336c:	4413      	add	r3, r2
 810336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103372:	461a      	mov	r2, r3
 8103374:	2380      	movs	r3, #128	; 0x80
 8103376:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8103378:	68fb      	ldr	r3, [r7, #12]
 810337a:	015a      	lsls	r2, r3, #5
 810337c:	693b      	ldr	r3, [r7, #16]
 810337e:	4413      	add	r3, r2
 8103380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103384:	689b      	ldr	r3, [r3, #8]
 8103386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810338a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810338e:	d122      	bne.n	81033d6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	015a      	lsls	r2, r3, #5
 8103394:	693b      	ldr	r3, [r7, #16]
 8103396:	4413      	add	r3, r2
 8103398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810339c:	68db      	ldr	r3, [r3, #12]
 810339e:	68fa      	ldr	r2, [r7, #12]
 81033a0:	0151      	lsls	r1, r2, #5
 81033a2:	693a      	ldr	r2, [r7, #16]
 81033a4:	440a      	add	r2, r1
 81033a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 81033aa:	f043 0302 	orr.w	r3, r3, #2
 81033ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	68fa      	ldr	r2, [r7, #12]
 81033b6:	b2d2      	uxtb	r2, r2
 81033b8:	4611      	mov	r1, r2
 81033ba:	4618      	mov	r0, r3
 81033bc:	f007 ffc1 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 81033c0:	68fb      	ldr	r3, [r7, #12]
 81033c2:	015a      	lsls	r2, r3, #5
 81033c4:	693b      	ldr	r3, [r7, #16]
 81033c6:	4413      	add	r3, r2
 81033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81033cc:	461a      	mov	r2, r3
 81033ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 81033d2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 81033d4:	e2ba      	b.n	810394c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 81033d6:	68fb      	ldr	r3, [r7, #12]
 81033d8:	015a      	lsls	r2, r3, #5
 81033da:	693b      	ldr	r3, [r7, #16]
 81033dc:	4413      	add	r3, r2
 81033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81033e2:	689b      	ldr	r3, [r3, #8]
 81033e4:	f003 0301 	and.w	r3, r3, #1
 81033e8:	2b01      	cmp	r3, #1
 81033ea:	f040 811b 	bne.w	8103624 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 81033ee:	687b      	ldr	r3, [r7, #4]
 81033f0:	691b      	ldr	r3, [r3, #16]
 81033f2:	2b00      	cmp	r3, #0
 81033f4:	d019      	beq.n	810342a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 81033f6:	687a      	ldr	r2, [r7, #4]
 81033f8:	68fb      	ldr	r3, [r7, #12]
 81033fa:	212c      	movs	r1, #44	; 0x2c
 81033fc:	fb01 f303 	mul.w	r3, r1, r3
 8103400:	4413      	add	r3, r2
 8103402:	3348      	adds	r3, #72	; 0x48
 8103404:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8103406:	68fb      	ldr	r3, [r7, #12]
 8103408:	0159      	lsls	r1, r3, #5
 810340a:	693b      	ldr	r3, [r7, #16]
 810340c:	440b      	add	r3, r1
 810340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103412:	691b      	ldr	r3, [r3, #16]
 8103414:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8103418:	1ad2      	subs	r2, r2, r3
 810341a:	6879      	ldr	r1, [r7, #4]
 810341c:	68fb      	ldr	r3, [r7, #12]
 810341e:	202c      	movs	r0, #44	; 0x2c
 8103420:	fb00 f303 	mul.w	r3, r0, r3
 8103424:	440b      	add	r3, r1
 8103426:	3350      	adds	r3, #80	; 0x50
 8103428:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 810342a:	687a      	ldr	r2, [r7, #4]
 810342c:	68fb      	ldr	r3, [r7, #12]
 810342e:	212c      	movs	r1, #44	; 0x2c
 8103430:	fb01 f303 	mul.w	r3, r1, r3
 8103434:	4413      	add	r3, r2
 8103436:	3361      	adds	r3, #97	; 0x61
 8103438:	2201      	movs	r2, #1
 810343a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 810343c:	687a      	ldr	r2, [r7, #4]
 810343e:	68fb      	ldr	r3, [r7, #12]
 8103440:	212c      	movs	r1, #44	; 0x2c
 8103442:	fb01 f303 	mul.w	r3, r1, r3
 8103446:	4413      	add	r3, r2
 8103448:	335c      	adds	r3, #92	; 0x5c
 810344a:	2200      	movs	r2, #0
 810344c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 810344e:	68fb      	ldr	r3, [r7, #12]
 8103450:	015a      	lsls	r2, r3, #5
 8103452:	693b      	ldr	r3, [r7, #16]
 8103454:	4413      	add	r3, r2
 8103456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810345a:	461a      	mov	r2, r3
 810345c:	2301      	movs	r3, #1
 810345e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8103460:	687a      	ldr	r2, [r7, #4]
 8103462:	68fb      	ldr	r3, [r7, #12]
 8103464:	212c      	movs	r1, #44	; 0x2c
 8103466:	fb01 f303 	mul.w	r3, r1, r3
 810346a:	4413      	add	r3, r2
 810346c:	333f      	adds	r3, #63	; 0x3f
 810346e:	781b      	ldrb	r3, [r3, #0]
 8103470:	2b00      	cmp	r3, #0
 8103472:	d009      	beq.n	8103488 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8103474:	687a      	ldr	r2, [r7, #4]
 8103476:	68fb      	ldr	r3, [r7, #12]
 8103478:	212c      	movs	r1, #44	; 0x2c
 810347a:	fb01 f303 	mul.w	r3, r1, r3
 810347e:	4413      	add	r3, r2
 8103480:	333f      	adds	r3, #63	; 0x3f
 8103482:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8103484:	2b02      	cmp	r3, #2
 8103486:	d121      	bne.n	81034cc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103488:	68fb      	ldr	r3, [r7, #12]
 810348a:	015a      	lsls	r2, r3, #5
 810348c:	693b      	ldr	r3, [r7, #16]
 810348e:	4413      	add	r3, r2
 8103490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103494:	68db      	ldr	r3, [r3, #12]
 8103496:	68fa      	ldr	r2, [r7, #12]
 8103498:	0151      	lsls	r1, r2, #5
 810349a:	693a      	ldr	r2, [r7, #16]
 810349c:	440a      	add	r2, r1
 810349e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 81034a2:	f043 0302 	orr.w	r3, r3, #2
 81034a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 81034a8:	687b      	ldr	r3, [r7, #4]
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	68fa      	ldr	r2, [r7, #12]
 81034ae:	b2d2      	uxtb	r2, r2
 81034b0:	4611      	mov	r1, r2
 81034b2:	4618      	mov	r0, r3
 81034b4:	f007 ff45 	bl	810b342 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 81034b8:	68fb      	ldr	r3, [r7, #12]
 81034ba:	015a      	lsls	r2, r3, #5
 81034bc:	693b      	ldr	r3, [r7, #16]
 81034be:	4413      	add	r3, r2
 81034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81034c4:	461a      	mov	r2, r3
 81034c6:	2310      	movs	r3, #16
 81034c8:	6093      	str	r3, [r2, #8]
 81034ca:	e066      	b.n	810359a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 81034cc:	687a      	ldr	r2, [r7, #4]
 81034ce:	68fb      	ldr	r3, [r7, #12]
 81034d0:	212c      	movs	r1, #44	; 0x2c
 81034d2:	fb01 f303 	mul.w	r3, r1, r3
 81034d6:	4413      	add	r3, r2
 81034d8:	333f      	adds	r3, #63	; 0x3f
 81034da:	781b      	ldrb	r3, [r3, #0]
 81034dc:	2b03      	cmp	r3, #3
 81034de:	d127      	bne.n	8103530 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 81034e0:	68fb      	ldr	r3, [r7, #12]
 81034e2:	015a      	lsls	r2, r3, #5
 81034e4:	693b      	ldr	r3, [r7, #16]
 81034e6:	4413      	add	r3, r2
 81034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	68fa      	ldr	r2, [r7, #12]
 81034f0:	0151      	lsls	r1, r2, #5
 81034f2:	693a      	ldr	r2, [r7, #16]
 81034f4:	440a      	add	r2, r1
 81034f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 81034fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 81034fe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8103500:	687a      	ldr	r2, [r7, #4]
 8103502:	68fb      	ldr	r3, [r7, #12]
 8103504:	212c      	movs	r1, #44	; 0x2c
 8103506:	fb01 f303 	mul.w	r3, r1, r3
 810350a:	4413      	add	r3, r2
 810350c:	3360      	adds	r3, #96	; 0x60
 810350e:	2201      	movs	r2, #1
 8103510:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8103512:	68fb      	ldr	r3, [r7, #12]
 8103514:	b2d9      	uxtb	r1, r3
 8103516:	687a      	ldr	r2, [r7, #4]
 8103518:	68fb      	ldr	r3, [r7, #12]
 810351a:	202c      	movs	r0, #44	; 0x2c
 810351c:	fb00 f303 	mul.w	r3, r0, r3
 8103520:	4413      	add	r3, r2
 8103522:	3360      	adds	r3, #96	; 0x60
 8103524:	781b      	ldrb	r3, [r3, #0]
 8103526:	461a      	mov	r2, r3
 8103528:	6878      	ldr	r0, [r7, #4]
 810352a:	f009 fda1 	bl	810d070 <HAL_HCD_HC_NotifyURBChange_Callback>
 810352e:	e034      	b.n	810359a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8103530:	687a      	ldr	r2, [r7, #4]
 8103532:	68fb      	ldr	r3, [r7, #12]
 8103534:	212c      	movs	r1, #44	; 0x2c
 8103536:	fb01 f303 	mul.w	r3, r1, r3
 810353a:	4413      	add	r3, r2
 810353c:	333f      	adds	r3, #63	; 0x3f
 810353e:	781b      	ldrb	r3, [r3, #0]
 8103540:	2b01      	cmp	r3, #1
 8103542:	d12a      	bne.n	810359a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8103544:	687a      	ldr	r2, [r7, #4]
 8103546:	68fb      	ldr	r3, [r7, #12]
 8103548:	212c      	movs	r1, #44	; 0x2c
 810354a:	fb01 f303 	mul.w	r3, r1, r3
 810354e:	4413      	add	r3, r2
 8103550:	3360      	adds	r3, #96	; 0x60
 8103552:	2201      	movs	r2, #1
 8103554:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8103556:	687a      	ldr	r2, [r7, #4]
 8103558:	68fb      	ldr	r3, [r7, #12]
 810355a:	212c      	movs	r1, #44	; 0x2c
 810355c:	fb01 f303 	mul.w	r3, r1, r3
 8103560:	4413      	add	r3, r2
 8103562:	3354      	adds	r3, #84	; 0x54
 8103564:	781b      	ldrb	r3, [r3, #0]
 8103566:	f083 0301 	eor.w	r3, r3, #1
 810356a:	b2d8      	uxtb	r0, r3
 810356c:	687a      	ldr	r2, [r7, #4]
 810356e:	68fb      	ldr	r3, [r7, #12]
 8103570:	212c      	movs	r1, #44	; 0x2c
 8103572:	fb01 f303 	mul.w	r3, r1, r3
 8103576:	4413      	add	r3, r2
 8103578:	3354      	adds	r3, #84	; 0x54
 810357a:	4602      	mov	r2, r0
 810357c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 810357e:	68fb      	ldr	r3, [r7, #12]
 8103580:	b2d9      	uxtb	r1, r3
 8103582:	687a      	ldr	r2, [r7, #4]
 8103584:	68fb      	ldr	r3, [r7, #12]
 8103586:	202c      	movs	r0, #44	; 0x2c
 8103588:	fb00 f303 	mul.w	r3, r0, r3
 810358c:	4413      	add	r3, r2
 810358e:	3360      	adds	r3, #96	; 0x60
 8103590:	781b      	ldrb	r3, [r3, #0]
 8103592:	461a      	mov	r2, r3
 8103594:	6878      	ldr	r0, [r7, #4]
 8103596:	f009 fd6b 	bl	810d070 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	691b      	ldr	r3, [r3, #16]
 810359e:	2b01      	cmp	r3, #1
 81035a0:	d12b      	bne.n	81035fa <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 81035a2:	687a      	ldr	r2, [r7, #4]
 81035a4:	68fb      	ldr	r3, [r7, #12]
 81035a6:	212c      	movs	r1, #44	; 0x2c
 81035a8:	fb01 f303 	mul.w	r3, r1, r3
 81035ac:	4413      	add	r3, r2
 81035ae:	3348      	adds	r3, #72	; 0x48
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	6879      	ldr	r1, [r7, #4]
 81035b4:	68fa      	ldr	r2, [r7, #12]
 81035b6:	202c      	movs	r0, #44	; 0x2c
 81035b8:	fb00 f202 	mul.w	r2, r0, r2
 81035bc:	440a      	add	r2, r1
 81035be:	3240      	adds	r2, #64	; 0x40
 81035c0:	8812      	ldrh	r2, [r2, #0]
 81035c2:	fbb3 f3f2 	udiv	r3, r3, r2
 81035c6:	f003 0301 	and.w	r3, r3, #1
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	f000 81be 	beq.w	810394c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 81035d0:	687a      	ldr	r2, [r7, #4]
 81035d2:	68fb      	ldr	r3, [r7, #12]
 81035d4:	212c      	movs	r1, #44	; 0x2c
 81035d6:	fb01 f303 	mul.w	r3, r1, r3
 81035da:	4413      	add	r3, r2
 81035dc:	3354      	adds	r3, #84	; 0x54
 81035de:	781b      	ldrb	r3, [r3, #0]
 81035e0:	f083 0301 	eor.w	r3, r3, #1
 81035e4:	b2d8      	uxtb	r0, r3
 81035e6:	687a      	ldr	r2, [r7, #4]
 81035e8:	68fb      	ldr	r3, [r7, #12]
 81035ea:	212c      	movs	r1, #44	; 0x2c
 81035ec:	fb01 f303 	mul.w	r3, r1, r3
 81035f0:	4413      	add	r3, r2
 81035f2:	3354      	adds	r3, #84	; 0x54
 81035f4:	4602      	mov	r2, r0
 81035f6:	701a      	strb	r2, [r3, #0]
}
 81035f8:	e1a8      	b.n	810394c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 81035fa:	687a      	ldr	r2, [r7, #4]
 81035fc:	68fb      	ldr	r3, [r7, #12]
 81035fe:	212c      	movs	r1, #44	; 0x2c
 8103600:	fb01 f303 	mul.w	r3, r1, r3
 8103604:	4413      	add	r3, r2
 8103606:	3354      	adds	r3, #84	; 0x54
 8103608:	781b      	ldrb	r3, [r3, #0]
 810360a:	f083 0301 	eor.w	r3, r3, #1
 810360e:	b2d8      	uxtb	r0, r3
 8103610:	687a      	ldr	r2, [r7, #4]
 8103612:	68fb      	ldr	r3, [r7, #12]
 8103614:	212c      	movs	r1, #44	; 0x2c
 8103616:	fb01 f303 	mul.w	r3, r1, r3
 810361a:	4413      	add	r3, r2
 810361c:	3354      	adds	r3, #84	; 0x54
 810361e:	4602      	mov	r2, r0
 8103620:	701a      	strb	r2, [r3, #0]
}
 8103622:	e193      	b.n	810394c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8103624:	68fb      	ldr	r3, [r7, #12]
 8103626:	015a      	lsls	r2, r3, #5
 8103628:	693b      	ldr	r3, [r7, #16]
 810362a:	4413      	add	r3, r2
 810362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103630:	689b      	ldr	r3, [r3, #8]
 8103632:	f003 0302 	and.w	r3, r3, #2
 8103636:	2b02      	cmp	r3, #2
 8103638:	f040 8106 	bne.w	8103848 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 810363c:	68fb      	ldr	r3, [r7, #12]
 810363e:	015a      	lsls	r2, r3, #5
 8103640:	693b      	ldr	r3, [r7, #16]
 8103642:	4413      	add	r3, r2
 8103644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103648:	68db      	ldr	r3, [r3, #12]
 810364a:	68fa      	ldr	r2, [r7, #12]
 810364c:	0151      	lsls	r1, r2, #5
 810364e:	693a      	ldr	r2, [r7, #16]
 8103650:	440a      	add	r2, r1
 8103652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103656:	f023 0302 	bic.w	r3, r3, #2
 810365a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 810365c:	687a      	ldr	r2, [r7, #4]
 810365e:	68fb      	ldr	r3, [r7, #12]
 8103660:	212c      	movs	r1, #44	; 0x2c
 8103662:	fb01 f303 	mul.w	r3, r1, r3
 8103666:	4413      	add	r3, r2
 8103668:	3361      	adds	r3, #97	; 0x61
 810366a:	781b      	ldrb	r3, [r3, #0]
 810366c:	2b01      	cmp	r3, #1
 810366e:	d109      	bne.n	8103684 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8103670:	687a      	ldr	r2, [r7, #4]
 8103672:	68fb      	ldr	r3, [r7, #12]
 8103674:	212c      	movs	r1, #44	; 0x2c
 8103676:	fb01 f303 	mul.w	r3, r1, r3
 810367a:	4413      	add	r3, r2
 810367c:	3360      	adds	r3, #96	; 0x60
 810367e:	2201      	movs	r2, #1
 8103680:	701a      	strb	r2, [r3, #0]
 8103682:	e0c9      	b.n	8103818 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8103684:	687a      	ldr	r2, [r7, #4]
 8103686:	68fb      	ldr	r3, [r7, #12]
 8103688:	212c      	movs	r1, #44	; 0x2c
 810368a:	fb01 f303 	mul.w	r3, r1, r3
 810368e:	4413      	add	r3, r2
 8103690:	3361      	adds	r3, #97	; 0x61
 8103692:	781b      	ldrb	r3, [r3, #0]
 8103694:	2b05      	cmp	r3, #5
 8103696:	d109      	bne.n	81036ac <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8103698:	687a      	ldr	r2, [r7, #4]
 810369a:	68fb      	ldr	r3, [r7, #12]
 810369c:	212c      	movs	r1, #44	; 0x2c
 810369e:	fb01 f303 	mul.w	r3, r1, r3
 81036a2:	4413      	add	r3, r2
 81036a4:	3360      	adds	r3, #96	; 0x60
 81036a6:	2205      	movs	r2, #5
 81036a8:	701a      	strb	r2, [r3, #0]
 81036aa:	e0b5      	b.n	8103818 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 81036ac:	687a      	ldr	r2, [r7, #4]
 81036ae:	68fb      	ldr	r3, [r7, #12]
 81036b0:	212c      	movs	r1, #44	; 0x2c
 81036b2:	fb01 f303 	mul.w	r3, r1, r3
 81036b6:	4413      	add	r3, r2
 81036b8:	3361      	adds	r3, #97	; 0x61
 81036ba:	781b      	ldrb	r3, [r3, #0]
 81036bc:	2b06      	cmp	r3, #6
 81036be:	d009      	beq.n	81036d4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 81036c0:	687a      	ldr	r2, [r7, #4]
 81036c2:	68fb      	ldr	r3, [r7, #12]
 81036c4:	212c      	movs	r1, #44	; 0x2c
 81036c6:	fb01 f303 	mul.w	r3, r1, r3
 81036ca:	4413      	add	r3, r2
 81036cc:	3361      	adds	r3, #97	; 0x61
 81036ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 81036d0:	2b08      	cmp	r3, #8
 81036d2:	d150      	bne.n	8103776 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 81036d4:	687a      	ldr	r2, [r7, #4]
 81036d6:	68fb      	ldr	r3, [r7, #12]
 81036d8:	212c      	movs	r1, #44	; 0x2c
 81036da:	fb01 f303 	mul.w	r3, r1, r3
 81036de:	4413      	add	r3, r2
 81036e0:	335c      	adds	r3, #92	; 0x5c
 81036e2:	681b      	ldr	r3, [r3, #0]
 81036e4:	1c5a      	adds	r2, r3, #1
 81036e6:	6879      	ldr	r1, [r7, #4]
 81036e8:	68fb      	ldr	r3, [r7, #12]
 81036ea:	202c      	movs	r0, #44	; 0x2c
 81036ec:	fb00 f303 	mul.w	r3, r0, r3
 81036f0:	440b      	add	r3, r1
 81036f2:	335c      	adds	r3, #92	; 0x5c
 81036f4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 81036f6:	687a      	ldr	r2, [r7, #4]
 81036f8:	68fb      	ldr	r3, [r7, #12]
 81036fa:	212c      	movs	r1, #44	; 0x2c
 81036fc:	fb01 f303 	mul.w	r3, r1, r3
 8103700:	4413      	add	r3, r2
 8103702:	335c      	adds	r3, #92	; 0x5c
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	2b02      	cmp	r3, #2
 8103708:	d912      	bls.n	8103730 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 810370a:	687a      	ldr	r2, [r7, #4]
 810370c:	68fb      	ldr	r3, [r7, #12]
 810370e:	212c      	movs	r1, #44	; 0x2c
 8103710:	fb01 f303 	mul.w	r3, r1, r3
 8103714:	4413      	add	r3, r2
 8103716:	335c      	adds	r3, #92	; 0x5c
 8103718:	2200      	movs	r2, #0
 810371a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 810371c:	687a      	ldr	r2, [r7, #4]
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	212c      	movs	r1, #44	; 0x2c
 8103722:	fb01 f303 	mul.w	r3, r1, r3
 8103726:	4413      	add	r3, r2
 8103728:	3360      	adds	r3, #96	; 0x60
 810372a:	2204      	movs	r2, #4
 810372c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 810372e:	e073      	b.n	8103818 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8103730:	687a      	ldr	r2, [r7, #4]
 8103732:	68fb      	ldr	r3, [r7, #12]
 8103734:	212c      	movs	r1, #44	; 0x2c
 8103736:	fb01 f303 	mul.w	r3, r1, r3
 810373a:	4413      	add	r3, r2
 810373c:	3360      	adds	r3, #96	; 0x60
 810373e:	2202      	movs	r2, #2
 8103740:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8103742:	68fb      	ldr	r3, [r7, #12]
 8103744:	015a      	lsls	r2, r3, #5
 8103746:	693b      	ldr	r3, [r7, #16]
 8103748:	4413      	add	r3, r2
 810374a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8103752:	68bb      	ldr	r3, [r7, #8]
 8103754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8103758:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 810375a:	68bb      	ldr	r3, [r7, #8]
 810375c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8103760:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8103762:	68fb      	ldr	r3, [r7, #12]
 8103764:	015a      	lsls	r2, r3, #5
 8103766:	693b      	ldr	r3, [r7, #16]
 8103768:	4413      	add	r3, r2
 810376a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810376e:	461a      	mov	r2, r3
 8103770:	68bb      	ldr	r3, [r7, #8]
 8103772:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8103774:	e050      	b.n	8103818 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8103776:	687a      	ldr	r2, [r7, #4]
 8103778:	68fb      	ldr	r3, [r7, #12]
 810377a:	212c      	movs	r1, #44	; 0x2c
 810377c:	fb01 f303 	mul.w	r3, r1, r3
 8103780:	4413      	add	r3, r2
 8103782:	3361      	adds	r3, #97	; 0x61
 8103784:	781b      	ldrb	r3, [r3, #0]
 8103786:	2b03      	cmp	r3, #3
 8103788:	d122      	bne.n	81037d0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 810378a:	687a      	ldr	r2, [r7, #4]
 810378c:	68fb      	ldr	r3, [r7, #12]
 810378e:	212c      	movs	r1, #44	; 0x2c
 8103790:	fb01 f303 	mul.w	r3, r1, r3
 8103794:	4413      	add	r3, r2
 8103796:	3360      	adds	r3, #96	; 0x60
 8103798:	2202      	movs	r2, #2
 810379a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 810379c:	68fb      	ldr	r3, [r7, #12]
 810379e:	015a      	lsls	r2, r3, #5
 81037a0:	693b      	ldr	r3, [r7, #16]
 81037a2:	4413      	add	r3, r2
 81037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 81037ac:	68bb      	ldr	r3, [r7, #8]
 81037ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 81037b2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 81037b4:	68bb      	ldr	r3, [r7, #8]
 81037b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81037ba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 81037bc:	68fb      	ldr	r3, [r7, #12]
 81037be:	015a      	lsls	r2, r3, #5
 81037c0:	693b      	ldr	r3, [r7, #16]
 81037c2:	4413      	add	r3, r2
 81037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81037c8:	461a      	mov	r2, r3
 81037ca:	68bb      	ldr	r3, [r7, #8]
 81037cc:	6013      	str	r3, [r2, #0]
 81037ce:	e023      	b.n	8103818 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 81037d0:	687a      	ldr	r2, [r7, #4]
 81037d2:	68fb      	ldr	r3, [r7, #12]
 81037d4:	212c      	movs	r1, #44	; 0x2c
 81037d6:	fb01 f303 	mul.w	r3, r1, r3
 81037da:	4413      	add	r3, r2
 81037dc:	3361      	adds	r3, #97	; 0x61
 81037de:	781b      	ldrb	r3, [r3, #0]
 81037e0:	2b07      	cmp	r3, #7
 81037e2:	d119      	bne.n	8103818 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 81037e4:	687a      	ldr	r2, [r7, #4]
 81037e6:	68fb      	ldr	r3, [r7, #12]
 81037e8:	212c      	movs	r1, #44	; 0x2c
 81037ea:	fb01 f303 	mul.w	r3, r1, r3
 81037ee:	4413      	add	r3, r2
 81037f0:	335c      	adds	r3, #92	; 0x5c
 81037f2:	681b      	ldr	r3, [r3, #0]
 81037f4:	1c5a      	adds	r2, r3, #1
 81037f6:	6879      	ldr	r1, [r7, #4]
 81037f8:	68fb      	ldr	r3, [r7, #12]
 81037fa:	202c      	movs	r0, #44	; 0x2c
 81037fc:	fb00 f303 	mul.w	r3, r0, r3
 8103800:	440b      	add	r3, r1
 8103802:	335c      	adds	r3, #92	; 0x5c
 8103804:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8103806:	687a      	ldr	r2, [r7, #4]
 8103808:	68fb      	ldr	r3, [r7, #12]
 810380a:	212c      	movs	r1, #44	; 0x2c
 810380c:	fb01 f303 	mul.w	r3, r1, r3
 8103810:	4413      	add	r3, r2
 8103812:	3360      	adds	r3, #96	; 0x60
 8103814:	2204      	movs	r2, #4
 8103816:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8103818:	68fb      	ldr	r3, [r7, #12]
 810381a:	015a      	lsls	r2, r3, #5
 810381c:	693b      	ldr	r3, [r7, #16]
 810381e:	4413      	add	r3, r2
 8103820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103824:	461a      	mov	r2, r3
 8103826:	2302      	movs	r3, #2
 8103828:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 810382a:	68fb      	ldr	r3, [r7, #12]
 810382c:	b2d9      	uxtb	r1, r3
 810382e:	687a      	ldr	r2, [r7, #4]
 8103830:	68fb      	ldr	r3, [r7, #12]
 8103832:	202c      	movs	r0, #44	; 0x2c
 8103834:	fb00 f303 	mul.w	r3, r0, r3
 8103838:	4413      	add	r3, r2
 810383a:	3360      	adds	r3, #96	; 0x60
 810383c:	781b      	ldrb	r3, [r3, #0]
 810383e:	461a      	mov	r2, r3
 8103840:	6878      	ldr	r0, [r7, #4]
 8103842:	f009 fc15 	bl	810d070 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8103846:	e081      	b.n	810394c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8103848:	68fb      	ldr	r3, [r7, #12]
 810384a:	015a      	lsls	r2, r3, #5
 810384c:	693b      	ldr	r3, [r7, #16]
 810384e:	4413      	add	r3, r2
 8103850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103854:	689b      	ldr	r3, [r3, #8]
 8103856:	f003 0310 	and.w	r3, r3, #16
 810385a:	2b10      	cmp	r3, #16
 810385c:	d176      	bne.n	810394c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 810385e:	687a      	ldr	r2, [r7, #4]
 8103860:	68fb      	ldr	r3, [r7, #12]
 8103862:	212c      	movs	r1, #44	; 0x2c
 8103864:	fb01 f303 	mul.w	r3, r1, r3
 8103868:	4413      	add	r3, r2
 810386a:	333f      	adds	r3, #63	; 0x3f
 810386c:	781b      	ldrb	r3, [r3, #0]
 810386e:	2b03      	cmp	r3, #3
 8103870:	d121      	bne.n	81038b6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8103872:	687a      	ldr	r2, [r7, #4]
 8103874:	68fb      	ldr	r3, [r7, #12]
 8103876:	212c      	movs	r1, #44	; 0x2c
 8103878:	fb01 f303 	mul.w	r3, r1, r3
 810387c:	4413      	add	r3, r2
 810387e:	335c      	adds	r3, #92	; 0x5c
 8103880:	2200      	movs	r2, #0
 8103882:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103884:	68fb      	ldr	r3, [r7, #12]
 8103886:	015a      	lsls	r2, r3, #5
 8103888:	693b      	ldr	r3, [r7, #16]
 810388a:	4413      	add	r3, r2
 810388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103890:	68db      	ldr	r3, [r3, #12]
 8103892:	68fa      	ldr	r2, [r7, #12]
 8103894:	0151      	lsls	r1, r2, #5
 8103896:	693a      	ldr	r2, [r7, #16]
 8103898:	440a      	add	r2, r1
 810389a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810389e:	f043 0302 	orr.w	r3, r3, #2
 81038a2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	68fa      	ldr	r2, [r7, #12]
 81038aa:	b2d2      	uxtb	r2, r2
 81038ac:	4611      	mov	r1, r2
 81038ae:	4618      	mov	r0, r3
 81038b0:	f007 fd47 	bl	810b342 <USB_HC_Halt>
 81038b4:	e041      	b.n	810393a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 81038b6:	687a      	ldr	r2, [r7, #4]
 81038b8:	68fb      	ldr	r3, [r7, #12]
 81038ba:	212c      	movs	r1, #44	; 0x2c
 81038bc:	fb01 f303 	mul.w	r3, r1, r3
 81038c0:	4413      	add	r3, r2
 81038c2:	333f      	adds	r3, #63	; 0x3f
 81038c4:	781b      	ldrb	r3, [r3, #0]
 81038c6:	2b00      	cmp	r3, #0
 81038c8:	d009      	beq.n	81038de <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 81038ca:	687a      	ldr	r2, [r7, #4]
 81038cc:	68fb      	ldr	r3, [r7, #12]
 81038ce:	212c      	movs	r1, #44	; 0x2c
 81038d0:	fb01 f303 	mul.w	r3, r1, r3
 81038d4:	4413      	add	r3, r2
 81038d6:	333f      	adds	r3, #63	; 0x3f
 81038d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 81038da:	2b02      	cmp	r3, #2
 81038dc:	d12d      	bne.n	810393a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 81038de:	687a      	ldr	r2, [r7, #4]
 81038e0:	68fb      	ldr	r3, [r7, #12]
 81038e2:	212c      	movs	r1, #44	; 0x2c
 81038e4:	fb01 f303 	mul.w	r3, r1, r3
 81038e8:	4413      	add	r3, r2
 81038ea:	335c      	adds	r3, #92	; 0x5c
 81038ec:	2200      	movs	r2, #0
 81038ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	691b      	ldr	r3, [r3, #16]
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d120      	bne.n	810393a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 81038f8:	687a      	ldr	r2, [r7, #4]
 81038fa:	68fb      	ldr	r3, [r7, #12]
 81038fc:	212c      	movs	r1, #44	; 0x2c
 81038fe:	fb01 f303 	mul.w	r3, r1, r3
 8103902:	4413      	add	r3, r2
 8103904:	3361      	adds	r3, #97	; 0x61
 8103906:	2203      	movs	r2, #3
 8103908:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 810390a:	68fb      	ldr	r3, [r7, #12]
 810390c:	015a      	lsls	r2, r3, #5
 810390e:	693b      	ldr	r3, [r7, #16]
 8103910:	4413      	add	r3, r2
 8103912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103916:	68db      	ldr	r3, [r3, #12]
 8103918:	68fa      	ldr	r2, [r7, #12]
 810391a:	0151      	lsls	r1, r2, #5
 810391c:	693a      	ldr	r2, [r7, #16]
 810391e:	440a      	add	r2, r1
 8103920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103924:	f043 0302 	orr.w	r3, r3, #2
 8103928:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	681b      	ldr	r3, [r3, #0]
 810392e:	68fa      	ldr	r2, [r7, #12]
 8103930:	b2d2      	uxtb	r2, r2
 8103932:	4611      	mov	r1, r2
 8103934:	4618      	mov	r0, r3
 8103936:	f007 fd04 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 810393a:	68fb      	ldr	r3, [r7, #12]
 810393c:	015a      	lsls	r2, r3, #5
 810393e:	693b      	ldr	r3, [r7, #16]
 8103940:	4413      	add	r3, r2
 8103942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103946:	461a      	mov	r2, r3
 8103948:	2310      	movs	r3, #16
 810394a:	6093      	str	r3, [r2, #8]
}
 810394c:	bf00      	nop
 810394e:	3718      	adds	r7, #24
 8103950:	46bd      	mov	sp, r7
 8103952:	bd80      	pop	{r7, pc}

08103954 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8103954:	b580      	push	{r7, lr}
 8103956:	b088      	sub	sp, #32
 8103958:	af00      	add	r7, sp, #0
 810395a:	6078      	str	r0, [r7, #4]
 810395c:	460b      	mov	r3, r1
 810395e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	681b      	ldr	r3, [r3, #0]
 8103964:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8103966:	69fb      	ldr	r3, [r7, #28]
 8103968:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 810396a:	78fb      	ldrb	r3, [r7, #3]
 810396c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 810396e:	697b      	ldr	r3, [r7, #20]
 8103970:	015a      	lsls	r2, r3, #5
 8103972:	69bb      	ldr	r3, [r7, #24]
 8103974:	4413      	add	r3, r2
 8103976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810397a:	689b      	ldr	r3, [r3, #8]
 810397c:	f003 0304 	and.w	r3, r3, #4
 8103980:	2b04      	cmp	r3, #4
 8103982:	d119      	bne.n	81039b8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8103984:	697b      	ldr	r3, [r7, #20]
 8103986:	015a      	lsls	r2, r3, #5
 8103988:	69bb      	ldr	r3, [r7, #24]
 810398a:	4413      	add	r3, r2
 810398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103990:	461a      	mov	r2, r3
 8103992:	2304      	movs	r3, #4
 8103994:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103996:	697b      	ldr	r3, [r7, #20]
 8103998:	015a      	lsls	r2, r3, #5
 810399a:	69bb      	ldr	r3, [r7, #24]
 810399c:	4413      	add	r3, r2
 810399e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81039a2:	68db      	ldr	r3, [r3, #12]
 81039a4:	697a      	ldr	r2, [r7, #20]
 81039a6:	0151      	lsls	r1, r2, #5
 81039a8:	69ba      	ldr	r2, [r7, #24]
 81039aa:	440a      	add	r2, r1
 81039ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 81039b0:	f043 0302 	orr.w	r3, r3, #2
 81039b4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 81039b6:	e3c6      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 81039b8:	697b      	ldr	r3, [r7, #20]
 81039ba:	015a      	lsls	r2, r3, #5
 81039bc:	69bb      	ldr	r3, [r7, #24]
 81039be:	4413      	add	r3, r2
 81039c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81039c4:	689b      	ldr	r3, [r3, #8]
 81039c6:	f003 0320 	and.w	r3, r3, #32
 81039ca:	2b20      	cmp	r3, #32
 81039cc:	d13e      	bne.n	8103a4c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 81039ce:	697b      	ldr	r3, [r7, #20]
 81039d0:	015a      	lsls	r2, r3, #5
 81039d2:	69bb      	ldr	r3, [r7, #24]
 81039d4:	4413      	add	r3, r2
 81039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81039da:	461a      	mov	r2, r3
 81039dc:	2320      	movs	r3, #32
 81039de:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 81039e0:	687a      	ldr	r2, [r7, #4]
 81039e2:	697b      	ldr	r3, [r7, #20]
 81039e4:	212c      	movs	r1, #44	; 0x2c
 81039e6:	fb01 f303 	mul.w	r3, r1, r3
 81039ea:	4413      	add	r3, r2
 81039ec:	333d      	adds	r3, #61	; 0x3d
 81039ee:	781b      	ldrb	r3, [r3, #0]
 81039f0:	2b01      	cmp	r3, #1
 81039f2:	f040 83a8 	bne.w	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 81039f6:	687a      	ldr	r2, [r7, #4]
 81039f8:	697b      	ldr	r3, [r7, #20]
 81039fa:	212c      	movs	r1, #44	; 0x2c
 81039fc:	fb01 f303 	mul.w	r3, r1, r3
 8103a00:	4413      	add	r3, r2
 8103a02:	333d      	adds	r3, #61	; 0x3d
 8103a04:	2200      	movs	r2, #0
 8103a06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8103a08:	687a      	ldr	r2, [r7, #4]
 8103a0a:	697b      	ldr	r3, [r7, #20]
 8103a0c:	212c      	movs	r1, #44	; 0x2c
 8103a0e:	fb01 f303 	mul.w	r3, r1, r3
 8103a12:	4413      	add	r3, r2
 8103a14:	3360      	adds	r3, #96	; 0x60
 8103a16:	2202      	movs	r2, #2
 8103a18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103a1a:	697b      	ldr	r3, [r7, #20]
 8103a1c:	015a      	lsls	r2, r3, #5
 8103a1e:	69bb      	ldr	r3, [r7, #24]
 8103a20:	4413      	add	r3, r2
 8103a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103a26:	68db      	ldr	r3, [r3, #12]
 8103a28:	697a      	ldr	r2, [r7, #20]
 8103a2a:	0151      	lsls	r1, r2, #5
 8103a2c:	69ba      	ldr	r2, [r7, #24]
 8103a2e:	440a      	add	r2, r1
 8103a30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103a34:	f043 0302 	orr.w	r3, r3, #2
 8103a38:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	697a      	ldr	r2, [r7, #20]
 8103a40:	b2d2      	uxtb	r2, r2
 8103a42:	4611      	mov	r1, r2
 8103a44:	4618      	mov	r0, r3
 8103a46:	f007 fc7c 	bl	810b342 <USB_HC_Halt>
}
 8103a4a:	e37c      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8103a4c:	697b      	ldr	r3, [r7, #20]
 8103a4e:	015a      	lsls	r2, r3, #5
 8103a50:	69bb      	ldr	r3, [r7, #24]
 8103a52:	4413      	add	r3, r2
 8103a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103a58:	689b      	ldr	r3, [r3, #8]
 8103a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a62:	d122      	bne.n	8103aaa <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103a64:	697b      	ldr	r3, [r7, #20]
 8103a66:	015a      	lsls	r2, r3, #5
 8103a68:	69bb      	ldr	r3, [r7, #24]
 8103a6a:	4413      	add	r3, r2
 8103a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103a70:	68db      	ldr	r3, [r3, #12]
 8103a72:	697a      	ldr	r2, [r7, #20]
 8103a74:	0151      	lsls	r1, r2, #5
 8103a76:	69ba      	ldr	r2, [r7, #24]
 8103a78:	440a      	add	r2, r1
 8103a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103a7e:	f043 0302 	orr.w	r3, r3, #2
 8103a82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	697a      	ldr	r2, [r7, #20]
 8103a8a:	b2d2      	uxtb	r2, r2
 8103a8c:	4611      	mov	r1, r2
 8103a8e:	4618      	mov	r0, r3
 8103a90:	f007 fc57 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8103a94:	697b      	ldr	r3, [r7, #20]
 8103a96:	015a      	lsls	r2, r3, #5
 8103a98:	69bb      	ldr	r3, [r7, #24]
 8103a9a:	4413      	add	r3, r2
 8103a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103aa0:	461a      	mov	r2, r3
 8103aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8103aa6:	6093      	str	r3, [r2, #8]
}
 8103aa8:	e34d      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8103aaa:	697b      	ldr	r3, [r7, #20]
 8103aac:	015a      	lsls	r2, r3, #5
 8103aae:	69bb      	ldr	r3, [r7, #24]
 8103ab0:	4413      	add	r3, r2
 8103ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103ab6:	689b      	ldr	r3, [r3, #8]
 8103ab8:	f003 0301 	and.w	r3, r3, #1
 8103abc:	2b01      	cmp	r3, #1
 8103abe:	d150      	bne.n	8103b62 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8103ac0:	687a      	ldr	r2, [r7, #4]
 8103ac2:	697b      	ldr	r3, [r7, #20]
 8103ac4:	212c      	movs	r1, #44	; 0x2c
 8103ac6:	fb01 f303 	mul.w	r3, r1, r3
 8103aca:	4413      	add	r3, r2
 8103acc:	335c      	adds	r3, #92	; 0x5c
 8103ace:	2200      	movs	r2, #0
 8103ad0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8103ad2:	697b      	ldr	r3, [r7, #20]
 8103ad4:	015a      	lsls	r2, r3, #5
 8103ad6:	69bb      	ldr	r3, [r7, #24]
 8103ad8:	4413      	add	r3, r2
 8103ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103ade:	689b      	ldr	r3, [r3, #8]
 8103ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103ae4:	2b40      	cmp	r3, #64	; 0x40
 8103ae6:	d111      	bne.n	8103b0c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8103ae8:	687a      	ldr	r2, [r7, #4]
 8103aea:	697b      	ldr	r3, [r7, #20]
 8103aec:	212c      	movs	r1, #44	; 0x2c
 8103aee:	fb01 f303 	mul.w	r3, r1, r3
 8103af2:	4413      	add	r3, r2
 8103af4:	333d      	adds	r3, #61	; 0x3d
 8103af6:	2201      	movs	r2, #1
 8103af8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8103afa:	697b      	ldr	r3, [r7, #20]
 8103afc:	015a      	lsls	r2, r3, #5
 8103afe:	69bb      	ldr	r3, [r7, #24]
 8103b00:	4413      	add	r3, r2
 8103b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103b06:	461a      	mov	r2, r3
 8103b08:	2340      	movs	r3, #64	; 0x40
 8103b0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103b0c:	697b      	ldr	r3, [r7, #20]
 8103b0e:	015a      	lsls	r2, r3, #5
 8103b10:	69bb      	ldr	r3, [r7, #24]
 8103b12:	4413      	add	r3, r2
 8103b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103b18:	68db      	ldr	r3, [r3, #12]
 8103b1a:	697a      	ldr	r2, [r7, #20]
 8103b1c:	0151      	lsls	r1, r2, #5
 8103b1e:	69ba      	ldr	r2, [r7, #24]
 8103b20:	440a      	add	r2, r1
 8103b22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103b26:	f043 0302 	orr.w	r3, r3, #2
 8103b2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	697a      	ldr	r2, [r7, #20]
 8103b32:	b2d2      	uxtb	r2, r2
 8103b34:	4611      	mov	r1, r2
 8103b36:	4618      	mov	r0, r3
 8103b38:	f007 fc03 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8103b3c:	697b      	ldr	r3, [r7, #20]
 8103b3e:	015a      	lsls	r2, r3, #5
 8103b40:	69bb      	ldr	r3, [r7, #24]
 8103b42:	4413      	add	r3, r2
 8103b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103b48:	461a      	mov	r2, r3
 8103b4a:	2301      	movs	r3, #1
 8103b4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8103b4e:	687a      	ldr	r2, [r7, #4]
 8103b50:	697b      	ldr	r3, [r7, #20]
 8103b52:	212c      	movs	r1, #44	; 0x2c
 8103b54:	fb01 f303 	mul.w	r3, r1, r3
 8103b58:	4413      	add	r3, r2
 8103b5a:	3361      	adds	r3, #97	; 0x61
 8103b5c:	2201      	movs	r2, #1
 8103b5e:	701a      	strb	r2, [r3, #0]
}
 8103b60:	e2f1      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8103b62:	697b      	ldr	r3, [r7, #20]
 8103b64:	015a      	lsls	r2, r3, #5
 8103b66:	69bb      	ldr	r3, [r7, #24]
 8103b68:	4413      	add	r3, r2
 8103b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103b6e:	689b      	ldr	r3, [r3, #8]
 8103b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103b74:	2b40      	cmp	r3, #64	; 0x40
 8103b76:	d13c      	bne.n	8103bf2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8103b78:	687a      	ldr	r2, [r7, #4]
 8103b7a:	697b      	ldr	r3, [r7, #20]
 8103b7c:	212c      	movs	r1, #44	; 0x2c
 8103b7e:	fb01 f303 	mul.w	r3, r1, r3
 8103b82:	4413      	add	r3, r2
 8103b84:	3361      	adds	r3, #97	; 0x61
 8103b86:	2204      	movs	r2, #4
 8103b88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8103b8a:	687a      	ldr	r2, [r7, #4]
 8103b8c:	697b      	ldr	r3, [r7, #20]
 8103b8e:	212c      	movs	r1, #44	; 0x2c
 8103b90:	fb01 f303 	mul.w	r3, r1, r3
 8103b94:	4413      	add	r3, r2
 8103b96:	333d      	adds	r3, #61	; 0x3d
 8103b98:	2201      	movs	r2, #1
 8103b9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8103b9c:	687a      	ldr	r2, [r7, #4]
 8103b9e:	697b      	ldr	r3, [r7, #20]
 8103ba0:	212c      	movs	r1, #44	; 0x2c
 8103ba2:	fb01 f303 	mul.w	r3, r1, r3
 8103ba6:	4413      	add	r3, r2
 8103ba8:	335c      	adds	r3, #92	; 0x5c
 8103baa:	2200      	movs	r2, #0
 8103bac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103bae:	697b      	ldr	r3, [r7, #20]
 8103bb0:	015a      	lsls	r2, r3, #5
 8103bb2:	69bb      	ldr	r3, [r7, #24]
 8103bb4:	4413      	add	r3, r2
 8103bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103bba:	68db      	ldr	r3, [r3, #12]
 8103bbc:	697a      	ldr	r2, [r7, #20]
 8103bbe:	0151      	lsls	r1, r2, #5
 8103bc0:	69ba      	ldr	r2, [r7, #24]
 8103bc2:	440a      	add	r2, r1
 8103bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103bc8:	f043 0302 	orr.w	r3, r3, #2
 8103bcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	681b      	ldr	r3, [r3, #0]
 8103bd2:	697a      	ldr	r2, [r7, #20]
 8103bd4:	b2d2      	uxtb	r2, r2
 8103bd6:	4611      	mov	r1, r2
 8103bd8:	4618      	mov	r0, r3
 8103bda:	f007 fbb2 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8103bde:	697b      	ldr	r3, [r7, #20]
 8103be0:	015a      	lsls	r2, r3, #5
 8103be2:	69bb      	ldr	r3, [r7, #24]
 8103be4:	4413      	add	r3, r2
 8103be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103bea:	461a      	mov	r2, r3
 8103bec:	2340      	movs	r3, #64	; 0x40
 8103bee:	6093      	str	r3, [r2, #8]
}
 8103bf0:	e2a9      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8103bf2:	697b      	ldr	r3, [r7, #20]
 8103bf4:	015a      	lsls	r2, r3, #5
 8103bf6:	69bb      	ldr	r3, [r7, #24]
 8103bf8:	4413      	add	r3, r2
 8103bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103bfe:	689b      	ldr	r3, [r3, #8]
 8103c00:	f003 0308 	and.w	r3, r3, #8
 8103c04:	2b08      	cmp	r3, #8
 8103c06:	d12a      	bne.n	8103c5e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8103c08:	697b      	ldr	r3, [r7, #20]
 8103c0a:	015a      	lsls	r2, r3, #5
 8103c0c:	69bb      	ldr	r3, [r7, #24]
 8103c0e:	4413      	add	r3, r2
 8103c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103c14:	461a      	mov	r2, r3
 8103c16:	2308      	movs	r3, #8
 8103c18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103c1a:	697b      	ldr	r3, [r7, #20]
 8103c1c:	015a      	lsls	r2, r3, #5
 8103c1e:	69bb      	ldr	r3, [r7, #24]
 8103c20:	4413      	add	r3, r2
 8103c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103c26:	68db      	ldr	r3, [r3, #12]
 8103c28:	697a      	ldr	r2, [r7, #20]
 8103c2a:	0151      	lsls	r1, r2, #5
 8103c2c:	69ba      	ldr	r2, [r7, #24]
 8103c2e:	440a      	add	r2, r1
 8103c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103c34:	f043 0302 	orr.w	r3, r3, #2
 8103c38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	697a      	ldr	r2, [r7, #20]
 8103c40:	b2d2      	uxtb	r2, r2
 8103c42:	4611      	mov	r1, r2
 8103c44:	4618      	mov	r0, r3
 8103c46:	f007 fb7c 	bl	810b342 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8103c4a:	687a      	ldr	r2, [r7, #4]
 8103c4c:	697b      	ldr	r3, [r7, #20]
 8103c4e:	212c      	movs	r1, #44	; 0x2c
 8103c50:	fb01 f303 	mul.w	r3, r1, r3
 8103c54:	4413      	add	r3, r2
 8103c56:	3361      	adds	r3, #97	; 0x61
 8103c58:	2205      	movs	r2, #5
 8103c5a:	701a      	strb	r2, [r3, #0]
}
 8103c5c:	e273      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8103c5e:	697b      	ldr	r3, [r7, #20]
 8103c60:	015a      	lsls	r2, r3, #5
 8103c62:	69bb      	ldr	r3, [r7, #24]
 8103c64:	4413      	add	r3, r2
 8103c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103c6a:	689b      	ldr	r3, [r3, #8]
 8103c6c:	f003 0310 	and.w	r3, r3, #16
 8103c70:	2b10      	cmp	r3, #16
 8103c72:	d150      	bne.n	8103d16 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8103c74:	687a      	ldr	r2, [r7, #4]
 8103c76:	697b      	ldr	r3, [r7, #20]
 8103c78:	212c      	movs	r1, #44	; 0x2c
 8103c7a:	fb01 f303 	mul.w	r3, r1, r3
 8103c7e:	4413      	add	r3, r2
 8103c80:	335c      	adds	r3, #92	; 0x5c
 8103c82:	2200      	movs	r2, #0
 8103c84:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8103c86:	687a      	ldr	r2, [r7, #4]
 8103c88:	697b      	ldr	r3, [r7, #20]
 8103c8a:	212c      	movs	r1, #44	; 0x2c
 8103c8c:	fb01 f303 	mul.w	r3, r1, r3
 8103c90:	4413      	add	r3, r2
 8103c92:	3361      	adds	r3, #97	; 0x61
 8103c94:	2203      	movs	r2, #3
 8103c96:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8103c98:	687a      	ldr	r2, [r7, #4]
 8103c9a:	697b      	ldr	r3, [r7, #20]
 8103c9c:	212c      	movs	r1, #44	; 0x2c
 8103c9e:	fb01 f303 	mul.w	r3, r1, r3
 8103ca2:	4413      	add	r3, r2
 8103ca4:	333d      	adds	r3, #61	; 0x3d
 8103ca6:	781b      	ldrb	r3, [r3, #0]
 8103ca8:	2b00      	cmp	r3, #0
 8103caa:	d112      	bne.n	8103cd2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8103cac:	687a      	ldr	r2, [r7, #4]
 8103cae:	697b      	ldr	r3, [r7, #20]
 8103cb0:	212c      	movs	r1, #44	; 0x2c
 8103cb2:	fb01 f303 	mul.w	r3, r1, r3
 8103cb6:	4413      	add	r3, r2
 8103cb8:	333c      	adds	r3, #60	; 0x3c
 8103cba:	781b      	ldrb	r3, [r3, #0]
 8103cbc:	2b00      	cmp	r3, #0
 8103cbe:	d108      	bne.n	8103cd2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8103cc0:	687a      	ldr	r2, [r7, #4]
 8103cc2:	697b      	ldr	r3, [r7, #20]
 8103cc4:	212c      	movs	r1, #44	; 0x2c
 8103cc6:	fb01 f303 	mul.w	r3, r1, r3
 8103cca:	4413      	add	r3, r2
 8103ccc:	333d      	adds	r3, #61	; 0x3d
 8103cce:	2201      	movs	r2, #1
 8103cd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103cd2:	697b      	ldr	r3, [r7, #20]
 8103cd4:	015a      	lsls	r2, r3, #5
 8103cd6:	69bb      	ldr	r3, [r7, #24]
 8103cd8:	4413      	add	r3, r2
 8103cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103cde:	68db      	ldr	r3, [r3, #12]
 8103ce0:	697a      	ldr	r2, [r7, #20]
 8103ce2:	0151      	lsls	r1, r2, #5
 8103ce4:	69ba      	ldr	r2, [r7, #24]
 8103ce6:	440a      	add	r2, r1
 8103ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103cec:	f043 0302 	orr.w	r3, r3, #2
 8103cf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	681b      	ldr	r3, [r3, #0]
 8103cf6:	697a      	ldr	r2, [r7, #20]
 8103cf8:	b2d2      	uxtb	r2, r2
 8103cfa:	4611      	mov	r1, r2
 8103cfc:	4618      	mov	r0, r3
 8103cfe:	f007 fb20 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8103d02:	697b      	ldr	r3, [r7, #20]
 8103d04:	015a      	lsls	r2, r3, #5
 8103d06:	69bb      	ldr	r3, [r7, #24]
 8103d08:	4413      	add	r3, r2
 8103d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103d0e:	461a      	mov	r2, r3
 8103d10:	2310      	movs	r3, #16
 8103d12:	6093      	str	r3, [r2, #8]
}
 8103d14:	e217      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8103d16:	697b      	ldr	r3, [r7, #20]
 8103d18:	015a      	lsls	r2, r3, #5
 8103d1a:	69bb      	ldr	r3, [r7, #24]
 8103d1c:	4413      	add	r3, r2
 8103d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103d22:	689b      	ldr	r3, [r3, #8]
 8103d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103d28:	2b80      	cmp	r3, #128	; 0x80
 8103d2a:	d174      	bne.n	8103e16 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	691b      	ldr	r3, [r3, #16]
 8103d30:	2b00      	cmp	r3, #0
 8103d32:	d121      	bne.n	8103d78 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8103d34:	687a      	ldr	r2, [r7, #4]
 8103d36:	697b      	ldr	r3, [r7, #20]
 8103d38:	212c      	movs	r1, #44	; 0x2c
 8103d3a:	fb01 f303 	mul.w	r3, r1, r3
 8103d3e:	4413      	add	r3, r2
 8103d40:	3361      	adds	r3, #97	; 0x61
 8103d42:	2206      	movs	r2, #6
 8103d44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103d46:	697b      	ldr	r3, [r7, #20]
 8103d48:	015a      	lsls	r2, r3, #5
 8103d4a:	69bb      	ldr	r3, [r7, #24]
 8103d4c:	4413      	add	r3, r2
 8103d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103d52:	68db      	ldr	r3, [r3, #12]
 8103d54:	697a      	ldr	r2, [r7, #20]
 8103d56:	0151      	lsls	r1, r2, #5
 8103d58:	69ba      	ldr	r2, [r7, #24]
 8103d5a:	440a      	add	r2, r1
 8103d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103d60:	f043 0302 	orr.w	r3, r3, #2
 8103d64:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	697a      	ldr	r2, [r7, #20]
 8103d6c:	b2d2      	uxtb	r2, r2
 8103d6e:	4611      	mov	r1, r2
 8103d70:	4618      	mov	r0, r3
 8103d72:	f007 fae6 	bl	810b342 <USB_HC_Halt>
 8103d76:	e044      	b.n	8103e02 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8103d78:	687a      	ldr	r2, [r7, #4]
 8103d7a:	697b      	ldr	r3, [r7, #20]
 8103d7c:	212c      	movs	r1, #44	; 0x2c
 8103d7e:	fb01 f303 	mul.w	r3, r1, r3
 8103d82:	4413      	add	r3, r2
 8103d84:	335c      	adds	r3, #92	; 0x5c
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	1c5a      	adds	r2, r3, #1
 8103d8a:	6879      	ldr	r1, [r7, #4]
 8103d8c:	697b      	ldr	r3, [r7, #20]
 8103d8e:	202c      	movs	r0, #44	; 0x2c
 8103d90:	fb00 f303 	mul.w	r3, r0, r3
 8103d94:	440b      	add	r3, r1
 8103d96:	335c      	adds	r3, #92	; 0x5c
 8103d98:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8103d9a:	687a      	ldr	r2, [r7, #4]
 8103d9c:	697b      	ldr	r3, [r7, #20]
 8103d9e:	212c      	movs	r1, #44	; 0x2c
 8103da0:	fb01 f303 	mul.w	r3, r1, r3
 8103da4:	4413      	add	r3, r2
 8103da6:	335c      	adds	r3, #92	; 0x5c
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	2b02      	cmp	r3, #2
 8103dac:	d920      	bls.n	8103df0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8103dae:	687a      	ldr	r2, [r7, #4]
 8103db0:	697b      	ldr	r3, [r7, #20]
 8103db2:	212c      	movs	r1, #44	; 0x2c
 8103db4:	fb01 f303 	mul.w	r3, r1, r3
 8103db8:	4413      	add	r3, r2
 8103dba:	335c      	adds	r3, #92	; 0x5c
 8103dbc:	2200      	movs	r2, #0
 8103dbe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8103dc0:	687a      	ldr	r2, [r7, #4]
 8103dc2:	697b      	ldr	r3, [r7, #20]
 8103dc4:	212c      	movs	r1, #44	; 0x2c
 8103dc6:	fb01 f303 	mul.w	r3, r1, r3
 8103dca:	4413      	add	r3, r2
 8103dcc:	3360      	adds	r3, #96	; 0x60
 8103dce:	2204      	movs	r2, #4
 8103dd0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8103dd2:	697b      	ldr	r3, [r7, #20]
 8103dd4:	b2d9      	uxtb	r1, r3
 8103dd6:	687a      	ldr	r2, [r7, #4]
 8103dd8:	697b      	ldr	r3, [r7, #20]
 8103dda:	202c      	movs	r0, #44	; 0x2c
 8103ddc:	fb00 f303 	mul.w	r3, r0, r3
 8103de0:	4413      	add	r3, r2
 8103de2:	3360      	adds	r3, #96	; 0x60
 8103de4:	781b      	ldrb	r3, [r3, #0]
 8103de6:	461a      	mov	r2, r3
 8103de8:	6878      	ldr	r0, [r7, #4]
 8103dea:	f009 f941 	bl	810d070 <HAL_HCD_HC_NotifyURBChange_Callback>
 8103dee:	e008      	b.n	8103e02 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8103df0:	687a      	ldr	r2, [r7, #4]
 8103df2:	697b      	ldr	r3, [r7, #20]
 8103df4:	212c      	movs	r1, #44	; 0x2c
 8103df6:	fb01 f303 	mul.w	r3, r1, r3
 8103dfa:	4413      	add	r3, r2
 8103dfc:	3360      	adds	r3, #96	; 0x60
 8103dfe:	2202      	movs	r2, #2
 8103e00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8103e02:	697b      	ldr	r3, [r7, #20]
 8103e04:	015a      	lsls	r2, r3, #5
 8103e06:	69bb      	ldr	r3, [r7, #24]
 8103e08:	4413      	add	r3, r2
 8103e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103e0e:	461a      	mov	r2, r3
 8103e10:	2380      	movs	r3, #128	; 0x80
 8103e12:	6093      	str	r3, [r2, #8]
}
 8103e14:	e197      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8103e16:	697b      	ldr	r3, [r7, #20]
 8103e18:	015a      	lsls	r2, r3, #5
 8103e1a:	69bb      	ldr	r3, [r7, #24]
 8103e1c:	4413      	add	r3, r2
 8103e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103e22:	689b      	ldr	r3, [r3, #8]
 8103e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103e2c:	d134      	bne.n	8103e98 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8103e2e:	697b      	ldr	r3, [r7, #20]
 8103e30:	015a      	lsls	r2, r3, #5
 8103e32:	69bb      	ldr	r3, [r7, #24]
 8103e34:	4413      	add	r3, r2
 8103e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103e3a:	68db      	ldr	r3, [r3, #12]
 8103e3c:	697a      	ldr	r2, [r7, #20]
 8103e3e:	0151      	lsls	r1, r2, #5
 8103e40:	69ba      	ldr	r2, [r7, #24]
 8103e42:	440a      	add	r2, r1
 8103e44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103e48:	f043 0302 	orr.w	r3, r3, #2
 8103e4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	697a      	ldr	r2, [r7, #20]
 8103e54:	b2d2      	uxtb	r2, r2
 8103e56:	4611      	mov	r1, r2
 8103e58:	4618      	mov	r0, r3
 8103e5a:	f007 fa72 	bl	810b342 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8103e5e:	697b      	ldr	r3, [r7, #20]
 8103e60:	015a      	lsls	r2, r3, #5
 8103e62:	69bb      	ldr	r3, [r7, #24]
 8103e64:	4413      	add	r3, r2
 8103e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103e6a:	461a      	mov	r2, r3
 8103e6c:	2310      	movs	r3, #16
 8103e6e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8103e70:	697b      	ldr	r3, [r7, #20]
 8103e72:	015a      	lsls	r2, r3, #5
 8103e74:	69bb      	ldr	r3, [r7, #24]
 8103e76:	4413      	add	r3, r2
 8103e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103e7c:	461a      	mov	r2, r3
 8103e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8103e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8103e84:	687a      	ldr	r2, [r7, #4]
 8103e86:	697b      	ldr	r3, [r7, #20]
 8103e88:	212c      	movs	r1, #44	; 0x2c
 8103e8a:	fb01 f303 	mul.w	r3, r1, r3
 8103e8e:	4413      	add	r3, r2
 8103e90:	3361      	adds	r3, #97	; 0x61
 8103e92:	2208      	movs	r2, #8
 8103e94:	701a      	strb	r2, [r3, #0]
}
 8103e96:	e156      	b.n	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8103e98:	697b      	ldr	r3, [r7, #20]
 8103e9a:	015a      	lsls	r2, r3, #5
 8103e9c:	69bb      	ldr	r3, [r7, #24]
 8103e9e:	4413      	add	r3, r2
 8103ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103ea4:	689b      	ldr	r3, [r3, #8]
 8103ea6:	f003 0302 	and.w	r3, r3, #2
 8103eaa:	2b02      	cmp	r3, #2
 8103eac:	f040 814b 	bne.w	8104146 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8103eb0:	697b      	ldr	r3, [r7, #20]
 8103eb2:	015a      	lsls	r2, r3, #5
 8103eb4:	69bb      	ldr	r3, [r7, #24]
 8103eb6:	4413      	add	r3, r2
 8103eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8103ebc:	68db      	ldr	r3, [r3, #12]
 8103ebe:	697a      	ldr	r2, [r7, #20]
 8103ec0:	0151      	lsls	r1, r2, #5
 8103ec2:	69ba      	ldr	r2, [r7, #24]
 8103ec4:	440a      	add	r2, r1
 8103ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8103eca:	f023 0302 	bic.w	r3, r3, #2
 8103ece:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8103ed0:	687a      	ldr	r2, [r7, #4]
 8103ed2:	697b      	ldr	r3, [r7, #20]
 8103ed4:	212c      	movs	r1, #44	; 0x2c
 8103ed6:	fb01 f303 	mul.w	r3, r1, r3
 8103eda:	4413      	add	r3, r2
 8103edc:	3361      	adds	r3, #97	; 0x61
 8103ede:	781b      	ldrb	r3, [r3, #0]
 8103ee0:	2b01      	cmp	r3, #1
 8103ee2:	d179      	bne.n	8103fd8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8103ee4:	687a      	ldr	r2, [r7, #4]
 8103ee6:	697b      	ldr	r3, [r7, #20]
 8103ee8:	212c      	movs	r1, #44	; 0x2c
 8103eea:	fb01 f303 	mul.w	r3, r1, r3
 8103eee:	4413      	add	r3, r2
 8103ef0:	3360      	adds	r3, #96	; 0x60
 8103ef2:	2201      	movs	r2, #1
 8103ef4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8103ef6:	687a      	ldr	r2, [r7, #4]
 8103ef8:	697b      	ldr	r3, [r7, #20]
 8103efa:	212c      	movs	r1, #44	; 0x2c
 8103efc:	fb01 f303 	mul.w	r3, r1, r3
 8103f00:	4413      	add	r3, r2
 8103f02:	333f      	adds	r3, #63	; 0x3f
 8103f04:	781b      	ldrb	r3, [r3, #0]
 8103f06:	2b02      	cmp	r3, #2
 8103f08:	d00a      	beq.n	8103f20 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8103f0a:	687a      	ldr	r2, [r7, #4]
 8103f0c:	697b      	ldr	r3, [r7, #20]
 8103f0e:	212c      	movs	r1, #44	; 0x2c
 8103f10:	fb01 f303 	mul.w	r3, r1, r3
 8103f14:	4413      	add	r3, r2
 8103f16:	333f      	adds	r3, #63	; 0x3f
 8103f18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8103f1a:	2b03      	cmp	r3, #3
 8103f1c:	f040 80fc 	bne.w	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	691b      	ldr	r3, [r3, #16]
 8103f24:	2b01      	cmp	r3, #1
 8103f26:	d142      	bne.n	8103fae <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8103f28:	687a      	ldr	r2, [r7, #4]
 8103f2a:	697b      	ldr	r3, [r7, #20]
 8103f2c:	212c      	movs	r1, #44	; 0x2c
 8103f2e:	fb01 f303 	mul.w	r3, r1, r3
 8103f32:	4413      	add	r3, r2
 8103f34:	334c      	adds	r3, #76	; 0x4c
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	2b00      	cmp	r3, #0
 8103f3a:	f000 80ed 	beq.w	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8103f3e:	687a      	ldr	r2, [r7, #4]
 8103f40:	697b      	ldr	r3, [r7, #20]
 8103f42:	212c      	movs	r1, #44	; 0x2c
 8103f44:	fb01 f303 	mul.w	r3, r1, r3
 8103f48:	4413      	add	r3, r2
 8103f4a:	334c      	adds	r3, #76	; 0x4c
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	6879      	ldr	r1, [r7, #4]
 8103f50:	697a      	ldr	r2, [r7, #20]
 8103f52:	202c      	movs	r0, #44	; 0x2c
 8103f54:	fb00 f202 	mul.w	r2, r0, r2
 8103f58:	440a      	add	r2, r1
 8103f5a:	3240      	adds	r2, #64	; 0x40
 8103f5c:	8812      	ldrh	r2, [r2, #0]
 8103f5e:	4413      	add	r3, r2
 8103f60:	3b01      	subs	r3, #1
 8103f62:	6879      	ldr	r1, [r7, #4]
 8103f64:	697a      	ldr	r2, [r7, #20]
 8103f66:	202c      	movs	r0, #44	; 0x2c
 8103f68:	fb00 f202 	mul.w	r2, r0, r2
 8103f6c:	440a      	add	r2, r1
 8103f6e:	3240      	adds	r2, #64	; 0x40
 8103f70:	8812      	ldrh	r2, [r2, #0]
 8103f72:	fbb3 f3f2 	udiv	r3, r3, r2
 8103f76:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	f003 0301 	and.w	r3, r3, #1
 8103f7e:	2b00      	cmp	r3, #0
 8103f80:	f000 80ca 	beq.w	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8103f84:	687a      	ldr	r2, [r7, #4]
 8103f86:	697b      	ldr	r3, [r7, #20]
 8103f88:	212c      	movs	r1, #44	; 0x2c
 8103f8a:	fb01 f303 	mul.w	r3, r1, r3
 8103f8e:	4413      	add	r3, r2
 8103f90:	3355      	adds	r3, #85	; 0x55
 8103f92:	781b      	ldrb	r3, [r3, #0]
 8103f94:	f083 0301 	eor.w	r3, r3, #1
 8103f98:	b2d8      	uxtb	r0, r3
 8103f9a:	687a      	ldr	r2, [r7, #4]
 8103f9c:	697b      	ldr	r3, [r7, #20]
 8103f9e:	212c      	movs	r1, #44	; 0x2c
 8103fa0:	fb01 f303 	mul.w	r3, r1, r3
 8103fa4:	4413      	add	r3, r2
 8103fa6:	3355      	adds	r3, #85	; 0x55
 8103fa8:	4602      	mov	r2, r0
 8103faa:	701a      	strb	r2, [r3, #0]
 8103fac:	e0b4      	b.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8103fae:	687a      	ldr	r2, [r7, #4]
 8103fb0:	697b      	ldr	r3, [r7, #20]
 8103fb2:	212c      	movs	r1, #44	; 0x2c
 8103fb4:	fb01 f303 	mul.w	r3, r1, r3
 8103fb8:	4413      	add	r3, r2
 8103fba:	3355      	adds	r3, #85	; 0x55
 8103fbc:	781b      	ldrb	r3, [r3, #0]
 8103fbe:	f083 0301 	eor.w	r3, r3, #1
 8103fc2:	b2d8      	uxtb	r0, r3
 8103fc4:	687a      	ldr	r2, [r7, #4]
 8103fc6:	697b      	ldr	r3, [r7, #20]
 8103fc8:	212c      	movs	r1, #44	; 0x2c
 8103fca:	fb01 f303 	mul.w	r3, r1, r3
 8103fce:	4413      	add	r3, r2
 8103fd0:	3355      	adds	r3, #85	; 0x55
 8103fd2:	4602      	mov	r2, r0
 8103fd4:	701a      	strb	r2, [r3, #0]
 8103fd6:	e09f      	b.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8103fd8:	687a      	ldr	r2, [r7, #4]
 8103fda:	697b      	ldr	r3, [r7, #20]
 8103fdc:	212c      	movs	r1, #44	; 0x2c
 8103fde:	fb01 f303 	mul.w	r3, r1, r3
 8103fe2:	4413      	add	r3, r2
 8103fe4:	3361      	adds	r3, #97	; 0x61
 8103fe6:	781b      	ldrb	r3, [r3, #0]
 8103fe8:	2b03      	cmp	r3, #3
 8103fea:	d109      	bne.n	8104000 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8103fec:	687a      	ldr	r2, [r7, #4]
 8103fee:	697b      	ldr	r3, [r7, #20]
 8103ff0:	212c      	movs	r1, #44	; 0x2c
 8103ff2:	fb01 f303 	mul.w	r3, r1, r3
 8103ff6:	4413      	add	r3, r2
 8103ff8:	3360      	adds	r3, #96	; 0x60
 8103ffa:	2202      	movs	r2, #2
 8103ffc:	701a      	strb	r2, [r3, #0]
 8103ffe:	e08b      	b.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8104000:	687a      	ldr	r2, [r7, #4]
 8104002:	697b      	ldr	r3, [r7, #20]
 8104004:	212c      	movs	r1, #44	; 0x2c
 8104006:	fb01 f303 	mul.w	r3, r1, r3
 810400a:	4413      	add	r3, r2
 810400c:	3361      	adds	r3, #97	; 0x61
 810400e:	781b      	ldrb	r3, [r3, #0]
 8104010:	2b04      	cmp	r3, #4
 8104012:	d109      	bne.n	8104028 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8104014:	687a      	ldr	r2, [r7, #4]
 8104016:	697b      	ldr	r3, [r7, #20]
 8104018:	212c      	movs	r1, #44	; 0x2c
 810401a:	fb01 f303 	mul.w	r3, r1, r3
 810401e:	4413      	add	r3, r2
 8104020:	3360      	adds	r3, #96	; 0x60
 8104022:	2202      	movs	r2, #2
 8104024:	701a      	strb	r2, [r3, #0]
 8104026:	e077      	b.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8104028:	687a      	ldr	r2, [r7, #4]
 810402a:	697b      	ldr	r3, [r7, #20]
 810402c:	212c      	movs	r1, #44	; 0x2c
 810402e:	fb01 f303 	mul.w	r3, r1, r3
 8104032:	4413      	add	r3, r2
 8104034:	3361      	adds	r3, #97	; 0x61
 8104036:	781b      	ldrb	r3, [r3, #0]
 8104038:	2b05      	cmp	r3, #5
 810403a:	d109      	bne.n	8104050 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 810403c:	687a      	ldr	r2, [r7, #4]
 810403e:	697b      	ldr	r3, [r7, #20]
 8104040:	212c      	movs	r1, #44	; 0x2c
 8104042:	fb01 f303 	mul.w	r3, r1, r3
 8104046:	4413      	add	r3, r2
 8104048:	3360      	adds	r3, #96	; 0x60
 810404a:	2205      	movs	r2, #5
 810404c:	701a      	strb	r2, [r3, #0]
 810404e:	e063      	b.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8104050:	687a      	ldr	r2, [r7, #4]
 8104052:	697b      	ldr	r3, [r7, #20]
 8104054:	212c      	movs	r1, #44	; 0x2c
 8104056:	fb01 f303 	mul.w	r3, r1, r3
 810405a:	4413      	add	r3, r2
 810405c:	3361      	adds	r3, #97	; 0x61
 810405e:	781b      	ldrb	r3, [r3, #0]
 8104060:	2b06      	cmp	r3, #6
 8104062:	d009      	beq.n	8104078 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8104064:	687a      	ldr	r2, [r7, #4]
 8104066:	697b      	ldr	r3, [r7, #20]
 8104068:	212c      	movs	r1, #44	; 0x2c
 810406a:	fb01 f303 	mul.w	r3, r1, r3
 810406e:	4413      	add	r3, r2
 8104070:	3361      	adds	r3, #97	; 0x61
 8104072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8104074:	2b08      	cmp	r3, #8
 8104076:	d14f      	bne.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8104078:	687a      	ldr	r2, [r7, #4]
 810407a:	697b      	ldr	r3, [r7, #20]
 810407c:	212c      	movs	r1, #44	; 0x2c
 810407e:	fb01 f303 	mul.w	r3, r1, r3
 8104082:	4413      	add	r3, r2
 8104084:	335c      	adds	r3, #92	; 0x5c
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	1c5a      	adds	r2, r3, #1
 810408a:	6879      	ldr	r1, [r7, #4]
 810408c:	697b      	ldr	r3, [r7, #20]
 810408e:	202c      	movs	r0, #44	; 0x2c
 8104090:	fb00 f303 	mul.w	r3, r0, r3
 8104094:	440b      	add	r3, r1
 8104096:	335c      	adds	r3, #92	; 0x5c
 8104098:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 810409a:	687a      	ldr	r2, [r7, #4]
 810409c:	697b      	ldr	r3, [r7, #20]
 810409e:	212c      	movs	r1, #44	; 0x2c
 81040a0:	fb01 f303 	mul.w	r3, r1, r3
 81040a4:	4413      	add	r3, r2
 81040a6:	335c      	adds	r3, #92	; 0x5c
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	2b02      	cmp	r3, #2
 81040ac:	d912      	bls.n	81040d4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 81040ae:	687a      	ldr	r2, [r7, #4]
 81040b0:	697b      	ldr	r3, [r7, #20]
 81040b2:	212c      	movs	r1, #44	; 0x2c
 81040b4:	fb01 f303 	mul.w	r3, r1, r3
 81040b8:	4413      	add	r3, r2
 81040ba:	335c      	adds	r3, #92	; 0x5c
 81040bc:	2200      	movs	r2, #0
 81040be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 81040c0:	687a      	ldr	r2, [r7, #4]
 81040c2:	697b      	ldr	r3, [r7, #20]
 81040c4:	212c      	movs	r1, #44	; 0x2c
 81040c6:	fb01 f303 	mul.w	r3, r1, r3
 81040ca:	4413      	add	r3, r2
 81040cc:	3360      	adds	r3, #96	; 0x60
 81040ce:	2204      	movs	r2, #4
 81040d0:	701a      	strb	r2, [r3, #0]
 81040d2:	e021      	b.n	8104118 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 81040d4:	687a      	ldr	r2, [r7, #4]
 81040d6:	697b      	ldr	r3, [r7, #20]
 81040d8:	212c      	movs	r1, #44	; 0x2c
 81040da:	fb01 f303 	mul.w	r3, r1, r3
 81040de:	4413      	add	r3, r2
 81040e0:	3360      	adds	r3, #96	; 0x60
 81040e2:	2202      	movs	r2, #2
 81040e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 81040e6:	697b      	ldr	r3, [r7, #20]
 81040e8:	015a      	lsls	r2, r3, #5
 81040ea:	69bb      	ldr	r3, [r7, #24]
 81040ec:	4413      	add	r3, r2
 81040ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 81040f6:	693b      	ldr	r3, [r7, #16]
 81040f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 81040fc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 81040fe:	693b      	ldr	r3, [r7, #16]
 8104100:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104104:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8104106:	697b      	ldr	r3, [r7, #20]
 8104108:	015a      	lsls	r2, r3, #5
 810410a:	69bb      	ldr	r3, [r7, #24]
 810410c:	4413      	add	r3, r2
 810410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8104112:	461a      	mov	r2, r3
 8104114:	693b      	ldr	r3, [r7, #16]
 8104116:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8104118:	697b      	ldr	r3, [r7, #20]
 810411a:	015a      	lsls	r2, r3, #5
 810411c:	69bb      	ldr	r3, [r7, #24]
 810411e:	4413      	add	r3, r2
 8104120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8104124:	461a      	mov	r2, r3
 8104126:	2302      	movs	r3, #2
 8104128:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 810412a:	697b      	ldr	r3, [r7, #20]
 810412c:	b2d9      	uxtb	r1, r3
 810412e:	687a      	ldr	r2, [r7, #4]
 8104130:	697b      	ldr	r3, [r7, #20]
 8104132:	202c      	movs	r0, #44	; 0x2c
 8104134:	fb00 f303 	mul.w	r3, r0, r3
 8104138:	4413      	add	r3, r2
 810413a:	3360      	adds	r3, #96	; 0x60
 810413c:	781b      	ldrb	r3, [r3, #0]
 810413e:	461a      	mov	r2, r3
 8104140:	6878      	ldr	r0, [r7, #4]
 8104142:	f008 ff95 	bl	810d070 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8104146:	bf00      	nop
 8104148:	3720      	adds	r7, #32
 810414a:	46bd      	mov	sp, r7
 810414c:	bd80      	pop	{r7, pc}

0810414e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 810414e:	b580      	push	{r7, lr}
 8104150:	b08a      	sub	sp, #40	; 0x28
 8104152:	af00      	add	r7, sp, #0
 8104154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	681b      	ldr	r3, [r3, #0]
 810415a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 810415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810415e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	681b      	ldr	r3, [r3, #0]
 8104164:	6a1b      	ldr	r3, [r3, #32]
 8104166:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8104168:	69fb      	ldr	r3, [r7, #28]
 810416a:	f003 030f 	and.w	r3, r3, #15
 810416e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8104170:	69fb      	ldr	r3, [r7, #28]
 8104172:	0c5b      	lsrs	r3, r3, #17
 8104174:	f003 030f 	and.w	r3, r3, #15
 8104178:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 810417a:	69fb      	ldr	r3, [r7, #28]
 810417c:	091b      	lsrs	r3, r3, #4
 810417e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8104182:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8104184:	697b      	ldr	r3, [r7, #20]
 8104186:	2b02      	cmp	r3, #2
 8104188:	d004      	beq.n	8104194 <HCD_RXQLVL_IRQHandler+0x46>
 810418a:	697b      	ldr	r3, [r7, #20]
 810418c:	2b05      	cmp	r3, #5
 810418e:	f000 80a9 	beq.w	81042e4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8104192:	e0aa      	b.n	81042ea <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8104194:	693b      	ldr	r3, [r7, #16]
 8104196:	2b00      	cmp	r3, #0
 8104198:	f000 80a6 	beq.w	81042e8 <HCD_RXQLVL_IRQHandler+0x19a>
 810419c:	687a      	ldr	r2, [r7, #4]
 810419e:	69bb      	ldr	r3, [r7, #24]
 81041a0:	212c      	movs	r1, #44	; 0x2c
 81041a2:	fb01 f303 	mul.w	r3, r1, r3
 81041a6:	4413      	add	r3, r2
 81041a8:	3344      	adds	r3, #68	; 0x44
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	f000 809b 	beq.w	81042e8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 81041b2:	687a      	ldr	r2, [r7, #4]
 81041b4:	69bb      	ldr	r3, [r7, #24]
 81041b6:	212c      	movs	r1, #44	; 0x2c
 81041b8:	fb01 f303 	mul.w	r3, r1, r3
 81041bc:	4413      	add	r3, r2
 81041be:	3350      	adds	r3, #80	; 0x50
 81041c0:	681a      	ldr	r2, [r3, #0]
 81041c2:	693b      	ldr	r3, [r7, #16]
 81041c4:	441a      	add	r2, r3
 81041c6:	6879      	ldr	r1, [r7, #4]
 81041c8:	69bb      	ldr	r3, [r7, #24]
 81041ca:	202c      	movs	r0, #44	; 0x2c
 81041cc:	fb00 f303 	mul.w	r3, r0, r3
 81041d0:	440b      	add	r3, r1
 81041d2:	334c      	adds	r3, #76	; 0x4c
 81041d4:	681b      	ldr	r3, [r3, #0]
 81041d6:	429a      	cmp	r2, r3
 81041d8:	d87a      	bhi.n	81042d0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 81041da:	687b      	ldr	r3, [r7, #4]
 81041dc:	6818      	ldr	r0, [r3, #0]
 81041de:	687a      	ldr	r2, [r7, #4]
 81041e0:	69bb      	ldr	r3, [r7, #24]
 81041e2:	212c      	movs	r1, #44	; 0x2c
 81041e4:	fb01 f303 	mul.w	r3, r1, r3
 81041e8:	4413      	add	r3, r2
 81041ea:	3344      	adds	r3, #68	; 0x44
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	693a      	ldr	r2, [r7, #16]
 81041f0:	b292      	uxth	r2, r2
 81041f2:	4619      	mov	r1, r3
 81041f4:	f006 fc44 	bl	810aa80 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 81041f8:	687a      	ldr	r2, [r7, #4]
 81041fa:	69bb      	ldr	r3, [r7, #24]
 81041fc:	212c      	movs	r1, #44	; 0x2c
 81041fe:	fb01 f303 	mul.w	r3, r1, r3
 8104202:	4413      	add	r3, r2
 8104204:	3344      	adds	r3, #68	; 0x44
 8104206:	681a      	ldr	r2, [r3, #0]
 8104208:	693b      	ldr	r3, [r7, #16]
 810420a:	441a      	add	r2, r3
 810420c:	6879      	ldr	r1, [r7, #4]
 810420e:	69bb      	ldr	r3, [r7, #24]
 8104210:	202c      	movs	r0, #44	; 0x2c
 8104212:	fb00 f303 	mul.w	r3, r0, r3
 8104216:	440b      	add	r3, r1
 8104218:	3344      	adds	r3, #68	; 0x44
 810421a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 810421c:	687a      	ldr	r2, [r7, #4]
 810421e:	69bb      	ldr	r3, [r7, #24]
 8104220:	212c      	movs	r1, #44	; 0x2c
 8104222:	fb01 f303 	mul.w	r3, r1, r3
 8104226:	4413      	add	r3, r2
 8104228:	3350      	adds	r3, #80	; 0x50
 810422a:	681a      	ldr	r2, [r3, #0]
 810422c:	693b      	ldr	r3, [r7, #16]
 810422e:	441a      	add	r2, r3
 8104230:	6879      	ldr	r1, [r7, #4]
 8104232:	69bb      	ldr	r3, [r7, #24]
 8104234:	202c      	movs	r0, #44	; 0x2c
 8104236:	fb00 f303 	mul.w	r3, r0, r3
 810423a:	440b      	add	r3, r1
 810423c:	3350      	adds	r3, #80	; 0x50
 810423e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8104240:	69bb      	ldr	r3, [r7, #24]
 8104242:	015a      	lsls	r2, r3, #5
 8104244:	6a3b      	ldr	r3, [r7, #32]
 8104246:	4413      	add	r3, r2
 8104248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810424c:	691b      	ldr	r3, [r3, #16]
 810424e:	0cdb      	lsrs	r3, r3, #19
 8104250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8104254:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8104256:	687a      	ldr	r2, [r7, #4]
 8104258:	69bb      	ldr	r3, [r7, #24]
 810425a:	212c      	movs	r1, #44	; 0x2c
 810425c:	fb01 f303 	mul.w	r3, r1, r3
 8104260:	4413      	add	r3, r2
 8104262:	3340      	adds	r3, #64	; 0x40
 8104264:	881b      	ldrh	r3, [r3, #0]
 8104266:	461a      	mov	r2, r3
 8104268:	693b      	ldr	r3, [r7, #16]
 810426a:	4293      	cmp	r3, r2
 810426c:	d13c      	bne.n	81042e8 <HCD_RXQLVL_IRQHandler+0x19a>
 810426e:	68fb      	ldr	r3, [r7, #12]
 8104270:	2b00      	cmp	r3, #0
 8104272:	d039      	beq.n	81042e8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8104274:	69bb      	ldr	r3, [r7, #24]
 8104276:	015a      	lsls	r2, r3, #5
 8104278:	6a3b      	ldr	r3, [r7, #32]
 810427a:	4413      	add	r3, r2
 810427c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8104284:	68bb      	ldr	r3, [r7, #8]
 8104286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 810428a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 810428c:	68bb      	ldr	r3, [r7, #8]
 810428e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8104292:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8104294:	69bb      	ldr	r3, [r7, #24]
 8104296:	015a      	lsls	r2, r3, #5
 8104298:	6a3b      	ldr	r3, [r7, #32]
 810429a:	4413      	add	r3, r2
 810429c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 81042a0:	461a      	mov	r2, r3
 81042a2:	68bb      	ldr	r3, [r7, #8]
 81042a4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 81042a6:	687a      	ldr	r2, [r7, #4]
 81042a8:	69bb      	ldr	r3, [r7, #24]
 81042aa:	212c      	movs	r1, #44	; 0x2c
 81042ac:	fb01 f303 	mul.w	r3, r1, r3
 81042b0:	4413      	add	r3, r2
 81042b2:	3354      	adds	r3, #84	; 0x54
 81042b4:	781b      	ldrb	r3, [r3, #0]
 81042b6:	f083 0301 	eor.w	r3, r3, #1
 81042ba:	b2d8      	uxtb	r0, r3
 81042bc:	687a      	ldr	r2, [r7, #4]
 81042be:	69bb      	ldr	r3, [r7, #24]
 81042c0:	212c      	movs	r1, #44	; 0x2c
 81042c2:	fb01 f303 	mul.w	r3, r1, r3
 81042c6:	4413      	add	r3, r2
 81042c8:	3354      	adds	r3, #84	; 0x54
 81042ca:	4602      	mov	r2, r0
 81042cc:	701a      	strb	r2, [r3, #0]
      break;
 81042ce:	e00b      	b.n	81042e8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 81042d0:	687a      	ldr	r2, [r7, #4]
 81042d2:	69bb      	ldr	r3, [r7, #24]
 81042d4:	212c      	movs	r1, #44	; 0x2c
 81042d6:	fb01 f303 	mul.w	r3, r1, r3
 81042da:	4413      	add	r3, r2
 81042dc:	3360      	adds	r3, #96	; 0x60
 81042de:	2204      	movs	r2, #4
 81042e0:	701a      	strb	r2, [r3, #0]
      break;
 81042e2:	e001      	b.n	81042e8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 81042e4:	bf00      	nop
 81042e6:	e000      	b.n	81042ea <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 81042e8:	bf00      	nop
  }
}
 81042ea:	bf00      	nop
 81042ec:	3728      	adds	r7, #40	; 0x28
 81042ee:	46bd      	mov	sp, r7
 81042f0:	bd80      	pop	{r7, pc}

081042f2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 81042f2:	b580      	push	{r7, lr}
 81042f4:	b086      	sub	sp, #24
 81042f6:	af00      	add	r7, sp, #0
 81042f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8104300:	697b      	ldr	r3, [r7, #20]
 8104302:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8104304:	693b      	ldr	r3, [r7, #16]
 8104306:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 810430e:	693b      	ldr	r3, [r7, #16]
 8104310:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8104318:	68bb      	ldr	r3, [r7, #8]
 810431a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 810431e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8104320:	68fb      	ldr	r3, [r7, #12]
 8104322:	f003 0302 	and.w	r3, r3, #2
 8104326:	2b02      	cmp	r3, #2
 8104328:	d10b      	bne.n	8104342 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	f003 0301 	and.w	r3, r3, #1
 8104330:	2b01      	cmp	r3, #1
 8104332:	d102      	bne.n	810433a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8104334:	6878      	ldr	r0, [r7, #4]
 8104336:	f008 fe7f 	bl	810d038 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 810433a:	68bb      	ldr	r3, [r7, #8]
 810433c:	f043 0302 	orr.w	r3, r3, #2
 8104340:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8104342:	68fb      	ldr	r3, [r7, #12]
 8104344:	f003 0308 	and.w	r3, r3, #8
 8104348:	2b08      	cmp	r3, #8
 810434a:	d132      	bne.n	81043b2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 810434c:	68bb      	ldr	r3, [r7, #8]
 810434e:	f043 0308 	orr.w	r3, r3, #8
 8104352:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	f003 0304 	and.w	r3, r3, #4
 810435a:	2b04      	cmp	r3, #4
 810435c:	d126      	bne.n	81043ac <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	699b      	ldr	r3, [r3, #24]
 8104362:	2b02      	cmp	r3, #2
 8104364:	d113      	bne.n	810438e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8104366:	68fb      	ldr	r3, [r7, #12]
 8104368:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 810436c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104370:	d106      	bne.n	8104380 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	2102      	movs	r1, #2
 8104378:	4618      	mov	r0, r3
 810437a:	f006 fce5 	bl	810ad48 <USB_InitFSLSPClkSel>
 810437e:	e011      	b.n	81043a4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	2101      	movs	r1, #1
 8104386:	4618      	mov	r0, r3
 8104388:	f006 fcde 	bl	810ad48 <USB_InitFSLSPClkSel>
 810438c:	e00a      	b.n	81043a4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	68db      	ldr	r3, [r3, #12]
 8104392:	2b01      	cmp	r3, #1
 8104394:	d106      	bne.n	81043a4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8104396:	693b      	ldr	r3, [r7, #16]
 8104398:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810439c:	461a      	mov	r2, r3
 810439e:	f64e 2360 	movw	r3, #60000	; 0xea60
 81043a2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 81043a4:	6878      	ldr	r0, [r7, #4]
 81043a6:	f008 fe71 	bl	810d08c <HAL_HCD_PortEnabled_Callback>
 81043aa:	e002      	b.n	81043b2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 81043ac:	6878      	ldr	r0, [r7, #4]
 81043ae:	f008 fe7b 	bl	810d0a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 81043b2:	68fb      	ldr	r3, [r7, #12]
 81043b4:	f003 0320 	and.w	r3, r3, #32
 81043b8:	2b20      	cmp	r3, #32
 81043ba:	d103      	bne.n	81043c4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 81043bc:	68bb      	ldr	r3, [r7, #8]
 81043be:	f043 0320 	orr.w	r3, r3, #32
 81043c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 81043c4:	693b      	ldr	r3, [r7, #16]
 81043c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 81043ca:	461a      	mov	r2, r3
 81043cc:	68bb      	ldr	r3, [r7, #8]
 81043ce:	6013      	str	r3, [r2, #0]
}
 81043d0:	bf00      	nop
 81043d2:	3718      	adds	r7, #24
 81043d4:	46bd      	mov	sp, r7
 81043d6:	bd80      	pop	{r7, pc}

081043d8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81043d8:	b480      	push	{r7}
 81043da:	b083      	sub	sp, #12
 81043dc:	af00      	add	r7, sp, #0
 81043de:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81043e0:	4b05      	ldr	r3, [pc, #20]	; (81043f8 <HAL_HSEM_ActivateNotification+0x20>)
 81043e2:	681a      	ldr	r2, [r3, #0]
 81043e4:	4904      	ldr	r1, [pc, #16]	; (81043f8 <HAL_HSEM_ActivateNotification+0x20>)
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	4313      	orrs	r3, r2
 81043ea:	600b      	str	r3, [r1, #0]
#endif
}
 81043ec:	bf00      	nop
 81043ee:	370c      	adds	r7, #12
 81043f0:	46bd      	mov	sp, r7
 81043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043f6:	4770      	bx	lr
 81043f8:	58026510 	.word	0x58026510

081043fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81043fc:	b580      	push	{r7, lr}
 81043fe:	b088      	sub	sp, #32
 8104400:	af02      	add	r7, sp, #8
 8104402:	60f8      	str	r0, [r7, #12]
 8104404:	4608      	mov	r0, r1
 8104406:	4611      	mov	r1, r2
 8104408:	461a      	mov	r2, r3
 810440a:	4603      	mov	r3, r0
 810440c:	817b      	strh	r3, [r7, #10]
 810440e:	460b      	mov	r3, r1
 8104410:	813b      	strh	r3, [r7, #8]
 8104412:	4613      	mov	r3, r2
 8104414:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104416:	68fb      	ldr	r3, [r7, #12]
 8104418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810441c:	b2db      	uxtb	r3, r3
 810441e:	2b20      	cmp	r3, #32
 8104420:	f040 80f9 	bne.w	8104616 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8104424:	6a3b      	ldr	r3, [r7, #32]
 8104426:	2b00      	cmp	r3, #0
 8104428:	d002      	beq.n	8104430 <HAL_I2C_Mem_Write+0x34>
 810442a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810442c:	2b00      	cmp	r3, #0
 810442e:	d105      	bne.n	810443c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104436:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104438:	2301      	movs	r3, #1
 810443a:	e0ed      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104442:	2b01      	cmp	r3, #1
 8104444:	d101      	bne.n	810444a <HAL_I2C_Mem_Write+0x4e>
 8104446:	2302      	movs	r3, #2
 8104448:	e0e6      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
 810444a:	68fb      	ldr	r3, [r7, #12]
 810444c:	2201      	movs	r2, #1
 810444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8104452:	f7fc ffd1 	bl	81013f8 <HAL_GetTick>
 8104456:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104458:	697b      	ldr	r3, [r7, #20]
 810445a:	9300      	str	r3, [sp, #0]
 810445c:	2319      	movs	r3, #25
 810445e:	2201      	movs	r2, #1
 8104460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8104464:	68f8      	ldr	r0, [r7, #12]
 8104466:	f000 fac3 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 810446a:	4603      	mov	r3, r0
 810446c:	2b00      	cmp	r3, #0
 810446e:	d001      	beq.n	8104474 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8104470:	2301      	movs	r3, #1
 8104472:	e0d1      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	2221      	movs	r2, #33	; 0x21
 8104478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	2240      	movs	r2, #64	; 0x40
 8104480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104484:	68fb      	ldr	r3, [r7, #12]
 8104486:	2200      	movs	r2, #0
 8104488:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810448a:	68fb      	ldr	r3, [r7, #12]
 810448c:	6a3a      	ldr	r2, [r7, #32]
 810448e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8104490:	68fb      	ldr	r3, [r7, #12]
 8104492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8104494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	2200      	movs	r2, #0
 810449a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810449c:	88f8      	ldrh	r0, [r7, #6]
 810449e:	893a      	ldrh	r2, [r7, #8]
 81044a0:	8979      	ldrh	r1, [r7, #10]
 81044a2:	697b      	ldr	r3, [r7, #20]
 81044a4:	9301      	str	r3, [sp, #4]
 81044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81044a8:	9300      	str	r3, [sp, #0]
 81044aa:	4603      	mov	r3, r0
 81044ac:	68f8      	ldr	r0, [r7, #12]
 81044ae:	f000 f9d3 	bl	8104858 <I2C_RequestMemoryWrite>
 81044b2:	4603      	mov	r3, r0
 81044b4:	2b00      	cmp	r3, #0
 81044b6:	d005      	beq.n	81044c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81044b8:	68fb      	ldr	r3, [r7, #12]
 81044ba:	2200      	movs	r2, #0
 81044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81044c0:	2301      	movs	r3, #1
 81044c2:	e0a9      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81044c4:	68fb      	ldr	r3, [r7, #12]
 81044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81044c8:	b29b      	uxth	r3, r3
 81044ca:	2bff      	cmp	r3, #255	; 0xff
 81044cc:	d90e      	bls.n	81044ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81044ce:	68fb      	ldr	r3, [r7, #12]
 81044d0:	22ff      	movs	r2, #255	; 0xff
 81044d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81044d8:	b2da      	uxtb	r2, r3
 81044da:	8979      	ldrh	r1, [r7, #10]
 81044dc:	2300      	movs	r3, #0
 81044de:	9300      	str	r3, [sp, #0]
 81044e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81044e4:	68f8      	ldr	r0, [r7, #12]
 81044e6:	f000 fba5 	bl	8104c34 <I2C_TransferConfig>
 81044ea:	e00f      	b.n	810450c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81044f0:	b29a      	uxth	r2, r3
 81044f2:	68fb      	ldr	r3, [r7, #12]
 81044f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81044f6:	68fb      	ldr	r3, [r7, #12]
 81044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81044fa:	b2da      	uxtb	r2, r3
 81044fc:	8979      	ldrh	r1, [r7, #10]
 81044fe:	2300      	movs	r3, #0
 8104500:	9300      	str	r3, [sp, #0]
 8104502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104506:	68f8      	ldr	r0, [r7, #12]
 8104508:	f000 fb94 	bl	8104c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810450c:	697a      	ldr	r2, [r7, #20]
 810450e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104510:	68f8      	ldr	r0, [r7, #12]
 8104512:	f000 faad 	bl	8104a70 <I2C_WaitOnTXISFlagUntilTimeout>
 8104516:	4603      	mov	r3, r0
 8104518:	2b00      	cmp	r3, #0
 810451a:	d001      	beq.n	8104520 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 810451c:	2301      	movs	r3, #1
 810451e:	e07b      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8104520:	68fb      	ldr	r3, [r7, #12]
 8104522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104524:	781a      	ldrb	r2, [r3, #0]
 8104526:	68fb      	ldr	r3, [r7, #12]
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810452c:	68fb      	ldr	r3, [r7, #12]
 810452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104530:	1c5a      	adds	r2, r3, #1
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8104536:	68fb      	ldr	r3, [r7, #12]
 8104538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810453a:	b29b      	uxth	r3, r3
 810453c:	3b01      	subs	r3, #1
 810453e:	b29a      	uxth	r2, r3
 8104540:	68fb      	ldr	r3, [r7, #12]
 8104542:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8104544:	68fb      	ldr	r3, [r7, #12]
 8104546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104548:	3b01      	subs	r3, #1
 810454a:	b29a      	uxth	r2, r3
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104550:	68fb      	ldr	r3, [r7, #12]
 8104552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104554:	b29b      	uxth	r3, r3
 8104556:	2b00      	cmp	r3, #0
 8104558:	d034      	beq.n	81045c4 <HAL_I2C_Mem_Write+0x1c8>
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810455e:	2b00      	cmp	r3, #0
 8104560:	d130      	bne.n	81045c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104562:	697b      	ldr	r3, [r7, #20]
 8104564:	9300      	str	r3, [sp, #0]
 8104566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104568:	2200      	movs	r2, #0
 810456a:	2180      	movs	r1, #128	; 0x80
 810456c:	68f8      	ldr	r0, [r7, #12]
 810456e:	f000 fa3f 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 8104572:	4603      	mov	r3, r0
 8104574:	2b00      	cmp	r3, #0
 8104576:	d001      	beq.n	810457c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8104578:	2301      	movs	r3, #1
 810457a:	e04d      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810457c:	68fb      	ldr	r3, [r7, #12]
 810457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104580:	b29b      	uxth	r3, r3
 8104582:	2bff      	cmp	r3, #255	; 0xff
 8104584:	d90e      	bls.n	81045a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	22ff      	movs	r2, #255	; 0xff
 810458a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810458c:	68fb      	ldr	r3, [r7, #12]
 810458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104590:	b2da      	uxtb	r2, r3
 8104592:	8979      	ldrh	r1, [r7, #10]
 8104594:	2300      	movs	r3, #0
 8104596:	9300      	str	r3, [sp, #0]
 8104598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810459c:	68f8      	ldr	r0, [r7, #12]
 810459e:	f000 fb49 	bl	8104c34 <I2C_TransferConfig>
 81045a2:	e00f      	b.n	81045c4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81045a8:	b29a      	uxth	r2, r3
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81045ae:	68fb      	ldr	r3, [r7, #12]
 81045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81045b2:	b2da      	uxtb	r2, r3
 81045b4:	8979      	ldrh	r1, [r7, #10]
 81045b6:	2300      	movs	r3, #0
 81045b8:	9300      	str	r3, [sp, #0]
 81045ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81045be:	68f8      	ldr	r0, [r7, #12]
 81045c0:	f000 fb38 	bl	8104c34 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81045c8:	b29b      	uxth	r3, r3
 81045ca:	2b00      	cmp	r3, #0
 81045cc:	d19e      	bne.n	810450c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81045ce:	697a      	ldr	r2, [r7, #20]
 81045d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81045d2:	68f8      	ldr	r0, [r7, #12]
 81045d4:	f000 fa8c 	bl	8104af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 81045d8:	4603      	mov	r3, r0
 81045da:	2b00      	cmp	r3, #0
 81045dc:	d001      	beq.n	81045e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81045de:	2301      	movs	r3, #1
 81045e0:	e01a      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	2220      	movs	r2, #32
 81045e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	6859      	ldr	r1, [r3, #4]
 81045f0:	68fb      	ldr	r3, [r7, #12]
 81045f2:	681a      	ldr	r2, [r3, #0]
 81045f4:	4b0a      	ldr	r3, [pc, #40]	; (8104620 <HAL_I2C_Mem_Write+0x224>)
 81045f6:	400b      	ands	r3, r1
 81045f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81045fa:	68fb      	ldr	r3, [r7, #12]
 81045fc:	2220      	movs	r2, #32
 81045fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104602:	68fb      	ldr	r3, [r7, #12]
 8104604:	2200      	movs	r2, #0
 8104606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810460a:	68fb      	ldr	r3, [r7, #12]
 810460c:	2200      	movs	r2, #0
 810460e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104612:	2300      	movs	r3, #0
 8104614:	e000      	b.n	8104618 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8104616:	2302      	movs	r3, #2
  }
}
 8104618:	4618      	mov	r0, r3
 810461a:	3718      	adds	r7, #24
 810461c:	46bd      	mov	sp, r7
 810461e:	bd80      	pop	{r7, pc}
 8104620:	fe00e800 	.word	0xfe00e800

08104624 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104624:	b580      	push	{r7, lr}
 8104626:	b088      	sub	sp, #32
 8104628:	af02      	add	r7, sp, #8
 810462a:	60f8      	str	r0, [r7, #12]
 810462c:	4608      	mov	r0, r1
 810462e:	4611      	mov	r1, r2
 8104630:	461a      	mov	r2, r3
 8104632:	4603      	mov	r3, r0
 8104634:	817b      	strh	r3, [r7, #10]
 8104636:	460b      	mov	r3, r1
 8104638:	813b      	strh	r3, [r7, #8]
 810463a:	4613      	mov	r3, r2
 810463c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810463e:	68fb      	ldr	r3, [r7, #12]
 8104640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104644:	b2db      	uxtb	r3, r3
 8104646:	2b20      	cmp	r3, #32
 8104648:	f040 80fd 	bne.w	8104846 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810464c:	6a3b      	ldr	r3, [r7, #32]
 810464e:	2b00      	cmp	r3, #0
 8104650:	d002      	beq.n	8104658 <HAL_I2C_Mem_Read+0x34>
 8104652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104654:	2b00      	cmp	r3, #0
 8104656:	d105      	bne.n	8104664 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810465e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8104660:	2301      	movs	r3, #1
 8104662:	e0f1      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810466a:	2b01      	cmp	r3, #1
 810466c:	d101      	bne.n	8104672 <HAL_I2C_Mem_Read+0x4e>
 810466e:	2302      	movs	r3, #2
 8104670:	e0ea      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
 8104672:	68fb      	ldr	r3, [r7, #12]
 8104674:	2201      	movs	r2, #1
 8104676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810467a:	f7fc febd 	bl	81013f8 <HAL_GetTick>
 810467e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8104680:	697b      	ldr	r3, [r7, #20]
 8104682:	9300      	str	r3, [sp, #0]
 8104684:	2319      	movs	r3, #25
 8104686:	2201      	movs	r2, #1
 8104688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810468c:	68f8      	ldr	r0, [r7, #12]
 810468e:	f000 f9af 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 8104692:	4603      	mov	r3, r0
 8104694:	2b00      	cmp	r3, #0
 8104696:	d001      	beq.n	810469c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8104698:	2301      	movs	r3, #1
 810469a:	e0d5      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810469c:	68fb      	ldr	r3, [r7, #12]
 810469e:	2222      	movs	r2, #34	; 0x22
 81046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81046a4:	68fb      	ldr	r3, [r7, #12]
 81046a6:	2240      	movs	r2, #64	; 0x40
 81046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81046ac:	68fb      	ldr	r3, [r7, #12]
 81046ae:	2200      	movs	r2, #0
 81046b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81046b2:	68fb      	ldr	r3, [r7, #12]
 81046b4:	6a3a      	ldr	r2, [r7, #32]
 81046b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81046bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	2200      	movs	r2, #0
 81046c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81046c4:	88f8      	ldrh	r0, [r7, #6]
 81046c6:	893a      	ldrh	r2, [r7, #8]
 81046c8:	8979      	ldrh	r1, [r7, #10]
 81046ca:	697b      	ldr	r3, [r7, #20]
 81046cc:	9301      	str	r3, [sp, #4]
 81046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81046d0:	9300      	str	r3, [sp, #0]
 81046d2:	4603      	mov	r3, r0
 81046d4:	68f8      	ldr	r0, [r7, #12]
 81046d6:	f000 f913 	bl	8104900 <I2C_RequestMemoryRead>
 81046da:	4603      	mov	r3, r0
 81046dc:	2b00      	cmp	r3, #0
 81046de:	d005      	beq.n	81046ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	2200      	movs	r2, #0
 81046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 81046e8:	2301      	movs	r3, #1
 81046ea:	e0ad      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81046ec:	68fb      	ldr	r3, [r7, #12]
 81046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81046f0:	b29b      	uxth	r3, r3
 81046f2:	2bff      	cmp	r3, #255	; 0xff
 81046f4:	d90e      	bls.n	8104714 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81046f6:	68fb      	ldr	r3, [r7, #12]
 81046f8:	22ff      	movs	r2, #255	; 0xff
 81046fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104700:	b2da      	uxtb	r2, r3
 8104702:	8979      	ldrh	r1, [r7, #10]
 8104704:	4b52      	ldr	r3, [pc, #328]	; (8104850 <HAL_I2C_Mem_Read+0x22c>)
 8104706:	9300      	str	r3, [sp, #0]
 8104708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810470c:	68f8      	ldr	r0, [r7, #12]
 810470e:	f000 fa91 	bl	8104c34 <I2C_TransferConfig>
 8104712:	e00f      	b.n	8104734 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8104714:	68fb      	ldr	r3, [r7, #12]
 8104716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104718:	b29a      	uxth	r2, r3
 810471a:	68fb      	ldr	r3, [r7, #12]
 810471c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810471e:	68fb      	ldr	r3, [r7, #12]
 8104720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104722:	b2da      	uxtb	r2, r3
 8104724:	8979      	ldrh	r1, [r7, #10]
 8104726:	4b4a      	ldr	r3, [pc, #296]	; (8104850 <HAL_I2C_Mem_Read+0x22c>)
 8104728:	9300      	str	r3, [sp, #0]
 810472a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810472e:	68f8      	ldr	r0, [r7, #12]
 8104730:	f000 fa80 	bl	8104c34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8104734:	697b      	ldr	r3, [r7, #20]
 8104736:	9300      	str	r3, [sp, #0]
 8104738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810473a:	2200      	movs	r2, #0
 810473c:	2104      	movs	r1, #4
 810473e:	68f8      	ldr	r0, [r7, #12]
 8104740:	f000 f956 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 8104744:	4603      	mov	r3, r0
 8104746:	2b00      	cmp	r3, #0
 8104748:	d001      	beq.n	810474e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 810474a:	2301      	movs	r3, #1
 810474c:	e07c      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 810474e:	68fb      	ldr	r3, [r7, #12]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104758:	b2d2      	uxtb	r2, r2
 810475a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810475c:	68fb      	ldr	r3, [r7, #12]
 810475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104760:	1c5a      	adds	r2, r3, #1
 8104762:	68fb      	ldr	r3, [r7, #12]
 8104764:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8104766:	68fb      	ldr	r3, [r7, #12]
 8104768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810476a:	3b01      	subs	r3, #1
 810476c:	b29a      	uxth	r2, r3
 810476e:	68fb      	ldr	r3, [r7, #12]
 8104770:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8104772:	68fb      	ldr	r3, [r7, #12]
 8104774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104776:	b29b      	uxth	r3, r3
 8104778:	3b01      	subs	r3, #1
 810477a:	b29a      	uxth	r2, r3
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104784:	b29b      	uxth	r3, r3
 8104786:	2b00      	cmp	r3, #0
 8104788:	d034      	beq.n	81047f4 <HAL_I2C_Mem_Read+0x1d0>
 810478a:	68fb      	ldr	r3, [r7, #12]
 810478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810478e:	2b00      	cmp	r3, #0
 8104790:	d130      	bne.n	81047f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8104792:	697b      	ldr	r3, [r7, #20]
 8104794:	9300      	str	r3, [sp, #0]
 8104796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104798:	2200      	movs	r2, #0
 810479a:	2180      	movs	r1, #128	; 0x80
 810479c:	68f8      	ldr	r0, [r7, #12]
 810479e:	f000 f927 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 81047a2:	4603      	mov	r3, r0
 81047a4:	2b00      	cmp	r3, #0
 81047a6:	d001      	beq.n	81047ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81047a8:	2301      	movs	r3, #1
 81047aa:	e04d      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81047ac:	68fb      	ldr	r3, [r7, #12]
 81047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81047b0:	b29b      	uxth	r3, r3
 81047b2:	2bff      	cmp	r3, #255	; 0xff
 81047b4:	d90e      	bls.n	81047d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	22ff      	movs	r2, #255	; 0xff
 81047ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81047bc:	68fb      	ldr	r3, [r7, #12]
 81047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81047c0:	b2da      	uxtb	r2, r3
 81047c2:	8979      	ldrh	r1, [r7, #10]
 81047c4:	2300      	movs	r3, #0
 81047c6:	9300      	str	r3, [sp, #0]
 81047c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81047cc:	68f8      	ldr	r0, [r7, #12]
 81047ce:	f000 fa31 	bl	8104c34 <I2C_TransferConfig>
 81047d2:	e00f      	b.n	81047f4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81047d4:	68fb      	ldr	r3, [r7, #12]
 81047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81047d8:	b29a      	uxth	r2, r3
 81047da:	68fb      	ldr	r3, [r7, #12]
 81047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81047e2:	b2da      	uxtb	r2, r3
 81047e4:	8979      	ldrh	r1, [r7, #10]
 81047e6:	2300      	movs	r3, #0
 81047e8:	9300      	str	r3, [sp, #0]
 81047ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81047ee:	68f8      	ldr	r0, [r7, #12]
 81047f0:	f000 fa20 	bl	8104c34 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 81047f4:	68fb      	ldr	r3, [r7, #12]
 81047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81047f8:	b29b      	uxth	r3, r3
 81047fa:	2b00      	cmp	r3, #0
 81047fc:	d19a      	bne.n	8104734 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81047fe:	697a      	ldr	r2, [r7, #20]
 8104800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8104802:	68f8      	ldr	r0, [r7, #12]
 8104804:	f000 f974 	bl	8104af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104808:	4603      	mov	r3, r0
 810480a:	2b00      	cmp	r3, #0
 810480c:	d001      	beq.n	8104812 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810480e:	2301      	movs	r3, #1
 8104810:	e01a      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104812:	68fb      	ldr	r3, [r7, #12]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	2220      	movs	r2, #32
 8104818:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	6859      	ldr	r1, [r3, #4]
 8104820:	68fb      	ldr	r3, [r7, #12]
 8104822:	681a      	ldr	r2, [r3, #0]
 8104824:	4b0b      	ldr	r3, [pc, #44]	; (8104854 <HAL_I2C_Mem_Read+0x230>)
 8104826:	400b      	ands	r3, r1
 8104828:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810482a:	68fb      	ldr	r3, [r7, #12]
 810482c:	2220      	movs	r2, #32
 810482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8104832:	68fb      	ldr	r3, [r7, #12]
 8104834:	2200      	movs	r2, #0
 8104836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810483a:	68fb      	ldr	r3, [r7, #12]
 810483c:	2200      	movs	r2, #0
 810483e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104842:	2300      	movs	r3, #0
 8104844:	e000      	b.n	8104848 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8104846:	2302      	movs	r3, #2
  }
}
 8104848:	4618      	mov	r0, r3
 810484a:	3718      	adds	r7, #24
 810484c:	46bd      	mov	sp, r7
 810484e:	bd80      	pop	{r7, pc}
 8104850:	80002400 	.word	0x80002400
 8104854:	fe00e800 	.word	0xfe00e800

08104858 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8104858:	b580      	push	{r7, lr}
 810485a:	b086      	sub	sp, #24
 810485c:	af02      	add	r7, sp, #8
 810485e:	60f8      	str	r0, [r7, #12]
 8104860:	4608      	mov	r0, r1
 8104862:	4611      	mov	r1, r2
 8104864:	461a      	mov	r2, r3
 8104866:	4603      	mov	r3, r0
 8104868:	817b      	strh	r3, [r7, #10]
 810486a:	460b      	mov	r3, r1
 810486c:	813b      	strh	r3, [r7, #8]
 810486e:	4613      	mov	r3, r2
 8104870:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8104872:	88fb      	ldrh	r3, [r7, #6]
 8104874:	b2da      	uxtb	r2, r3
 8104876:	8979      	ldrh	r1, [r7, #10]
 8104878:	4b20      	ldr	r3, [pc, #128]	; (81048fc <I2C_RequestMemoryWrite+0xa4>)
 810487a:	9300      	str	r3, [sp, #0]
 810487c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104880:	68f8      	ldr	r0, [r7, #12]
 8104882:	f000 f9d7 	bl	8104c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104886:	69fa      	ldr	r2, [r7, #28]
 8104888:	69b9      	ldr	r1, [r7, #24]
 810488a:	68f8      	ldr	r0, [r7, #12]
 810488c:	f000 f8f0 	bl	8104a70 <I2C_WaitOnTXISFlagUntilTimeout>
 8104890:	4603      	mov	r3, r0
 8104892:	2b00      	cmp	r3, #0
 8104894:	d001      	beq.n	810489a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8104896:	2301      	movs	r3, #1
 8104898:	e02c      	b.n	81048f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810489a:	88fb      	ldrh	r3, [r7, #6]
 810489c:	2b01      	cmp	r3, #1
 810489e:	d105      	bne.n	81048ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81048a0:	893b      	ldrh	r3, [r7, #8]
 81048a2:	b2da      	uxtb	r2, r3
 81048a4:	68fb      	ldr	r3, [r7, #12]
 81048a6:	681b      	ldr	r3, [r3, #0]
 81048a8:	629a      	str	r2, [r3, #40]	; 0x28
 81048aa:	e015      	b.n	81048d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81048ac:	893b      	ldrh	r3, [r7, #8]
 81048ae:	0a1b      	lsrs	r3, r3, #8
 81048b0:	b29b      	uxth	r3, r3
 81048b2:	b2da      	uxtb	r2, r3
 81048b4:	68fb      	ldr	r3, [r7, #12]
 81048b6:	681b      	ldr	r3, [r3, #0]
 81048b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81048ba:	69fa      	ldr	r2, [r7, #28]
 81048bc:	69b9      	ldr	r1, [r7, #24]
 81048be:	68f8      	ldr	r0, [r7, #12]
 81048c0:	f000 f8d6 	bl	8104a70 <I2C_WaitOnTXISFlagUntilTimeout>
 81048c4:	4603      	mov	r3, r0
 81048c6:	2b00      	cmp	r3, #0
 81048c8:	d001      	beq.n	81048ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81048ca:	2301      	movs	r3, #1
 81048cc:	e012      	b.n	81048f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81048ce:	893b      	ldrh	r3, [r7, #8]
 81048d0:	b2da      	uxtb	r2, r3
 81048d2:	68fb      	ldr	r3, [r7, #12]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81048d8:	69fb      	ldr	r3, [r7, #28]
 81048da:	9300      	str	r3, [sp, #0]
 81048dc:	69bb      	ldr	r3, [r7, #24]
 81048de:	2200      	movs	r2, #0
 81048e0:	2180      	movs	r1, #128	; 0x80
 81048e2:	68f8      	ldr	r0, [r7, #12]
 81048e4:	f000 f884 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 81048e8:	4603      	mov	r3, r0
 81048ea:	2b00      	cmp	r3, #0
 81048ec:	d001      	beq.n	81048f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 81048ee:	2301      	movs	r3, #1
 81048f0:	e000      	b.n	81048f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 81048f2:	2300      	movs	r3, #0
}
 81048f4:	4618      	mov	r0, r3
 81048f6:	3710      	adds	r7, #16
 81048f8:	46bd      	mov	sp, r7
 81048fa:	bd80      	pop	{r7, pc}
 81048fc:	80002000 	.word	0x80002000

08104900 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8104900:	b580      	push	{r7, lr}
 8104902:	b086      	sub	sp, #24
 8104904:	af02      	add	r7, sp, #8
 8104906:	60f8      	str	r0, [r7, #12]
 8104908:	4608      	mov	r0, r1
 810490a:	4611      	mov	r1, r2
 810490c:	461a      	mov	r2, r3
 810490e:	4603      	mov	r3, r0
 8104910:	817b      	strh	r3, [r7, #10]
 8104912:	460b      	mov	r3, r1
 8104914:	813b      	strh	r3, [r7, #8]
 8104916:	4613      	mov	r3, r2
 8104918:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810491a:	88fb      	ldrh	r3, [r7, #6]
 810491c:	b2da      	uxtb	r2, r3
 810491e:	8979      	ldrh	r1, [r7, #10]
 8104920:	4b20      	ldr	r3, [pc, #128]	; (81049a4 <I2C_RequestMemoryRead+0xa4>)
 8104922:	9300      	str	r3, [sp, #0]
 8104924:	2300      	movs	r3, #0
 8104926:	68f8      	ldr	r0, [r7, #12]
 8104928:	f000 f984 	bl	8104c34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810492c:	69fa      	ldr	r2, [r7, #28]
 810492e:	69b9      	ldr	r1, [r7, #24]
 8104930:	68f8      	ldr	r0, [r7, #12]
 8104932:	f000 f89d 	bl	8104a70 <I2C_WaitOnTXISFlagUntilTimeout>
 8104936:	4603      	mov	r3, r0
 8104938:	2b00      	cmp	r3, #0
 810493a:	d001      	beq.n	8104940 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810493c:	2301      	movs	r3, #1
 810493e:	e02c      	b.n	810499a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104940:	88fb      	ldrh	r3, [r7, #6]
 8104942:	2b01      	cmp	r3, #1
 8104944:	d105      	bne.n	8104952 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104946:	893b      	ldrh	r3, [r7, #8]
 8104948:	b2da      	uxtb	r2, r3
 810494a:	68fb      	ldr	r3, [r7, #12]
 810494c:	681b      	ldr	r3, [r3, #0]
 810494e:	629a      	str	r2, [r3, #40]	; 0x28
 8104950:	e015      	b.n	810497e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8104952:	893b      	ldrh	r3, [r7, #8]
 8104954:	0a1b      	lsrs	r3, r3, #8
 8104956:	b29b      	uxth	r3, r3
 8104958:	b2da      	uxtb	r2, r3
 810495a:	68fb      	ldr	r3, [r7, #12]
 810495c:	681b      	ldr	r3, [r3, #0]
 810495e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104960:	69fa      	ldr	r2, [r7, #28]
 8104962:	69b9      	ldr	r1, [r7, #24]
 8104964:	68f8      	ldr	r0, [r7, #12]
 8104966:	f000 f883 	bl	8104a70 <I2C_WaitOnTXISFlagUntilTimeout>
 810496a:	4603      	mov	r3, r0
 810496c:	2b00      	cmp	r3, #0
 810496e:	d001      	beq.n	8104974 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104970:	2301      	movs	r3, #1
 8104972:	e012      	b.n	810499a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8104974:	893b      	ldrh	r3, [r7, #8]
 8104976:	b2da      	uxtb	r2, r3
 8104978:	68fb      	ldr	r3, [r7, #12]
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 810497e:	69fb      	ldr	r3, [r7, #28]
 8104980:	9300      	str	r3, [sp, #0]
 8104982:	69bb      	ldr	r3, [r7, #24]
 8104984:	2200      	movs	r2, #0
 8104986:	2140      	movs	r1, #64	; 0x40
 8104988:	68f8      	ldr	r0, [r7, #12]
 810498a:	f000 f831 	bl	81049f0 <I2C_WaitOnFlagUntilTimeout>
 810498e:	4603      	mov	r3, r0
 8104990:	2b00      	cmp	r3, #0
 8104992:	d001      	beq.n	8104998 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8104994:	2301      	movs	r3, #1
 8104996:	e000      	b.n	810499a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8104998:	2300      	movs	r3, #0
}
 810499a:	4618      	mov	r0, r3
 810499c:	3710      	adds	r7, #16
 810499e:	46bd      	mov	sp, r7
 81049a0:	bd80      	pop	{r7, pc}
 81049a2:	bf00      	nop
 81049a4:	80002000 	.word	0x80002000

081049a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81049a8:	b480      	push	{r7}
 81049aa:	b083      	sub	sp, #12
 81049ac:	af00      	add	r7, sp, #0
 81049ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81049b0:	687b      	ldr	r3, [r7, #4]
 81049b2:	681b      	ldr	r3, [r3, #0]
 81049b4:	699b      	ldr	r3, [r3, #24]
 81049b6:	f003 0302 	and.w	r3, r3, #2
 81049ba:	2b02      	cmp	r3, #2
 81049bc:	d103      	bne.n	81049c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81049be:	687b      	ldr	r3, [r7, #4]
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	2200      	movs	r2, #0
 81049c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	699b      	ldr	r3, [r3, #24]
 81049cc:	f003 0301 	and.w	r3, r3, #1
 81049d0:	2b01      	cmp	r3, #1
 81049d2:	d007      	beq.n	81049e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	699a      	ldr	r2, [r3, #24]
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	681b      	ldr	r3, [r3, #0]
 81049de:	f042 0201 	orr.w	r2, r2, #1
 81049e2:	619a      	str	r2, [r3, #24]
  }
}
 81049e4:	bf00      	nop
 81049e6:	370c      	adds	r7, #12
 81049e8:	46bd      	mov	sp, r7
 81049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049ee:	4770      	bx	lr

081049f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81049f0:	b580      	push	{r7, lr}
 81049f2:	b084      	sub	sp, #16
 81049f4:	af00      	add	r7, sp, #0
 81049f6:	60f8      	str	r0, [r7, #12]
 81049f8:	60b9      	str	r1, [r7, #8]
 81049fa:	603b      	str	r3, [r7, #0]
 81049fc:	4613      	mov	r3, r2
 81049fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104a00:	e022      	b.n	8104a48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104a02:	683b      	ldr	r3, [r7, #0]
 8104a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8104a08:	d01e      	beq.n	8104a48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104a0a:	f7fc fcf5 	bl	81013f8 <HAL_GetTick>
 8104a0e:	4602      	mov	r2, r0
 8104a10:	69bb      	ldr	r3, [r7, #24]
 8104a12:	1ad3      	subs	r3, r2, r3
 8104a14:	683a      	ldr	r2, [r7, #0]
 8104a16:	429a      	cmp	r2, r3
 8104a18:	d302      	bcc.n	8104a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8104a1a:	683b      	ldr	r3, [r7, #0]
 8104a1c:	2b00      	cmp	r3, #0
 8104a1e:	d113      	bne.n	8104a48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104a20:	68fb      	ldr	r3, [r7, #12]
 8104a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a24:	f043 0220 	orr.w	r2, r3, #32
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104a2c:	68fb      	ldr	r3, [r7, #12]
 8104a2e:	2220      	movs	r2, #32
 8104a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104a34:	68fb      	ldr	r3, [r7, #12]
 8104a36:	2200      	movs	r2, #0
 8104a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104a3c:	68fb      	ldr	r3, [r7, #12]
 8104a3e:	2200      	movs	r2, #0
 8104a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8104a44:	2301      	movs	r3, #1
 8104a46:	e00f      	b.n	8104a68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104a48:	68fb      	ldr	r3, [r7, #12]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	699a      	ldr	r2, [r3, #24]
 8104a4e:	68bb      	ldr	r3, [r7, #8]
 8104a50:	4013      	ands	r3, r2
 8104a52:	68ba      	ldr	r2, [r7, #8]
 8104a54:	429a      	cmp	r2, r3
 8104a56:	bf0c      	ite	eq
 8104a58:	2301      	moveq	r3, #1
 8104a5a:	2300      	movne	r3, #0
 8104a5c:	b2db      	uxtb	r3, r3
 8104a5e:	461a      	mov	r2, r3
 8104a60:	79fb      	ldrb	r3, [r7, #7]
 8104a62:	429a      	cmp	r2, r3
 8104a64:	d0cd      	beq.n	8104a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8104a66:	2300      	movs	r3, #0
}
 8104a68:	4618      	mov	r0, r3
 8104a6a:	3710      	adds	r7, #16
 8104a6c:	46bd      	mov	sp, r7
 8104a6e:	bd80      	pop	{r7, pc}

08104a70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104a70:	b580      	push	{r7, lr}
 8104a72:	b084      	sub	sp, #16
 8104a74:	af00      	add	r7, sp, #0
 8104a76:	60f8      	str	r0, [r7, #12]
 8104a78:	60b9      	str	r1, [r7, #8]
 8104a7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104a7c:	e02c      	b.n	8104ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8104a7e:	687a      	ldr	r2, [r7, #4]
 8104a80:	68b9      	ldr	r1, [r7, #8]
 8104a82:	68f8      	ldr	r0, [r7, #12]
 8104a84:	f000 f870 	bl	8104b68 <I2C_IsAcknowledgeFailed>
 8104a88:	4603      	mov	r3, r0
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d001      	beq.n	8104a92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104a8e:	2301      	movs	r3, #1
 8104a90:	e02a      	b.n	8104ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104a92:	68bb      	ldr	r3, [r7, #8]
 8104a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8104a98:	d01e      	beq.n	8104ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104a9a:	f7fc fcad 	bl	81013f8 <HAL_GetTick>
 8104a9e:	4602      	mov	r2, r0
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	1ad3      	subs	r3, r2, r3
 8104aa4:	68ba      	ldr	r2, [r7, #8]
 8104aa6:	429a      	cmp	r2, r3
 8104aa8:	d302      	bcc.n	8104ab0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8104aaa:	68bb      	ldr	r3, [r7, #8]
 8104aac:	2b00      	cmp	r3, #0
 8104aae:	d113      	bne.n	8104ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104ab4:	f043 0220 	orr.w	r2, r3, #32
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8104abc:	68fb      	ldr	r3, [r7, #12]
 8104abe:	2220      	movs	r2, #32
 8104ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	2200      	movs	r2, #0
 8104ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8104acc:	68fb      	ldr	r3, [r7, #12]
 8104ace:	2200      	movs	r2, #0
 8104ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8104ad4:	2301      	movs	r3, #1
 8104ad6:	e007      	b.n	8104ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104ad8:	68fb      	ldr	r3, [r7, #12]
 8104ada:	681b      	ldr	r3, [r3, #0]
 8104adc:	699b      	ldr	r3, [r3, #24]
 8104ade:	f003 0302 	and.w	r3, r3, #2
 8104ae2:	2b02      	cmp	r3, #2
 8104ae4:	d1cb      	bne.n	8104a7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8104ae6:	2300      	movs	r3, #0
}
 8104ae8:	4618      	mov	r0, r3
 8104aea:	3710      	adds	r7, #16
 8104aec:	46bd      	mov	sp, r7
 8104aee:	bd80      	pop	{r7, pc}

08104af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104af0:	b580      	push	{r7, lr}
 8104af2:	b084      	sub	sp, #16
 8104af4:	af00      	add	r7, sp, #0
 8104af6:	60f8      	str	r0, [r7, #12]
 8104af8:	60b9      	str	r1, [r7, #8]
 8104afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104afc:	e028      	b.n	8104b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8104afe:	687a      	ldr	r2, [r7, #4]
 8104b00:	68b9      	ldr	r1, [r7, #8]
 8104b02:	68f8      	ldr	r0, [r7, #12]
 8104b04:	f000 f830 	bl	8104b68 <I2C_IsAcknowledgeFailed>
 8104b08:	4603      	mov	r3, r0
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	d001      	beq.n	8104b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104b0e:	2301      	movs	r3, #1
 8104b10:	e026      	b.n	8104b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104b12:	f7fc fc71 	bl	81013f8 <HAL_GetTick>
 8104b16:	4602      	mov	r2, r0
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	1ad3      	subs	r3, r2, r3
 8104b1c:	68ba      	ldr	r2, [r7, #8]
 8104b1e:	429a      	cmp	r2, r3
 8104b20:	d302      	bcc.n	8104b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8104b22:	68bb      	ldr	r3, [r7, #8]
 8104b24:	2b00      	cmp	r3, #0
 8104b26:	d113      	bne.n	8104b50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104b28:	68fb      	ldr	r3, [r7, #12]
 8104b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104b2c:	f043 0220 	orr.w	r2, r3, #32
 8104b30:	68fb      	ldr	r3, [r7, #12]
 8104b32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8104b34:	68fb      	ldr	r3, [r7, #12]
 8104b36:	2220      	movs	r2, #32
 8104b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8104b3c:	68fb      	ldr	r3, [r7, #12]
 8104b3e:	2200      	movs	r2, #0
 8104b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	2200      	movs	r2, #0
 8104b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8104b4c:	2301      	movs	r3, #1
 8104b4e:	e007      	b.n	8104b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	699b      	ldr	r3, [r3, #24]
 8104b56:	f003 0320 	and.w	r3, r3, #32
 8104b5a:	2b20      	cmp	r3, #32
 8104b5c:	d1cf      	bne.n	8104afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8104b5e:	2300      	movs	r3, #0
}
 8104b60:	4618      	mov	r0, r3
 8104b62:	3710      	adds	r7, #16
 8104b64:	46bd      	mov	sp, r7
 8104b66:	bd80      	pop	{r7, pc}

08104b68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8104b68:	b580      	push	{r7, lr}
 8104b6a:	b084      	sub	sp, #16
 8104b6c:	af00      	add	r7, sp, #0
 8104b6e:	60f8      	str	r0, [r7, #12]
 8104b70:	60b9      	str	r1, [r7, #8]
 8104b72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8104b74:	68fb      	ldr	r3, [r7, #12]
 8104b76:	681b      	ldr	r3, [r3, #0]
 8104b78:	699b      	ldr	r3, [r3, #24]
 8104b7a:	f003 0310 	and.w	r3, r3, #16
 8104b7e:	2b10      	cmp	r3, #16
 8104b80:	d151      	bne.n	8104c26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104b82:	e022      	b.n	8104bca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104b84:	68bb      	ldr	r3, [r7, #8]
 8104b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8104b8a:	d01e      	beq.n	8104bca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104b8c:	f7fc fc34 	bl	81013f8 <HAL_GetTick>
 8104b90:	4602      	mov	r2, r0
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	1ad3      	subs	r3, r2, r3
 8104b96:	68ba      	ldr	r2, [r7, #8]
 8104b98:	429a      	cmp	r2, r3
 8104b9a:	d302      	bcc.n	8104ba2 <I2C_IsAcknowledgeFailed+0x3a>
 8104b9c:	68bb      	ldr	r3, [r7, #8]
 8104b9e:	2b00      	cmp	r3, #0
 8104ba0:	d113      	bne.n	8104bca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104ba2:	68fb      	ldr	r3, [r7, #12]
 8104ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104ba6:	f043 0220 	orr.w	r2, r3, #32
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	2220      	movs	r2, #32
 8104bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8104bb6:	68fb      	ldr	r3, [r7, #12]
 8104bb8:	2200      	movs	r2, #0
 8104bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104bbe:	68fb      	ldr	r3, [r7, #12]
 8104bc0:	2200      	movs	r2, #0
 8104bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8104bc6:	2301      	movs	r3, #1
 8104bc8:	e02e      	b.n	8104c28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104bca:	68fb      	ldr	r3, [r7, #12]
 8104bcc:	681b      	ldr	r3, [r3, #0]
 8104bce:	699b      	ldr	r3, [r3, #24]
 8104bd0:	f003 0320 	and.w	r3, r3, #32
 8104bd4:	2b20      	cmp	r3, #32
 8104bd6:	d1d5      	bne.n	8104b84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8104bd8:	68fb      	ldr	r3, [r7, #12]
 8104bda:	681b      	ldr	r3, [r3, #0]
 8104bdc:	2210      	movs	r2, #16
 8104bde:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8104be0:	68fb      	ldr	r3, [r7, #12]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	2220      	movs	r2, #32
 8104be6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104be8:	68f8      	ldr	r0, [r7, #12]
 8104bea:	f7ff fedd 	bl	81049a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104bee:	68fb      	ldr	r3, [r7, #12]
 8104bf0:	681b      	ldr	r3, [r3, #0]
 8104bf2:	6859      	ldr	r1, [r3, #4]
 8104bf4:	68fb      	ldr	r3, [r7, #12]
 8104bf6:	681a      	ldr	r2, [r3, #0]
 8104bf8:	4b0d      	ldr	r3, [pc, #52]	; (8104c30 <I2C_IsAcknowledgeFailed+0xc8>)
 8104bfa:	400b      	ands	r3, r1
 8104bfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104c02:	f043 0204 	orr.w	r2, r3, #4
 8104c06:	68fb      	ldr	r3, [r7, #12]
 8104c08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104c0a:	68fb      	ldr	r3, [r7, #12]
 8104c0c:	2220      	movs	r2, #32
 8104c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8104c12:	68fb      	ldr	r3, [r7, #12]
 8104c14:	2200      	movs	r2, #0
 8104c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	2200      	movs	r2, #0
 8104c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8104c22:	2301      	movs	r3, #1
 8104c24:	e000      	b.n	8104c28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8104c26:	2300      	movs	r3, #0
}
 8104c28:	4618      	mov	r0, r3
 8104c2a:	3710      	adds	r7, #16
 8104c2c:	46bd      	mov	sp, r7
 8104c2e:	bd80      	pop	{r7, pc}
 8104c30:	fe00e800 	.word	0xfe00e800

08104c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104c34:	b480      	push	{r7}
 8104c36:	b085      	sub	sp, #20
 8104c38:	af00      	add	r7, sp, #0
 8104c3a:	60f8      	str	r0, [r7, #12]
 8104c3c:	607b      	str	r3, [r7, #4]
 8104c3e:	460b      	mov	r3, r1
 8104c40:	817b      	strh	r3, [r7, #10]
 8104c42:	4613      	mov	r3, r2
 8104c44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8104c46:	68fb      	ldr	r3, [r7, #12]
 8104c48:	681b      	ldr	r3, [r3, #0]
 8104c4a:	685a      	ldr	r2, [r3, #4]
 8104c4c:	69bb      	ldr	r3, [r7, #24]
 8104c4e:	0d5b      	lsrs	r3, r3, #21
 8104c50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8104c54:	4b0d      	ldr	r3, [pc, #52]	; (8104c8c <I2C_TransferConfig+0x58>)
 8104c56:	430b      	orrs	r3, r1
 8104c58:	43db      	mvns	r3, r3
 8104c5a:	ea02 0103 	and.w	r1, r2, r3
 8104c5e:	897b      	ldrh	r3, [r7, #10]
 8104c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8104c64:	7a7b      	ldrb	r3, [r7, #9]
 8104c66:	041b      	lsls	r3, r3, #16
 8104c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8104c6c:	431a      	orrs	r2, r3
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	431a      	orrs	r2, r3
 8104c72:	69bb      	ldr	r3, [r7, #24]
 8104c74:	431a      	orrs	r2, r3
 8104c76:	68fb      	ldr	r3, [r7, #12]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	430a      	orrs	r2, r1
 8104c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8104c7e:	bf00      	nop
 8104c80:	3714      	adds	r7, #20
 8104c82:	46bd      	mov	sp, r7
 8104c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c88:	4770      	bx	lr
 8104c8a:	bf00      	nop
 8104c8c:	03ff63ff 	.word	0x03ff63ff

08104c90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8104c90:	b580      	push	{r7, lr}
 8104c92:	b084      	sub	sp, #16
 8104c94:	af00      	add	r7, sp, #0
 8104c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	2b00      	cmp	r3, #0
 8104c9c:	d101      	bne.n	8104ca2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8104c9e:	2301      	movs	r3, #1
 8104ca0:	e0bf      	b.n	8104e22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8104ca2:	687b      	ldr	r3, [r7, #4]
 8104ca4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8104ca8:	b2db      	uxtb	r3, r3
 8104caa:	2b00      	cmp	r3, #0
 8104cac:	d106      	bne.n	8104cbc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	2200      	movs	r2, #0
 8104cb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8104cb6:	6878      	ldr	r0, [r7, #4]
 8104cb8:	f7fc f808 	bl	8100ccc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	2202      	movs	r2, #2
 8104cc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	699a      	ldr	r2, [r3, #24]
 8104cca:	687b      	ldr	r3, [r7, #4]
 8104ccc:	681b      	ldr	r3, [r3, #0]
 8104cce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8104cd2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8104cd4:	687b      	ldr	r3, [r7, #4]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	6999      	ldr	r1, [r3, #24]
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	685a      	ldr	r2, [r3, #4]
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	689b      	ldr	r3, [r3, #8]
 8104ce2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8104ce8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	691b      	ldr	r3, [r3, #16]
 8104cee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8104cf0:	687b      	ldr	r3, [r7, #4]
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	430a      	orrs	r2, r1
 8104cf6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	6899      	ldr	r1, [r3, #8]
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	681a      	ldr	r2, [r3, #0]
 8104d02:	4b4a      	ldr	r3, [pc, #296]	; (8104e2c <HAL_LTDC_Init+0x19c>)
 8104d04:	400b      	ands	r3, r1
 8104d06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8104d08:	687b      	ldr	r3, [r7, #4]
 8104d0a:	695b      	ldr	r3, [r3, #20]
 8104d0c:	041b      	lsls	r3, r3, #16
 8104d0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	6899      	ldr	r1, [r3, #8]
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	699a      	ldr	r2, [r3, #24]
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	431a      	orrs	r2, r3
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	430a      	orrs	r2, r1
 8104d24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8104d26:	687b      	ldr	r3, [r7, #4]
 8104d28:	681b      	ldr	r3, [r3, #0]
 8104d2a:	68d9      	ldr	r1, [r3, #12]
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	681a      	ldr	r2, [r3, #0]
 8104d30:	4b3e      	ldr	r3, [pc, #248]	; (8104e2c <HAL_LTDC_Init+0x19c>)
 8104d32:	400b      	ands	r3, r1
 8104d34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8104d36:	687b      	ldr	r3, [r7, #4]
 8104d38:	69db      	ldr	r3, [r3, #28]
 8104d3a:	041b      	lsls	r3, r3, #16
 8104d3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8104d3e:	687b      	ldr	r3, [r7, #4]
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	68d9      	ldr	r1, [r3, #12]
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	6a1a      	ldr	r2, [r3, #32]
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	431a      	orrs	r2, r3
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	430a      	orrs	r2, r1
 8104d52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	6919      	ldr	r1, [r3, #16]
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	681a      	ldr	r2, [r3, #0]
 8104d5e:	4b33      	ldr	r3, [pc, #204]	; (8104e2c <HAL_LTDC_Init+0x19c>)
 8104d60:	400b      	ands	r3, r1
 8104d62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d68:	041b      	lsls	r3, r3, #16
 8104d6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	681b      	ldr	r3, [r3, #0]
 8104d70:	6919      	ldr	r1, [r3, #16]
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8104d76:	68fb      	ldr	r3, [r7, #12]
 8104d78:	431a      	orrs	r2, r3
 8104d7a:	687b      	ldr	r3, [r7, #4]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	430a      	orrs	r2, r1
 8104d80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8104d82:	687b      	ldr	r3, [r7, #4]
 8104d84:	681b      	ldr	r3, [r3, #0]
 8104d86:	6959      	ldr	r1, [r3, #20]
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	681a      	ldr	r2, [r3, #0]
 8104d8c:	4b27      	ldr	r3, [pc, #156]	; (8104e2c <HAL_LTDC_Init+0x19c>)
 8104d8e:	400b      	ands	r3, r1
 8104d90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d96:	041b      	lsls	r3, r3, #16
 8104d98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	6959      	ldr	r1, [r3, #20]
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	431a      	orrs	r2, r3
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	430a      	orrs	r2, r1
 8104dae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8104db0:	687b      	ldr	r3, [r7, #4]
 8104db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104db6:	021b      	lsls	r3, r3, #8
 8104db8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8104dc0:	041b      	lsls	r3, r3, #16
 8104dc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8104dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8104dda:	68ba      	ldr	r2, [r7, #8]
 8104ddc:	68fb      	ldr	r3, [r7, #12]
 8104dde:	4313      	orrs	r3, r2
 8104de0:	687a      	ldr	r2, [r7, #4]
 8104de2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8104de6:	431a      	orrs	r2, r3
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	430a      	orrs	r2, r1
 8104dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8104df0:	687b      	ldr	r3, [r7, #4]
 8104df2:	681b      	ldr	r3, [r3, #0]
 8104df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	681b      	ldr	r3, [r3, #0]
 8104dfa:	f042 0206 	orr.w	r2, r2, #6
 8104dfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	699a      	ldr	r2, [r3, #24]
 8104e06:	687b      	ldr	r3, [r7, #4]
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	f042 0201 	orr.w	r2, r2, #1
 8104e0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	2200      	movs	r2, #0
 8104e14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	2201      	movs	r2, #1
 8104e1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8104e20:	2300      	movs	r3, #0
}
 8104e22:	4618      	mov	r0, r3
 8104e24:	3710      	adds	r7, #16
 8104e26:	46bd      	mov	sp, r7
 8104e28:	bd80      	pop	{r7, pc}
 8104e2a:	bf00      	nop
 8104e2c:	f000f800 	.word	0xf000f800

08104e30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8104e30:	b5b0      	push	{r4, r5, r7, lr}
 8104e32:	b084      	sub	sp, #16
 8104e34:	af00      	add	r7, sp, #0
 8104e36:	60f8      	str	r0, [r7, #12]
 8104e38:	60b9      	str	r1, [r7, #8]
 8104e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8104e42:	2b01      	cmp	r3, #1
 8104e44:	d101      	bne.n	8104e4a <HAL_LTDC_ConfigLayer+0x1a>
 8104e46:	2302      	movs	r3, #2
 8104e48:	e02c      	b.n	8104ea4 <HAL_LTDC_ConfigLayer+0x74>
 8104e4a:	68fb      	ldr	r3, [r7, #12]
 8104e4c:	2201      	movs	r2, #1
 8104e4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8104e52:	68fb      	ldr	r3, [r7, #12]
 8104e54:	2202      	movs	r2, #2
 8104e56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8104e5a:	68fa      	ldr	r2, [r7, #12]
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	2134      	movs	r1, #52	; 0x34
 8104e60:	fb01 f303 	mul.w	r3, r1, r3
 8104e64:	4413      	add	r3, r2
 8104e66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8104e6a:	68bb      	ldr	r3, [r7, #8]
 8104e6c:	4614      	mov	r4, r2
 8104e6e:	461d      	mov	r5, r3
 8104e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104e7c:	682b      	ldr	r3, [r5, #0]
 8104e7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8104e80:	687a      	ldr	r2, [r7, #4]
 8104e82:	68b9      	ldr	r1, [r7, #8]
 8104e84:	68f8      	ldr	r0, [r7, #12]
 8104e86:	f000 f811 	bl	8104eac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8104e8a:	68fb      	ldr	r3, [r7, #12]
 8104e8c:	681b      	ldr	r3, [r3, #0]
 8104e8e:	2201      	movs	r2, #1
 8104e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8104e92:	68fb      	ldr	r3, [r7, #12]
 8104e94:	2201      	movs	r2, #1
 8104e96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8104e9a:	68fb      	ldr	r3, [r7, #12]
 8104e9c:	2200      	movs	r2, #0
 8104e9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8104ea2:	2300      	movs	r3, #0
}
 8104ea4:	4618      	mov	r0, r3
 8104ea6:	3710      	adds	r7, #16
 8104ea8:	46bd      	mov	sp, r7
 8104eaa:	bdb0      	pop	{r4, r5, r7, pc}

08104eac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8104eac:	b480      	push	{r7}
 8104eae:	b089      	sub	sp, #36	; 0x24
 8104eb0:	af00      	add	r7, sp, #0
 8104eb2:	60f8      	str	r0, [r7, #12]
 8104eb4:	60b9      	str	r1, [r7, #8]
 8104eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8104eb8:	68bb      	ldr	r3, [r7, #8]
 8104eba:	685a      	ldr	r2, [r3, #4]
 8104ebc:	68fb      	ldr	r3, [r7, #12]
 8104ebe:	681b      	ldr	r3, [r3, #0]
 8104ec0:	68db      	ldr	r3, [r3, #12]
 8104ec2:	0c1b      	lsrs	r3, r3, #16
 8104ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104ec8:	4413      	add	r3, r2
 8104eca:	041b      	lsls	r3, r3, #16
 8104ecc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8104ece:	68fb      	ldr	r3, [r7, #12]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	461a      	mov	r2, r3
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	01db      	lsls	r3, r3, #7
 8104ed8:	4413      	add	r3, r2
 8104eda:	3384      	adds	r3, #132	; 0x84
 8104edc:	685b      	ldr	r3, [r3, #4]
 8104ede:	68fa      	ldr	r2, [r7, #12]
 8104ee0:	6812      	ldr	r2, [r2, #0]
 8104ee2:	4611      	mov	r1, r2
 8104ee4:	687a      	ldr	r2, [r7, #4]
 8104ee6:	01d2      	lsls	r2, r2, #7
 8104ee8:	440a      	add	r2, r1
 8104eea:	3284      	adds	r2, #132	; 0x84
 8104eec:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8104ef0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8104ef2:	68bb      	ldr	r3, [r7, #8]
 8104ef4:	681a      	ldr	r2, [r3, #0]
 8104ef6:	68fb      	ldr	r3, [r7, #12]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	68db      	ldr	r3, [r3, #12]
 8104efc:	0c1b      	lsrs	r3, r3, #16
 8104efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104f02:	4413      	add	r3, r2
 8104f04:	1c5a      	adds	r2, r3, #1
 8104f06:	68fb      	ldr	r3, [r7, #12]
 8104f08:	681b      	ldr	r3, [r3, #0]
 8104f0a:	4619      	mov	r1, r3
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	01db      	lsls	r3, r3, #7
 8104f10:	440b      	add	r3, r1
 8104f12:	3384      	adds	r3, #132	; 0x84
 8104f14:	4619      	mov	r1, r3
 8104f16:	69fb      	ldr	r3, [r7, #28]
 8104f18:	4313      	orrs	r3, r2
 8104f1a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8104f1c:	68bb      	ldr	r3, [r7, #8]
 8104f1e:	68da      	ldr	r2, [r3, #12]
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	681b      	ldr	r3, [r3, #0]
 8104f24:	68db      	ldr	r3, [r3, #12]
 8104f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8104f2a:	4413      	add	r3, r2
 8104f2c:	041b      	lsls	r3, r3, #16
 8104f2e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	461a      	mov	r2, r3
 8104f36:	687b      	ldr	r3, [r7, #4]
 8104f38:	01db      	lsls	r3, r3, #7
 8104f3a:	4413      	add	r3, r2
 8104f3c:	3384      	adds	r3, #132	; 0x84
 8104f3e:	689b      	ldr	r3, [r3, #8]
 8104f40:	68fa      	ldr	r2, [r7, #12]
 8104f42:	6812      	ldr	r2, [r2, #0]
 8104f44:	4611      	mov	r1, r2
 8104f46:	687a      	ldr	r2, [r7, #4]
 8104f48:	01d2      	lsls	r2, r2, #7
 8104f4a:	440a      	add	r2, r1
 8104f4c:	3284      	adds	r2, #132	; 0x84
 8104f4e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8104f52:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8104f54:	68bb      	ldr	r3, [r7, #8]
 8104f56:	689a      	ldr	r2, [r3, #8]
 8104f58:	68fb      	ldr	r3, [r7, #12]
 8104f5a:	681b      	ldr	r3, [r3, #0]
 8104f5c:	68db      	ldr	r3, [r3, #12]
 8104f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8104f62:	4413      	add	r3, r2
 8104f64:	1c5a      	adds	r2, r3, #1
 8104f66:	68fb      	ldr	r3, [r7, #12]
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	4619      	mov	r1, r3
 8104f6c:	687b      	ldr	r3, [r7, #4]
 8104f6e:	01db      	lsls	r3, r3, #7
 8104f70:	440b      	add	r3, r1
 8104f72:	3384      	adds	r3, #132	; 0x84
 8104f74:	4619      	mov	r1, r3
 8104f76:	69fb      	ldr	r3, [r7, #28]
 8104f78:	4313      	orrs	r3, r2
 8104f7a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	681b      	ldr	r3, [r3, #0]
 8104f80:	461a      	mov	r2, r3
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	01db      	lsls	r3, r3, #7
 8104f86:	4413      	add	r3, r2
 8104f88:	3384      	adds	r3, #132	; 0x84
 8104f8a:	691b      	ldr	r3, [r3, #16]
 8104f8c:	68fa      	ldr	r2, [r7, #12]
 8104f8e:	6812      	ldr	r2, [r2, #0]
 8104f90:	4611      	mov	r1, r2
 8104f92:	687a      	ldr	r2, [r7, #4]
 8104f94:	01d2      	lsls	r2, r2, #7
 8104f96:	440a      	add	r2, r1
 8104f98:	3284      	adds	r2, #132	; 0x84
 8104f9a:	f023 0307 	bic.w	r3, r3, #7
 8104f9e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8104fa0:	68fb      	ldr	r3, [r7, #12]
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	461a      	mov	r2, r3
 8104fa6:	687b      	ldr	r3, [r7, #4]
 8104fa8:	01db      	lsls	r3, r3, #7
 8104faa:	4413      	add	r3, r2
 8104fac:	3384      	adds	r3, #132	; 0x84
 8104fae:	461a      	mov	r2, r3
 8104fb0:	68bb      	ldr	r3, [r7, #8]
 8104fb2:	691b      	ldr	r3, [r3, #16]
 8104fb4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8104fb6:	68bb      	ldr	r3, [r7, #8]
 8104fb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8104fbc:	021b      	lsls	r3, r3, #8
 8104fbe:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8104fc0:	68bb      	ldr	r3, [r7, #8]
 8104fc2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8104fc6:	041b      	lsls	r3, r3, #16
 8104fc8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8104fca:	68bb      	ldr	r3, [r7, #8]
 8104fcc:	699b      	ldr	r3, [r3, #24]
 8104fce:	061b      	lsls	r3, r3, #24
 8104fd0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8104fd2:	68fb      	ldr	r3, [r7, #12]
 8104fd4:	681b      	ldr	r3, [r3, #0]
 8104fd6:	461a      	mov	r2, r3
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	01db      	lsls	r3, r3, #7
 8104fdc:	4413      	add	r3, r2
 8104fde:	3384      	adds	r3, #132	; 0x84
 8104fe0:	699b      	ldr	r3, [r3, #24]
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	681b      	ldr	r3, [r3, #0]
 8104fe6:	461a      	mov	r2, r3
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	01db      	lsls	r3, r3, #7
 8104fec:	4413      	add	r3, r2
 8104fee:	3384      	adds	r3, #132	; 0x84
 8104ff0:	461a      	mov	r2, r3
 8104ff2:	2300      	movs	r3, #0
 8104ff4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8104ff6:	68bb      	ldr	r3, [r7, #8]
 8104ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8104ffc:	461a      	mov	r2, r3
 8104ffe:	69fb      	ldr	r3, [r7, #28]
 8105000:	431a      	orrs	r2, r3
 8105002:	69bb      	ldr	r3, [r7, #24]
 8105004:	431a      	orrs	r2, r3
 8105006:	68fb      	ldr	r3, [r7, #12]
 8105008:	681b      	ldr	r3, [r3, #0]
 810500a:	4619      	mov	r1, r3
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	01db      	lsls	r3, r3, #7
 8105010:	440b      	add	r3, r1
 8105012:	3384      	adds	r3, #132	; 0x84
 8105014:	4619      	mov	r1, r3
 8105016:	697b      	ldr	r3, [r7, #20]
 8105018:	4313      	orrs	r3, r2
 810501a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 810501c:	68fb      	ldr	r3, [r7, #12]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	461a      	mov	r2, r3
 8105022:	687b      	ldr	r3, [r7, #4]
 8105024:	01db      	lsls	r3, r3, #7
 8105026:	4413      	add	r3, r2
 8105028:	3384      	adds	r3, #132	; 0x84
 810502a:	695b      	ldr	r3, [r3, #20]
 810502c:	68fa      	ldr	r2, [r7, #12]
 810502e:	6812      	ldr	r2, [r2, #0]
 8105030:	4611      	mov	r1, r2
 8105032:	687a      	ldr	r2, [r7, #4]
 8105034:	01d2      	lsls	r2, r2, #7
 8105036:	440a      	add	r2, r1
 8105038:	3284      	adds	r2, #132	; 0x84
 810503a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810503e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8105040:	68fb      	ldr	r3, [r7, #12]
 8105042:	681b      	ldr	r3, [r3, #0]
 8105044:	461a      	mov	r2, r3
 8105046:	687b      	ldr	r3, [r7, #4]
 8105048:	01db      	lsls	r3, r3, #7
 810504a:	4413      	add	r3, r2
 810504c:	3384      	adds	r3, #132	; 0x84
 810504e:	461a      	mov	r2, r3
 8105050:	68bb      	ldr	r3, [r7, #8]
 8105052:	695b      	ldr	r3, [r3, #20]
 8105054:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8105056:	68fb      	ldr	r3, [r7, #12]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	461a      	mov	r2, r3
 810505c:	687b      	ldr	r3, [r7, #4]
 810505e:	01db      	lsls	r3, r3, #7
 8105060:	4413      	add	r3, r2
 8105062:	3384      	adds	r3, #132	; 0x84
 8105064:	69db      	ldr	r3, [r3, #28]
 8105066:	68fa      	ldr	r2, [r7, #12]
 8105068:	6812      	ldr	r2, [r2, #0]
 810506a:	4611      	mov	r1, r2
 810506c:	687a      	ldr	r2, [r7, #4]
 810506e:	01d2      	lsls	r2, r2, #7
 8105070:	440a      	add	r2, r1
 8105072:	3284      	adds	r2, #132	; 0x84
 8105074:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8105078:	f023 0307 	bic.w	r3, r3, #7
 810507c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 810507e:	68bb      	ldr	r3, [r7, #8]
 8105080:	69da      	ldr	r2, [r3, #28]
 8105082:	68bb      	ldr	r3, [r7, #8]
 8105084:	6a1b      	ldr	r3, [r3, #32]
 8105086:	68f9      	ldr	r1, [r7, #12]
 8105088:	6809      	ldr	r1, [r1, #0]
 810508a:	4608      	mov	r0, r1
 810508c:	6879      	ldr	r1, [r7, #4]
 810508e:	01c9      	lsls	r1, r1, #7
 8105090:	4401      	add	r1, r0
 8105092:	3184      	adds	r1, #132	; 0x84
 8105094:	4313      	orrs	r3, r2
 8105096:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8105098:	68fb      	ldr	r3, [r7, #12]
 810509a:	681b      	ldr	r3, [r3, #0]
 810509c:	461a      	mov	r2, r3
 810509e:	687b      	ldr	r3, [r7, #4]
 81050a0:	01db      	lsls	r3, r3, #7
 81050a2:	4413      	add	r3, r2
 81050a4:	3384      	adds	r3, #132	; 0x84
 81050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050a8:	68fb      	ldr	r3, [r7, #12]
 81050aa:	681b      	ldr	r3, [r3, #0]
 81050ac:	461a      	mov	r2, r3
 81050ae:	687b      	ldr	r3, [r7, #4]
 81050b0:	01db      	lsls	r3, r3, #7
 81050b2:	4413      	add	r3, r2
 81050b4:	3384      	adds	r3, #132	; 0x84
 81050b6:	461a      	mov	r2, r3
 81050b8:	2300      	movs	r3, #0
 81050ba:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 81050bc:	68fb      	ldr	r3, [r7, #12]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	461a      	mov	r2, r3
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	01db      	lsls	r3, r3, #7
 81050c6:	4413      	add	r3, r2
 81050c8:	3384      	adds	r3, #132	; 0x84
 81050ca:	461a      	mov	r2, r3
 81050cc:	68bb      	ldr	r3, [r7, #8]
 81050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050d0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 81050d2:	68bb      	ldr	r3, [r7, #8]
 81050d4:	691b      	ldr	r3, [r3, #16]
 81050d6:	2b00      	cmp	r3, #0
 81050d8:	d102      	bne.n	81050e0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 81050da:	2304      	movs	r3, #4
 81050dc:	61fb      	str	r3, [r7, #28]
 81050de:	e01b      	b.n	8105118 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 81050e0:	68bb      	ldr	r3, [r7, #8]
 81050e2:	691b      	ldr	r3, [r3, #16]
 81050e4:	2b01      	cmp	r3, #1
 81050e6:	d102      	bne.n	81050ee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 81050e8:	2303      	movs	r3, #3
 81050ea:	61fb      	str	r3, [r7, #28]
 81050ec:	e014      	b.n	8105118 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 81050ee:	68bb      	ldr	r3, [r7, #8]
 81050f0:	691b      	ldr	r3, [r3, #16]
 81050f2:	2b04      	cmp	r3, #4
 81050f4:	d00b      	beq.n	810510e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 81050f6:	68bb      	ldr	r3, [r7, #8]
 81050f8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 81050fa:	2b02      	cmp	r3, #2
 81050fc:	d007      	beq.n	810510e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 81050fe:	68bb      	ldr	r3, [r7, #8]
 8105100:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8105102:	2b03      	cmp	r3, #3
 8105104:	d003      	beq.n	810510e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8105106:	68bb      	ldr	r3, [r7, #8]
 8105108:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 810510a:	2b07      	cmp	r3, #7
 810510c:	d102      	bne.n	8105114 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 810510e:	2302      	movs	r3, #2
 8105110:	61fb      	str	r3, [r7, #28]
 8105112:	e001      	b.n	8105118 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8105114:	2301      	movs	r3, #1
 8105116:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8105118:	68fb      	ldr	r3, [r7, #12]
 810511a:	681b      	ldr	r3, [r3, #0]
 810511c:	461a      	mov	r2, r3
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	01db      	lsls	r3, r3, #7
 8105122:	4413      	add	r3, r2
 8105124:	3384      	adds	r3, #132	; 0x84
 8105126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105128:	68fa      	ldr	r2, [r7, #12]
 810512a:	6812      	ldr	r2, [r2, #0]
 810512c:	4611      	mov	r1, r2
 810512e:	687a      	ldr	r2, [r7, #4]
 8105130:	01d2      	lsls	r2, r2, #7
 8105132:	440a      	add	r2, r1
 8105134:	3284      	adds	r2, #132	; 0x84
 8105136:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 810513a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 810513c:	68bb      	ldr	r3, [r7, #8]
 810513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105140:	69fa      	ldr	r2, [r7, #28]
 8105142:	fb02 f303 	mul.w	r3, r2, r3
 8105146:	041a      	lsls	r2, r3, #16
 8105148:	68bb      	ldr	r3, [r7, #8]
 810514a:	6859      	ldr	r1, [r3, #4]
 810514c:	68bb      	ldr	r3, [r7, #8]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	1acb      	subs	r3, r1, r3
 8105152:	69f9      	ldr	r1, [r7, #28]
 8105154:	fb01 f303 	mul.w	r3, r1, r3
 8105158:	3307      	adds	r3, #7
 810515a:	68f9      	ldr	r1, [r7, #12]
 810515c:	6809      	ldr	r1, [r1, #0]
 810515e:	4608      	mov	r0, r1
 8105160:	6879      	ldr	r1, [r7, #4]
 8105162:	01c9      	lsls	r1, r1, #7
 8105164:	4401      	add	r1, r0
 8105166:	3184      	adds	r1, #132	; 0x84
 8105168:	4313      	orrs	r3, r2
 810516a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 810516c:	68fb      	ldr	r3, [r7, #12]
 810516e:	681b      	ldr	r3, [r3, #0]
 8105170:	461a      	mov	r2, r3
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	01db      	lsls	r3, r3, #7
 8105176:	4413      	add	r3, r2
 8105178:	3384      	adds	r3, #132	; 0x84
 810517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810517c:	68fa      	ldr	r2, [r7, #12]
 810517e:	6812      	ldr	r2, [r2, #0]
 8105180:	4611      	mov	r1, r2
 8105182:	687a      	ldr	r2, [r7, #4]
 8105184:	01d2      	lsls	r2, r2, #7
 8105186:	440a      	add	r2, r1
 8105188:	3284      	adds	r2, #132	; 0x84
 810518a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 810518e:	f023 0307 	bic.w	r3, r3, #7
 8105192:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8105194:	68fb      	ldr	r3, [r7, #12]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	461a      	mov	r2, r3
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	01db      	lsls	r3, r3, #7
 810519e:	4413      	add	r3, r2
 81051a0:	3384      	adds	r3, #132	; 0x84
 81051a2:	461a      	mov	r2, r3
 81051a4:	68bb      	ldr	r3, [r7, #8]
 81051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 81051aa:	68fb      	ldr	r3, [r7, #12]
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	461a      	mov	r2, r3
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	01db      	lsls	r3, r3, #7
 81051b4:	4413      	add	r3, r2
 81051b6:	3384      	adds	r3, #132	; 0x84
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	68fa      	ldr	r2, [r7, #12]
 81051bc:	6812      	ldr	r2, [r2, #0]
 81051be:	4611      	mov	r1, r2
 81051c0:	687a      	ldr	r2, [r7, #4]
 81051c2:	01d2      	lsls	r2, r2, #7
 81051c4:	440a      	add	r2, r1
 81051c6:	3284      	adds	r2, #132	; 0x84
 81051c8:	f043 0301 	orr.w	r3, r3, #1
 81051cc:	6013      	str	r3, [r2, #0]
}
 81051ce:	bf00      	nop
 81051d0:	3724      	adds	r7, #36	; 0x24
 81051d2:	46bd      	mov	sp, r7
 81051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d8:	4770      	bx	lr
	...

081051dc <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 81051dc:	b580      	push	{r7, lr}
 81051de:	b086      	sub	sp, #24
 81051e0:	af00      	add	r7, sp, #0
 81051e2:	60f8      	str	r0, [r7, #12]
 81051e4:	60b9      	str	r1, [r7, #8]
 81051e6:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 81051e8:	68fb      	ldr	r3, [r7, #12]
 81051ea:	2b00      	cmp	r3, #0
 81051ec:	d101      	bne.n	81051f2 <HAL_NOR_Init+0x16>
  {
    return HAL_ERROR;
 81051ee:	2301      	movs	r3, #1
 81051f0:	e083      	b.n	81052fa <HAL_NOR_Init+0x11e>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 81051f2:	68fb      	ldr	r3, [r7, #12]
 81051f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81051f8:	b2db      	uxtb	r3, r3
 81051fa:	2b00      	cmp	r3, #0
 81051fc:	d106      	bne.n	810520c <HAL_NOR_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 81051fe:	68fb      	ldr	r3, [r7, #12]
 8105200:	2200      	movs	r2, #0
 8105202:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8105206:	68f8      	ldr	r0, [r7, #12]
 8105208:	f7fb ffa6 	bl	8101158 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 810520c:	68fb      	ldr	r3, [r7, #12]
 810520e:	681a      	ldr	r2, [r3, #0]
 8105210:	68fb      	ldr	r3, [r7, #12]
 8105212:	3308      	adds	r3, #8
 8105214:	4619      	mov	r1, r3
 8105216:	4610      	mov	r0, r2
 8105218:	f004 fb4a 	bl	81098b0 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 810521c:	68fb      	ldr	r3, [r7, #12]
 810521e:	6818      	ldr	r0, [r3, #0]
 8105220:	68fb      	ldr	r3, [r7, #12]
 8105222:	689b      	ldr	r3, [r3, #8]
 8105224:	461a      	mov	r2, r3
 8105226:	68b9      	ldr	r1, [r7, #8]
 8105228:	f004 fbd2 	bl	81099d0 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 810522c:	68fb      	ldr	r3, [r7, #12]
 810522e:	6858      	ldr	r0, [r3, #4]
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	689a      	ldr	r2, [r3, #8]
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105238:	6879      	ldr	r1, [r7, #4]
 810523a:	f004 fc19 	bl	8109a70 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 810523e:	68fb      	ldr	r3, [r7, #12]
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	68fa      	ldr	r2, [r7, #12]
 8105244:	6892      	ldr	r2, [r2, #8]
 8105246:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810524a:	68fb      	ldr	r3, [r7, #12]
 810524c:	681b      	ldr	r3, [r3, #0]
 810524e:	68fa      	ldr	r2, [r7, #12]
 8105250:	6892      	ldr	r2, [r2, #8]
 8105252:	f041 0101 	orr.w	r1, r1, #1
 8105256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 810525a:	68fb      	ldr	r3, [r7, #12]
 810525c:	695b      	ldr	r3, [r3, #20]
 810525e:	2b00      	cmp	r3, #0
 8105260:	d103      	bne.n	810526a <HAL_NOR_Init+0x8e>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8105262:	4b28      	ldr	r3, [pc, #160]	; (8105304 <HAL_NOR_Init+0x128>)
 8105264:	2200      	movs	r2, #0
 8105266:	601a      	str	r2, [r3, #0]
 8105268:	e002      	b.n	8105270 <HAL_NOR_Init+0x94>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 810526a:	4b26      	ldr	r3, [pc, #152]	; (8105304 <HAL_NOR_Init+0x128>)
 810526c:	2201      	movs	r2, #1
 810526e:	601a      	str	r2, [r3, #0]
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8105270:	4b25      	ldr	r3, [pc, #148]	; (8105308 <HAL_NOR_Init+0x12c>)
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	4a24      	ldr	r2, [pc, #144]	; (8105308 <HAL_NOR_Init+0x12c>)
 8105276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810527a:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 810527c:	68fb      	ldr	r3, [r7, #12]
 810527e:	2201      	movs	r2, #1
 8105280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8105284:	68fb      	ldr	r3, [r7, #12]
 8105286:	689b      	ldr	r3, [r3, #8]
 8105288:	2b00      	cmp	r3, #0
 810528a:	d103      	bne.n	8105294 <HAL_NOR_Init+0xb8>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 810528c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8105290:	617b      	str	r3, [r7, #20]
 8105292:	e012      	b.n	81052ba <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8105294:	68fb      	ldr	r3, [r7, #12]
 8105296:	689b      	ldr	r3, [r3, #8]
 8105298:	2b02      	cmp	r3, #2
 810529a:	d103      	bne.n	81052a4 <HAL_NOR_Init+0xc8>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 810529c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 81052a0:	617b      	str	r3, [r7, #20]
 81052a2:	e00a      	b.n	81052ba <HAL_NOR_Init+0xde>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 81052a4:	68fb      	ldr	r3, [r7, #12]
 81052a6:	689b      	ldr	r3, [r3, #8]
 81052a8:	2b04      	cmp	r3, #4
 81052aa:	d103      	bne.n	81052b4 <HAL_NOR_Init+0xd8>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 81052ac:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 81052b0:	617b      	str	r3, [r7, #20]
 81052b2:	e002      	b.n	81052ba <HAL_NOR_Init+0xde>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 81052b4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 81052b8:	617b      	str	r3, [r7, #20]
  }

  /* Get the value of the command set */
  NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 81052ba:	4b12      	ldr	r3, [pc, #72]	; (8105304 <HAL_NOR_Init+0x128>)
 81052bc:	681b      	ldr	r3, [r3, #0]
 81052be:	2b01      	cmp	r3, #1
 81052c0:	d102      	bne.n	81052c8 <HAL_NOR_Init+0xec>
 81052c2:	697b      	ldr	r3, [r7, #20]
 81052c4:	33aa      	adds	r3, #170	; 0xaa
 81052c6:	e001      	b.n	81052cc <HAL_NOR_Init+0xf0>
 81052c8:	697b      	ldr	r3, [r7, #20]
 81052ca:	3355      	adds	r3, #85	; 0x55
 81052cc:	2298      	movs	r2, #152	; 0x98
 81052ce:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81052d0:	f3bf 8f4f 	dsb	sy
}
 81052d4:	bf00      	nop
  hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 81052d6:	4b0b      	ldr	r3, [pc, #44]	; (8105304 <HAL_NOR_Init+0x128>)
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	2b01      	cmp	r3, #1
 81052dc:	d102      	bne.n	81052e4 <HAL_NOR_Init+0x108>
 81052de:	697b      	ldr	r3, [r7, #20]
 81052e0:	3326      	adds	r3, #38	; 0x26
 81052e2:	e001      	b.n	81052e8 <HAL_NOR_Init+0x10c>
 81052e4:	697b      	ldr	r3, [r7, #20]
 81052e6:	3313      	adds	r3, #19
 81052e8:	881b      	ldrh	r3, [r3, #0]
 81052ea:	b29b      	uxth	r3, r3
 81052ec:	461a      	mov	r2, r3
 81052ee:	68fb      	ldr	r3, [r7, #12]
 81052f0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_NOR_ReturnToReadMode(hnor);
 81052f2:	68f8      	ldr	r0, [r7, #12]
 81052f4:	f000 f80a 	bl	810530c <HAL_NOR_ReturnToReadMode>
 81052f8:	4603      	mov	r3, r0
}
 81052fa:	4618      	mov	r0, r3
 81052fc:	3718      	adds	r7, #24
 81052fe:	46bd      	mov	sp, r7
 8105300:	bd80      	pop	{r7, pc}
 8105302:	bf00      	nop
 8105304:	100000b8 	.word	0x100000b8
 8105308:	52004000 	.word	0x52004000

0810530c <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 810530c:	b480      	push	{r7}
 810530e:	b085      	sub	sp, #20
 8105310:	af00      	add	r7, sp, #0
 8105312:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8105314:	2300      	movs	r3, #0
 8105316:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810531e:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8105320:	7abb      	ldrb	r3, [r7, #10]
 8105322:	2b02      	cmp	r3, #2
 8105324:	d101      	bne.n	810532a <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8105326:	2302      	movs	r3, #2
 8105328:	e050      	b.n	81053cc <HAL_NOR_ReturnToReadMode+0xc0>
  }
  else if ((state == HAL_NOR_STATE_READY) || (state == HAL_NOR_STATE_PROTECTED))
 810532a:	7abb      	ldrb	r3, [r7, #10]
 810532c:	2b01      	cmp	r3, #1
 810532e:	d002      	beq.n	8105336 <HAL_NOR_ReturnToReadMode+0x2a>
 8105330:	7abb      	ldrb	r3, [r7, #10]
 8105332:	2b04      	cmp	r3, #4
 8105334:	d149      	bne.n	81053ca <HAL_NOR_ReturnToReadMode+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810533c:	2b01      	cmp	r3, #1
 810533e:	d101      	bne.n	8105344 <HAL_NOR_ReturnToReadMode+0x38>
 8105340:	2302      	movs	r3, #2
 8105342:	e043      	b.n	81053cc <HAL_NOR_ReturnToReadMode+0xc0>
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	2201      	movs	r2, #1
 8105348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	2202      	movs	r2, #2
 8105350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8105354:	687b      	ldr	r3, [r7, #4]
 8105356:	689b      	ldr	r3, [r3, #8]
 8105358:	2b00      	cmp	r3, #0
 810535a:	d103      	bne.n	8105364 <HAL_NOR_ReturnToReadMode+0x58>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 810535c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8105360:	60fb      	str	r3, [r7, #12]
 8105362:	e012      	b.n	810538a <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8105364:	687b      	ldr	r3, [r7, #4]
 8105366:	689b      	ldr	r3, [r3, #8]
 8105368:	2b02      	cmp	r3, #2
 810536a:	d103      	bne.n	8105374 <HAL_NOR_ReturnToReadMode+0x68>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 810536c:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8105370:	60fb      	str	r3, [r7, #12]
 8105372:	e00a      	b.n	810538a <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8105374:	687b      	ldr	r3, [r7, #4]
 8105376:	689b      	ldr	r3, [r3, #8]
 8105378:	2b04      	cmp	r3, #4
 810537a:	d103      	bne.n	8105384 <HAL_NOR_ReturnToReadMode+0x78>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 810537c:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8105380:	60fb      	str	r3, [r7, #12]
 8105382:	e002      	b.n	810538a <HAL_NOR_ReturnToReadMode+0x7e>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8105384:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8105388:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810538e:	2b02      	cmp	r3, #2
 8105390:	d105      	bne.n	810539e <HAL_NOR_ReturnToReadMode+0x92>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8105392:	68fb      	ldr	r3, [r7, #12]
 8105394:	22f0      	movs	r2, #240	; 0xf0
 8105396:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8105398:	f3bf 8f4f 	dsb	sy
}
 810539c:	e00b      	b.n	81053b6 <HAL_NOR_ReturnToReadMode+0xaa>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81053a2:	2b01      	cmp	r3, #1
 81053a4:	d105      	bne.n	81053b2 <HAL_NOR_ReturnToReadMode+0xa6>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 81053a6:	68fb      	ldr	r3, [r7, #12]
 81053a8:	22ff      	movs	r2, #255	; 0xff
 81053aa:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 81053ac:	f3bf 8f4f 	dsb	sy
}
 81053b0:	e001      	b.n	81053b6 <HAL_NOR_ReturnToReadMode+0xaa>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 81053b2:	2301      	movs	r3, #1
 81053b4:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	7aba      	ldrb	r2, [r7, #10]
 81053ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	2200      	movs	r2, #0
 81053c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 81053c6:	7afb      	ldrb	r3, [r7, #11]
 81053c8:	e000      	b.n	81053cc <HAL_NOR_ReturnToReadMode+0xc0>
    return HAL_ERROR;
 81053ca:	2301      	movs	r3, #1
}
 81053cc:	4618      	mov	r0, r3
 81053ce:	3714      	adds	r7, #20
 81053d0:	46bd      	mov	sp, r7
 81053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053d6:	4770      	bx	lr

081053d8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81053d8:	b580      	push	{r7, lr}
 81053da:	b084      	sub	sp, #16
 81053dc:	af00      	add	r7, sp, #0
 81053de:	60f8      	str	r0, [r7, #12]
 81053e0:	460b      	mov	r3, r1
 81053e2:	607a      	str	r2, [r7, #4]
 81053e4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81053e6:	4b37      	ldr	r3, [pc, #220]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81053e8:	681b      	ldr	r3, [r3, #0]
 81053ea:	f023 0201 	bic.w	r2, r3, #1
 81053ee:	4935      	ldr	r1, [pc, #212]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81053f0:	68fb      	ldr	r3, [r7, #12]
 81053f2:	4313      	orrs	r3, r2
 81053f4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	2b00      	cmp	r3, #0
 81053fa:	d123      	bne.n	8105444 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81053fc:	f7fc f93c 	bl	8101678 <HAL_GetCurrentCPUID>
 8105400:	4603      	mov	r3, r0
 8105402:	2b03      	cmp	r3, #3
 8105404:	d158      	bne.n	81054b8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105406:	4b2f      	ldr	r3, [pc, #188]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105408:	691b      	ldr	r3, [r3, #16]
 810540a:	4a2e      	ldr	r2, [pc, #184]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810540c:	f023 0301 	bic.w	r3, r3, #1
 8105410:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105412:	4b2d      	ldr	r3, [pc, #180]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105414:	691b      	ldr	r3, [r3, #16]
 8105416:	4a2c      	ldr	r2, [pc, #176]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105418:	f043 0304 	orr.w	r3, r3, #4
 810541c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810541e:	f3bf 8f4f 	dsb	sy
}
 8105422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105424:	f3bf 8f6f 	isb	sy
}
 8105428:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810542a:	7afb      	ldrb	r3, [r7, #11]
 810542c:	2b01      	cmp	r3, #1
 810542e:	d101      	bne.n	8105434 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105430:	bf30      	wfi
 8105432:	e000      	b.n	8105436 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105434:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105436:	4b24      	ldr	r3, [pc, #144]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105438:	691b      	ldr	r3, [r3, #16]
 810543a:	4a23      	ldr	r2, [pc, #140]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810543c:	f023 0304 	bic.w	r3, r3, #4
 8105440:	6113      	str	r3, [r2, #16]
 8105442:	e03c      	b.n	81054be <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	2b01      	cmp	r3, #1
 8105448:	d123      	bne.n	8105492 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810544a:	f7fc f915 	bl	8101678 <HAL_GetCurrentCPUID>
 810544e:	4603      	mov	r3, r0
 8105450:	2b01      	cmp	r3, #1
 8105452:	d133      	bne.n	81054bc <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105454:	4b1b      	ldr	r3, [pc, #108]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105456:	695b      	ldr	r3, [r3, #20]
 8105458:	4a1a      	ldr	r2, [pc, #104]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810545a:	f023 0302 	bic.w	r3, r3, #2
 810545e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105460:	4b19      	ldr	r3, [pc, #100]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105462:	691b      	ldr	r3, [r3, #16]
 8105464:	4a18      	ldr	r2, [pc, #96]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105466:	f043 0304 	orr.w	r3, r3, #4
 810546a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810546c:	f3bf 8f4f 	dsb	sy
}
 8105470:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105472:	f3bf 8f6f 	isb	sy
}
 8105476:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105478:	7afb      	ldrb	r3, [r7, #11]
 810547a:	2b01      	cmp	r3, #1
 810547c:	d101      	bne.n	8105482 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810547e:	bf30      	wfi
 8105480:	e000      	b.n	8105484 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105482:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105484:	4b10      	ldr	r3, [pc, #64]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105486:	691b      	ldr	r3, [r3, #16]
 8105488:	4a0f      	ldr	r2, [pc, #60]	; (81054c8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810548a:	f023 0304 	bic.w	r3, r3, #4
 810548e:	6113      	str	r3, [r2, #16]
 8105490:	e015      	b.n	81054be <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105492:	f7fc f8f1 	bl	8101678 <HAL_GetCurrentCPUID>
 8105496:	4603      	mov	r3, r0
 8105498:	2b03      	cmp	r3, #3
 810549a:	d106      	bne.n	81054aa <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810549c:	4b09      	ldr	r3, [pc, #36]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810549e:	691b      	ldr	r3, [r3, #16]
 81054a0:	4a08      	ldr	r2, [pc, #32]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81054a2:	f023 0304 	bic.w	r3, r3, #4
 81054a6:	6113      	str	r3, [r2, #16]
 81054a8:	e009      	b.n	81054be <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81054aa:	4b06      	ldr	r3, [pc, #24]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81054ac:	695b      	ldr	r3, [r3, #20]
 81054ae:	4a05      	ldr	r2, [pc, #20]	; (81054c4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81054b0:	f023 0304 	bic.w	r3, r3, #4
 81054b4:	6153      	str	r3, [r2, #20]
 81054b6:	e002      	b.n	81054be <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81054b8:	bf00      	nop
 81054ba:	e000      	b.n	81054be <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81054bc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81054be:	3710      	adds	r7, #16
 81054c0:	46bd      	mov	sp, r7
 81054c2:	bd80      	pop	{r7, pc}
 81054c4:	58024800 	.word	0x58024800
 81054c8:	e000ed00 	.word	0xe000ed00

081054cc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81054cc:	b580      	push	{r7, lr}
 81054ce:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81054d0:	f7fc f8d2 	bl	8101678 <HAL_GetCurrentCPUID>
 81054d4:	4603      	mov	r3, r0
 81054d6:	2b03      	cmp	r3, #3
 81054d8:	d101      	bne.n	81054de <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81054da:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81054dc:	e001      	b.n	81054e2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81054de:	bf40      	sev
    __WFE ();
 81054e0:	bf20      	wfe
}
 81054e2:	bf00      	nop
 81054e4:	bd80      	pop	{r7, pc}
	...

081054e8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 81054e8:	b480      	push	{r7}
 81054ea:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 81054ec:	4b05      	ldr	r3, [pc, #20]	; (8105504 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81054ee:	68db      	ldr	r3, [r3, #12]
 81054f0:	4a04      	ldr	r2, [pc, #16]	; (8105504 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 81054f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81054f6:	60d3      	str	r3, [r2, #12]
}
 81054f8:	bf00      	nop
 81054fa:	46bd      	mov	sp, r7
 81054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105500:	4770      	bx	lr
 8105502:	bf00      	nop
 8105504:	58024800 	.word	0x58024800

08105508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105508:	b480      	push	{r7}
 810550a:	b089      	sub	sp, #36	; 0x24
 810550c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810550e:	4bb3      	ldr	r3, [pc, #716]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105510:	691b      	ldr	r3, [r3, #16]
 8105512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105516:	2b18      	cmp	r3, #24
 8105518:	f200 8155 	bhi.w	81057c6 <HAL_RCC_GetSysClockFreq+0x2be>
 810551c:	a201      	add	r2, pc, #4	; (adr r2, 8105524 <HAL_RCC_GetSysClockFreq+0x1c>)
 810551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105522:	bf00      	nop
 8105524:	08105589 	.word	0x08105589
 8105528:	081057c7 	.word	0x081057c7
 810552c:	081057c7 	.word	0x081057c7
 8105530:	081057c7 	.word	0x081057c7
 8105534:	081057c7 	.word	0x081057c7
 8105538:	081057c7 	.word	0x081057c7
 810553c:	081057c7 	.word	0x081057c7
 8105540:	081057c7 	.word	0x081057c7
 8105544:	081055af 	.word	0x081055af
 8105548:	081057c7 	.word	0x081057c7
 810554c:	081057c7 	.word	0x081057c7
 8105550:	081057c7 	.word	0x081057c7
 8105554:	081057c7 	.word	0x081057c7
 8105558:	081057c7 	.word	0x081057c7
 810555c:	081057c7 	.word	0x081057c7
 8105560:	081057c7 	.word	0x081057c7
 8105564:	081055b5 	.word	0x081055b5
 8105568:	081057c7 	.word	0x081057c7
 810556c:	081057c7 	.word	0x081057c7
 8105570:	081057c7 	.word	0x081057c7
 8105574:	081057c7 	.word	0x081057c7
 8105578:	081057c7 	.word	0x081057c7
 810557c:	081057c7 	.word	0x081057c7
 8105580:	081057c7 	.word	0x081057c7
 8105584:	081055bb 	.word	0x081055bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105588:	4b94      	ldr	r3, [pc, #592]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	f003 0320 	and.w	r3, r3, #32
 8105590:	2b00      	cmp	r3, #0
 8105592:	d009      	beq.n	81055a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105594:	4b91      	ldr	r3, [pc, #580]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105596:	681b      	ldr	r3, [r3, #0]
 8105598:	08db      	lsrs	r3, r3, #3
 810559a:	f003 0303 	and.w	r3, r3, #3
 810559e:	4a90      	ldr	r2, [pc, #576]	; (81057e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81055a0:	fa22 f303 	lsr.w	r3, r2, r3
 81055a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81055a6:	e111      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81055a8:	4b8d      	ldr	r3, [pc, #564]	; (81057e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81055aa:	61bb      	str	r3, [r7, #24]
    break;
 81055ac:	e10e      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81055ae:	4b8d      	ldr	r3, [pc, #564]	; (81057e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81055b0:	61bb      	str	r3, [r7, #24]
    break;
 81055b2:	e10b      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81055b4:	4b8c      	ldr	r3, [pc, #560]	; (81057e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81055b6:	61bb      	str	r3, [r7, #24]
    break;
 81055b8:	e108      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81055ba:	4b88      	ldr	r3, [pc, #544]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055be:	f003 0303 	and.w	r3, r3, #3
 81055c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81055c4:	4b85      	ldr	r3, [pc, #532]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055c8:	091b      	lsrs	r3, r3, #4
 81055ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81055ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81055d0:	4b82      	ldr	r3, [pc, #520]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055d4:	f003 0301 	and.w	r3, r3, #1
 81055d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81055da:	4b80      	ldr	r3, [pc, #512]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81055de:	08db      	lsrs	r3, r3, #3
 81055e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81055e4:	68fa      	ldr	r2, [r7, #12]
 81055e6:	fb02 f303 	mul.w	r3, r2, r3
 81055ea:	ee07 3a90 	vmov	s15, r3
 81055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81055f6:	693b      	ldr	r3, [r7, #16]
 81055f8:	2b00      	cmp	r3, #0
 81055fa:	f000 80e1 	beq.w	81057c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 81055fe:	697b      	ldr	r3, [r7, #20]
 8105600:	2b02      	cmp	r3, #2
 8105602:	f000 8083 	beq.w	810570c <HAL_RCC_GetSysClockFreq+0x204>
 8105606:	697b      	ldr	r3, [r7, #20]
 8105608:	2b02      	cmp	r3, #2
 810560a:	f200 80a1 	bhi.w	8105750 <HAL_RCC_GetSysClockFreq+0x248>
 810560e:	697b      	ldr	r3, [r7, #20]
 8105610:	2b00      	cmp	r3, #0
 8105612:	d003      	beq.n	810561c <HAL_RCC_GetSysClockFreq+0x114>
 8105614:	697b      	ldr	r3, [r7, #20]
 8105616:	2b01      	cmp	r3, #1
 8105618:	d056      	beq.n	81056c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 810561a:	e099      	b.n	8105750 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810561c:	4b6f      	ldr	r3, [pc, #444]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810561e:	681b      	ldr	r3, [r3, #0]
 8105620:	f003 0320 	and.w	r3, r3, #32
 8105624:	2b00      	cmp	r3, #0
 8105626:	d02d      	beq.n	8105684 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105628:	4b6c      	ldr	r3, [pc, #432]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 810562a:	681b      	ldr	r3, [r3, #0]
 810562c:	08db      	lsrs	r3, r3, #3
 810562e:	f003 0303 	and.w	r3, r3, #3
 8105632:	4a6b      	ldr	r2, [pc, #428]	; (81057e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105634:	fa22 f303 	lsr.w	r3, r2, r3
 8105638:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810563a:	687b      	ldr	r3, [r7, #4]
 810563c:	ee07 3a90 	vmov	s15, r3
 8105640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105644:	693b      	ldr	r3, [r7, #16]
 8105646:	ee07 3a90 	vmov	s15, r3
 810564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105652:	4b62      	ldr	r3, [pc, #392]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810565a:	ee07 3a90 	vmov	s15, r3
 810565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105662:	ed97 6a02 	vldr	s12, [r7, #8]
 8105666:	eddf 5a61 	vldr	s11, [pc, #388]	; 81057ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810567e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105682:	e087      	b.n	8105794 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105684:	693b      	ldr	r3, [r7, #16]
 8105686:	ee07 3a90 	vmov	s15, r3
 810568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810568e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81057f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105696:	4b51      	ldr	r3, [pc, #324]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810569e:	ee07 3a90 	vmov	s15, r3
 81056a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81056aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 81057ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81056ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81056c6:	e065      	b.n	8105794 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81056c8:	693b      	ldr	r3, [r7, #16]
 81056ca:	ee07 3a90 	vmov	s15, r3
 81056ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 81057f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81056d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056da:	4b40      	ldr	r3, [pc, #256]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81056de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056e2:	ee07 3a90 	vmov	s15, r3
 81056e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81056ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81057ec <HAL_RCC_GetSysClockFreq+0x2e4>
 81056f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810570a:	e043      	b.n	8105794 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810570c:	693b      	ldr	r3, [r7, #16]
 810570e:	ee07 3a90 	vmov	s15, r3
 8105712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105716:	eddf 6a38 	vldr	s13, [pc, #224]	; 81057f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 810571a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810571e:	4b2f      	ldr	r3, [pc, #188]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105726:	ee07 3a90 	vmov	s15, r3
 810572a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810572e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105732:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81057ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8105736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810573a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810573e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105746:	ee67 7a27 	vmul.f32	s15, s14, s15
 810574a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810574e:	e021      	b.n	8105794 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105750:	693b      	ldr	r3, [r7, #16]
 8105752:	ee07 3a90 	vmov	s15, r3
 8105756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810575a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81057f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810575e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105762:	4b1e      	ldr	r3, [pc, #120]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810576a:	ee07 3a90 	vmov	s15, r3
 810576e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105772:	ed97 6a02 	vldr	s12, [r7, #8]
 8105776:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81057ec <HAL_RCC_GetSysClockFreq+0x2e4>
 810577a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810577e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810578a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810578e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105792:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105794:	4b11      	ldr	r3, [pc, #68]	; (81057dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105798:	0a5b      	lsrs	r3, r3, #9
 810579a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810579e:	3301      	adds	r3, #1
 81057a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81057a2:	683b      	ldr	r3, [r7, #0]
 81057a4:	ee07 3a90 	vmov	s15, r3
 81057a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81057ac:	edd7 6a07 	vldr	s13, [r7, #28]
 81057b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81057b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81057b8:	ee17 3a90 	vmov	r3, s15
 81057bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81057be:	e005      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81057c0:	2300      	movs	r3, #0
 81057c2:	61bb      	str	r3, [r7, #24]
    break;
 81057c4:	e002      	b.n	81057cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81057c6:	4b07      	ldr	r3, [pc, #28]	; (81057e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81057c8:	61bb      	str	r3, [r7, #24]
    break;
 81057ca:	bf00      	nop
  }

  return sysclockfreq;
 81057cc:	69bb      	ldr	r3, [r7, #24]
}
 81057ce:	4618      	mov	r0, r3
 81057d0:	3724      	adds	r7, #36	; 0x24
 81057d2:	46bd      	mov	sp, r7
 81057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057d8:	4770      	bx	lr
 81057da:	bf00      	nop
 81057dc:	58024400 	.word	0x58024400
 81057e0:	03d09000 	.word	0x03d09000
 81057e4:	003d0900 	.word	0x003d0900
 81057e8:	02dc6c00 	.word	0x02dc6c00
 81057ec:	46000000 	.word	0x46000000
 81057f0:	4c742400 	.word	0x4c742400
 81057f4:	4a742400 	.word	0x4a742400
 81057f8:	4c371b00 	.word	0x4c371b00

081057fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81057fc:	b580      	push	{r7, lr}
 81057fe:	b082      	sub	sp, #8
 8105800:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105802:	f7ff fe81 	bl	8105508 <HAL_RCC_GetSysClockFreq>
 8105806:	4602      	mov	r2, r0
 8105808:	4b11      	ldr	r3, [pc, #68]	; (8105850 <HAL_RCC_GetHCLKFreq+0x54>)
 810580a:	699b      	ldr	r3, [r3, #24]
 810580c:	0a1b      	lsrs	r3, r3, #8
 810580e:	f003 030f 	and.w	r3, r3, #15
 8105812:	4910      	ldr	r1, [pc, #64]	; (8105854 <HAL_RCC_GetHCLKFreq+0x58>)
 8105814:	5ccb      	ldrb	r3, [r1, r3]
 8105816:	f003 031f 	and.w	r3, r3, #31
 810581a:	fa22 f303 	lsr.w	r3, r2, r3
 810581e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105820:	4b0b      	ldr	r3, [pc, #44]	; (8105850 <HAL_RCC_GetHCLKFreq+0x54>)
 8105822:	699b      	ldr	r3, [r3, #24]
 8105824:	f003 030f 	and.w	r3, r3, #15
 8105828:	4a0a      	ldr	r2, [pc, #40]	; (8105854 <HAL_RCC_GetHCLKFreq+0x58>)
 810582a:	5cd3      	ldrb	r3, [r2, r3]
 810582c:	f003 031f 	and.w	r3, r3, #31
 8105830:	687a      	ldr	r2, [r7, #4]
 8105832:	fa22 f303 	lsr.w	r3, r2, r3
 8105836:	4a08      	ldr	r2, [pc, #32]	; (8105858 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105838:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810583a:	4b07      	ldr	r3, [pc, #28]	; (8105858 <HAL_RCC_GetHCLKFreq+0x5c>)
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	4a07      	ldr	r2, [pc, #28]	; (810585c <HAL_RCC_GetHCLKFreq+0x60>)
 8105840:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105842:	4b05      	ldr	r3, [pc, #20]	; (8105858 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105844:	681b      	ldr	r3, [r3, #0]
}
 8105846:	4618      	mov	r0, r3
 8105848:	3708      	adds	r7, #8
 810584a:	46bd      	mov	sp, r7
 810584c:	bd80      	pop	{r7, pc}
 810584e:	bf00      	nop
 8105850:	58024400 	.word	0x58024400
 8105854:	0810d680 	.word	0x0810d680
 8105858:	10000004 	.word	0x10000004
 810585c:	10000000 	.word	0x10000000

08105860 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105860:	b580      	push	{r7, lr}
 8105862:	b086      	sub	sp, #24
 8105864:	af00      	add	r7, sp, #0
 8105866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105868:	2300      	movs	r3, #0
 810586a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810586c:	2300      	movs	r3, #0
 810586e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105870:	687b      	ldr	r3, [r7, #4]
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105878:	2b00      	cmp	r3, #0
 810587a:	d03f      	beq.n	81058fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810587c:	687b      	ldr	r3, [r7, #4]
 810587e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105880:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105884:	d02a      	beq.n	81058dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8105886:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810588a:	d824      	bhi.n	81058d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810588c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105890:	d018      	beq.n	81058c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105896:	d81e      	bhi.n	81058d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8105898:	2b00      	cmp	r3, #0
 810589a:	d003      	beq.n	81058a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810589c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81058a0:	d007      	beq.n	81058b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 81058a2:	e018      	b.n	81058d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81058a4:	4bab      	ldr	r3, [pc, #684]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058a8:	4aaa      	ldr	r2, [pc, #680]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81058ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81058b0:	e015      	b.n	81058de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	3304      	adds	r3, #4
 81058b6:	2102      	movs	r1, #2
 81058b8:	4618      	mov	r0, r3
 81058ba:	f002 f823 	bl	8107904 <RCCEx_PLL2_Config>
 81058be:	4603      	mov	r3, r0
 81058c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81058c2:	e00c      	b.n	81058de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	3324      	adds	r3, #36	; 0x24
 81058c8:	2102      	movs	r1, #2
 81058ca:	4618      	mov	r0, r3
 81058cc:	f002 f8cc 	bl	8107a68 <RCCEx_PLL3_Config>
 81058d0:	4603      	mov	r3, r0
 81058d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81058d4:	e003      	b.n	81058de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81058d6:	2301      	movs	r3, #1
 81058d8:	75fb      	strb	r3, [r7, #23]
      break;
 81058da:	e000      	b.n	81058de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81058dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81058de:	7dfb      	ldrb	r3, [r7, #23]
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d109      	bne.n	81058f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81058e4:	4b9b      	ldr	r3, [pc, #620]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81058e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81058e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81058ec:	687b      	ldr	r3, [r7, #4]
 81058ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81058f0:	4998      	ldr	r1, [pc, #608]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81058f2:	4313      	orrs	r3, r2
 81058f4:	650b      	str	r3, [r1, #80]	; 0x50
 81058f6:	e001      	b.n	81058fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81058f8:	7dfb      	ldrb	r3, [r7, #23]
 81058fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105904:	2b00      	cmp	r3, #0
 8105906:	d03d      	beq.n	8105984 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810590c:	2b04      	cmp	r3, #4
 810590e:	d826      	bhi.n	810595e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8105910:	a201      	add	r2, pc, #4	; (adr r2, 8105918 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8105912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105916:	bf00      	nop
 8105918:	0810592d 	.word	0x0810592d
 810591c:	0810593b 	.word	0x0810593b
 8105920:	0810594d 	.word	0x0810594d
 8105924:	08105965 	.word	0x08105965
 8105928:	08105965 	.word	0x08105965
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810592c:	4b89      	ldr	r3, [pc, #548]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105930:	4a88      	ldr	r2, [pc, #544]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105938:	e015      	b.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810593a:	687b      	ldr	r3, [r7, #4]
 810593c:	3304      	adds	r3, #4
 810593e:	2100      	movs	r1, #0
 8105940:	4618      	mov	r0, r3
 8105942:	f001 ffdf 	bl	8107904 <RCCEx_PLL2_Config>
 8105946:	4603      	mov	r3, r0
 8105948:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810594a:	e00c      	b.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	3324      	adds	r3, #36	; 0x24
 8105950:	2100      	movs	r1, #0
 8105952:	4618      	mov	r0, r3
 8105954:	f002 f888 	bl	8107a68 <RCCEx_PLL3_Config>
 8105958:	4603      	mov	r3, r0
 810595a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810595c:	e003      	b.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810595e:	2301      	movs	r3, #1
 8105960:	75fb      	strb	r3, [r7, #23]
      break;
 8105962:	e000      	b.n	8105966 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8105964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105966:	7dfb      	ldrb	r3, [r7, #23]
 8105968:	2b00      	cmp	r3, #0
 810596a:	d109      	bne.n	8105980 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810596c:	4b79      	ldr	r3, [pc, #484]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810596e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105970:	f023 0207 	bic.w	r2, r3, #7
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105978:	4976      	ldr	r1, [pc, #472]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810597a:	4313      	orrs	r3, r2
 810597c:	650b      	str	r3, [r1, #80]	; 0x50
 810597e:	e001      	b.n	8105984 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105980:	7dfb      	ldrb	r3, [r7, #23]
 8105982:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810598c:	2b00      	cmp	r3, #0
 810598e:	d042      	beq.n	8105a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105998:	d02b      	beq.n	81059f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810599a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810599e:	d825      	bhi.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81059a0:	2bc0      	cmp	r3, #192	; 0xc0
 81059a2:	d028      	beq.n	81059f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 81059a4:	2bc0      	cmp	r3, #192	; 0xc0
 81059a6:	d821      	bhi.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81059a8:	2b80      	cmp	r3, #128	; 0x80
 81059aa:	d016      	beq.n	81059da <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81059ac:	2b80      	cmp	r3, #128	; 0x80
 81059ae:	d81d      	bhi.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81059b0:	2b00      	cmp	r3, #0
 81059b2:	d002      	beq.n	81059ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81059b4:	2b40      	cmp	r3, #64	; 0x40
 81059b6:	d007      	beq.n	81059c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81059b8:	e018      	b.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81059ba:	4b66      	ldr	r3, [pc, #408]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81059be:	4a65      	ldr	r2, [pc, #404]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81059c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81059c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81059c6:	e017      	b.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	3304      	adds	r3, #4
 81059cc:	2100      	movs	r1, #0
 81059ce:	4618      	mov	r0, r3
 81059d0:	f001 ff98 	bl	8107904 <RCCEx_PLL2_Config>
 81059d4:	4603      	mov	r3, r0
 81059d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81059d8:	e00e      	b.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	3324      	adds	r3, #36	; 0x24
 81059de:	2100      	movs	r1, #0
 81059e0:	4618      	mov	r0, r3
 81059e2:	f002 f841 	bl	8107a68 <RCCEx_PLL3_Config>
 81059e6:	4603      	mov	r3, r0
 81059e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81059ea:	e005      	b.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81059ec:	2301      	movs	r3, #1
 81059ee:	75fb      	strb	r3, [r7, #23]
      break;
 81059f0:	e002      	b.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81059f2:	bf00      	nop
 81059f4:	e000      	b.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81059f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81059f8:	7dfb      	ldrb	r3, [r7, #23]
 81059fa:	2b00      	cmp	r3, #0
 81059fc:	d109      	bne.n	8105a12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81059fe:	4b55      	ldr	r3, [pc, #340]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105a02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8105a06:	687b      	ldr	r3, [r7, #4]
 8105a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105a0a:	4952      	ldr	r1, [pc, #328]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a0c:	4313      	orrs	r3, r2
 8105a0e:	650b      	str	r3, [r1, #80]	; 0x50
 8105a10:	e001      	b.n	8105a16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a12:	7dfb      	ldrb	r3, [r7, #23]
 8105a14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105a16:	687b      	ldr	r3, [r7, #4]
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8105a1e:	2b00      	cmp	r3, #0
 8105a20:	d049      	beq.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105a2c:	d030      	beq.n	8105a90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8105a2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105a32:	d82a      	bhi.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105a34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105a38:	d02c      	beq.n	8105a94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8105a3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105a3e:	d824      	bhi.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105a44:	d018      	beq.n	8105a78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8105a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105a4a:	d81e      	bhi.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8105a4c:	2b00      	cmp	r3, #0
 8105a4e:	d003      	beq.n	8105a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8105a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105a54:	d007      	beq.n	8105a66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8105a56:	e018      	b.n	8105a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a58:	4b3e      	ldr	r3, [pc, #248]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a5c:	4a3d      	ldr	r2, [pc, #244]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105a64:	e017      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	3304      	adds	r3, #4
 8105a6a:	2100      	movs	r1, #0
 8105a6c:	4618      	mov	r0, r3
 8105a6e:	f001 ff49 	bl	8107904 <RCCEx_PLL2_Config>
 8105a72:	4603      	mov	r3, r0
 8105a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105a76:	e00e      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	3324      	adds	r3, #36	; 0x24
 8105a7c:	2100      	movs	r1, #0
 8105a7e:	4618      	mov	r0, r3
 8105a80:	f001 fff2 	bl	8107a68 <RCCEx_PLL3_Config>
 8105a84:	4603      	mov	r3, r0
 8105a86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105a88:	e005      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105a8a:	2301      	movs	r3, #1
 8105a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8105a8e:	e002      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105a90:	bf00      	nop
 8105a92:	e000      	b.n	8105a96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8105a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105a96:	7dfb      	ldrb	r3, [r7, #23]
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	d10a      	bne.n	8105ab2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105a9c:	4b2d      	ldr	r3, [pc, #180]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105aa0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8105aaa:	492a      	ldr	r1, [pc, #168]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105aac:	4313      	orrs	r3, r2
 8105aae:	658b      	str	r3, [r1, #88]	; 0x58
 8105ab0:	e001      	b.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ab2:	7dfb      	ldrb	r3, [r7, #23]
 8105ab4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105abe:	2b00      	cmp	r3, #0
 8105ac0:	d04c      	beq.n	8105b5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105acc:	d030      	beq.n	8105b30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8105ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105ad2:	d82a      	bhi.n	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105ad4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105ad8:	d02c      	beq.n	8105b34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8105ada:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105ade:	d824      	bhi.n	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105ae0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105ae4:	d018      	beq.n	8105b18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8105ae6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105aea:	d81e      	bhi.n	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8105aec:	2b00      	cmp	r3, #0
 8105aee:	d003      	beq.n	8105af8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8105af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105af4:	d007      	beq.n	8105b06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8105af6:	e018      	b.n	8105b2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105af8:	4b16      	ldr	r3, [pc, #88]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105afc:	4a15      	ldr	r2, [pc, #84]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b04:	e017      	b.n	8105b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	3304      	adds	r3, #4
 8105b0a:	2100      	movs	r1, #0
 8105b0c:	4618      	mov	r0, r3
 8105b0e:	f001 fef9 	bl	8107904 <RCCEx_PLL2_Config>
 8105b12:	4603      	mov	r3, r0
 8105b14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8105b16:	e00e      	b.n	8105b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	3324      	adds	r3, #36	; 0x24
 8105b1c:	2100      	movs	r1, #0
 8105b1e:	4618      	mov	r0, r3
 8105b20:	f001 ffa2 	bl	8107a68 <RCCEx_PLL3_Config>
 8105b24:	4603      	mov	r3, r0
 8105b26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8105b28:	e005      	b.n	8105b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8105b2a:	2301      	movs	r3, #1
 8105b2c:	75fb      	strb	r3, [r7, #23]
      break;
 8105b2e:	e002      	b.n	8105b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8105b30:	bf00      	nop
 8105b32:	e000      	b.n	8105b36 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8105b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105b36:	7dfb      	ldrb	r3, [r7, #23]
 8105b38:	2b00      	cmp	r3, #0
 8105b3a:	d10d      	bne.n	8105b58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105b3c:	4b05      	ldr	r3, [pc, #20]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8105b44:	687b      	ldr	r3, [r7, #4]
 8105b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105b4a:	4902      	ldr	r1, [pc, #8]	; (8105b54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8105b4c:	4313      	orrs	r3, r2
 8105b4e:	658b      	str	r3, [r1, #88]	; 0x58
 8105b50:	e004      	b.n	8105b5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8105b52:	bf00      	nop
 8105b54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b58:	7dfb      	ldrb	r3, [r7, #23]
 8105b5a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105b5c:	687b      	ldr	r3, [r7, #4]
 8105b5e:	681b      	ldr	r3, [r3, #0]
 8105b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105b64:	2b00      	cmp	r3, #0
 8105b66:	d032      	beq.n	8105bce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105b6c:	2b30      	cmp	r3, #48	; 0x30
 8105b6e:	d01c      	beq.n	8105baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105b70:	2b30      	cmp	r3, #48	; 0x30
 8105b72:	d817      	bhi.n	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8105b74:	2b20      	cmp	r3, #32
 8105b76:	d00c      	beq.n	8105b92 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8105b78:	2b20      	cmp	r3, #32
 8105b7a:	d813      	bhi.n	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8105b7c:	2b00      	cmp	r3, #0
 8105b7e:	d016      	beq.n	8105bae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8105b80:	2b10      	cmp	r3, #16
 8105b82:	d10f      	bne.n	8105ba4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b84:	4bb1      	ldr	r3, [pc, #708]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b88:	4ab0      	ldr	r2, [pc, #704]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105b90:	e00e      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	3304      	adds	r3, #4
 8105b96:	2102      	movs	r1, #2
 8105b98:	4618      	mov	r0, r3
 8105b9a:	f001 feb3 	bl	8107904 <RCCEx_PLL2_Config>
 8105b9e:	4603      	mov	r3, r0
 8105ba0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8105ba2:	e005      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105ba4:	2301      	movs	r3, #1
 8105ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8105ba8:	e002      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8105baa:	bf00      	nop
 8105bac:	e000      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8105bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105bb0:	7dfb      	ldrb	r3, [r7, #23]
 8105bb2:	2b00      	cmp	r3, #0
 8105bb4:	d109      	bne.n	8105bca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105bb6:	4ba5      	ldr	r3, [pc, #660]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105bba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105bc2:	49a2      	ldr	r1, [pc, #648]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105bc4:	4313      	orrs	r3, r2
 8105bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105bc8:	e001      	b.n	8105bce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bca:	7dfb      	ldrb	r3, [r7, #23]
 8105bcc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105bce:	687b      	ldr	r3, [r7, #4]
 8105bd0:	681b      	ldr	r3, [r3, #0]
 8105bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8105bd6:	2b00      	cmp	r3, #0
 8105bd8:	d047      	beq.n	8105c6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105be2:	d030      	beq.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8105be4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105be8:	d82a      	bhi.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8105bea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105bee:	d02c      	beq.n	8105c4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8105bf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105bf4:	d824      	bhi.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8105bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105bfa:	d018      	beq.n	8105c2e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8105bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105c00:	d81e      	bhi.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8105c02:	2b00      	cmp	r3, #0
 8105c04:	d003      	beq.n	8105c0e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8105c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105c0a:	d007      	beq.n	8105c1c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8105c0c:	e018      	b.n	8105c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c0e:	4b8f      	ldr	r3, [pc, #572]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c12:	4a8e      	ldr	r2, [pc, #568]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105c1a:	e017      	b.n	8105c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	3304      	adds	r3, #4
 8105c20:	2100      	movs	r1, #0
 8105c22:	4618      	mov	r0, r3
 8105c24:	f001 fe6e 	bl	8107904 <RCCEx_PLL2_Config>
 8105c28:	4603      	mov	r3, r0
 8105c2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105c2c:	e00e      	b.n	8105c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	3324      	adds	r3, #36	; 0x24
 8105c32:	2100      	movs	r1, #0
 8105c34:	4618      	mov	r0, r3
 8105c36:	f001 ff17 	bl	8107a68 <RCCEx_PLL3_Config>
 8105c3a:	4603      	mov	r3, r0
 8105c3c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8105c3e:	e005      	b.n	8105c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105c40:	2301      	movs	r3, #1
 8105c42:	75fb      	strb	r3, [r7, #23]
      break;
 8105c44:	e002      	b.n	8105c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8105c46:	bf00      	nop
 8105c48:	e000      	b.n	8105c4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8105c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105c4c:	7dfb      	ldrb	r3, [r7, #23]
 8105c4e:	2b00      	cmp	r3, #0
 8105c50:	d109      	bne.n	8105c66 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105c52:	4b7e      	ldr	r3, [pc, #504]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105c56:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105c5e:	497b      	ldr	r1, [pc, #492]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105c60:	4313      	orrs	r3, r2
 8105c62:	650b      	str	r3, [r1, #80]	; 0x50
 8105c64:	e001      	b.n	8105c6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c66:	7dfb      	ldrb	r3, [r7, #23]
 8105c68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8105c72:	2b00      	cmp	r3, #0
 8105c74:	d049      	beq.n	8105d0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105c7e:	d02e      	beq.n	8105cde <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8105c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105c84:	d828      	bhi.n	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105c86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105c8a:	d02a      	beq.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8105c8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105c90:	d822      	bhi.n	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105c92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105c96:	d026      	beq.n	8105ce6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8105c98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105c9c:	d81c      	bhi.n	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ca2:	d010      	beq.n	8105cc6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8105ca4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105ca8:	d816      	bhi.n	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8105caa:	2b00      	cmp	r3, #0
 8105cac:	d01d      	beq.n	8105cea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8105cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105cb2:	d111      	bne.n	8105cd8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	3304      	adds	r3, #4
 8105cb8:	2101      	movs	r1, #1
 8105cba:	4618      	mov	r0, r3
 8105cbc:	f001 fe22 	bl	8107904 <RCCEx_PLL2_Config>
 8105cc0:	4603      	mov	r3, r0
 8105cc2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105cc4:	e012      	b.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	3324      	adds	r3, #36	; 0x24
 8105cca:	2101      	movs	r1, #1
 8105ccc:	4618      	mov	r0, r3
 8105cce:	f001 fecb 	bl	8107a68 <RCCEx_PLL3_Config>
 8105cd2:	4603      	mov	r3, r0
 8105cd4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8105cd6:	e009      	b.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105cd8:	2301      	movs	r3, #1
 8105cda:	75fb      	strb	r3, [r7, #23]
      break;
 8105cdc:	e006      	b.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105cde:	bf00      	nop
 8105ce0:	e004      	b.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105ce2:	bf00      	nop
 8105ce4:	e002      	b.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105ce6:	bf00      	nop
 8105ce8:	e000      	b.n	8105cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8105cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105cec:	7dfb      	ldrb	r3, [r7, #23]
 8105cee:	2b00      	cmp	r3, #0
 8105cf0:	d109      	bne.n	8105d06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105cf2:	4b56      	ldr	r3, [pc, #344]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105cf6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105cfe:	4953      	ldr	r1, [pc, #332]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105d00:	4313      	orrs	r3, r2
 8105d02:	650b      	str	r3, [r1, #80]	; 0x50
 8105d04:	e001      	b.n	8105d0a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d06:	7dfb      	ldrb	r3, [r7, #23]
 8105d08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105d0a:	687b      	ldr	r3, [r7, #4]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d04b      	beq.n	8105dae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105d20:	d02e      	beq.n	8105d80 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8105d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105d26:	d828      	bhi.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105d2c:	d02a      	beq.n	8105d84 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8105d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105d32:	d822      	bhi.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105d34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105d38:	d026      	beq.n	8105d88 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8105d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105d3e:	d81c      	bhi.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d44:	d010      	beq.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8105d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105d4a:	d816      	bhi.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8105d4c:	2b00      	cmp	r3, #0
 8105d4e:	d01d      	beq.n	8105d8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8105d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105d54:	d111      	bne.n	8105d7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	3304      	adds	r3, #4
 8105d5a:	2101      	movs	r1, #1
 8105d5c:	4618      	mov	r0, r3
 8105d5e:	f001 fdd1 	bl	8107904 <RCCEx_PLL2_Config>
 8105d62:	4603      	mov	r3, r0
 8105d64:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105d66:	e012      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8105d68:	687b      	ldr	r3, [r7, #4]
 8105d6a:	3324      	adds	r3, #36	; 0x24
 8105d6c:	2101      	movs	r1, #1
 8105d6e:	4618      	mov	r0, r3
 8105d70:	f001 fe7a 	bl	8107a68 <RCCEx_PLL3_Config>
 8105d74:	4603      	mov	r3, r0
 8105d76:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8105d78:	e009      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8105d7a:	2301      	movs	r3, #1
 8105d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8105d7e:	e006      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105d80:	bf00      	nop
 8105d82:	e004      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105d84:	bf00      	nop
 8105d86:	e002      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105d88:	bf00      	nop
 8105d8a:	e000      	b.n	8105d8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8105d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105d8e:	7dfb      	ldrb	r3, [r7, #23]
 8105d90:	2b00      	cmp	r3, #0
 8105d92:	d10a      	bne.n	8105daa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105d94:	4b2d      	ldr	r3, [pc, #180]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d98:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105da2:	492a      	ldr	r1, [pc, #168]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105da4:	4313      	orrs	r3, r2
 8105da6:	658b      	str	r3, [r1, #88]	; 0x58
 8105da8:	e001      	b.n	8105dae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105daa:	7dfb      	ldrb	r3, [r7, #23]
 8105dac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8105db6:	2b00      	cmp	r3, #0
 8105db8:	d022      	beq.n	8105e00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105dbe:	2b00      	cmp	r3, #0
 8105dc0:	d00e      	beq.n	8105de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8105dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105dc6:	d108      	bne.n	8105dda <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	3304      	adds	r3, #4
 8105dcc:	2101      	movs	r1, #1
 8105dce:	4618      	mov	r0, r3
 8105dd0:	f001 fd98 	bl	8107904 <RCCEx_PLL2_Config>
 8105dd4:	4603      	mov	r3, r0
 8105dd6:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8105dd8:	e003      	b.n	8105de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105dda:	2301      	movs	r3, #1
 8105ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8105dde:	e000      	b.n	8105de2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8105de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105de2:	7dfb      	ldrb	r3, [r7, #23]
 8105de4:	2b00      	cmp	r3, #0
 8105de6:	d109      	bne.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8105de8:	4b18      	ldr	r3, [pc, #96]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105df4:	4915      	ldr	r1, [pc, #84]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105df6:	4313      	orrs	r3, r2
 8105df8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105dfa:	e001      	b.n	8105e00 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dfc:	7dfb      	ldrb	r3, [r7, #23]
 8105dfe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105e00:	687b      	ldr	r3, [r7, #4]
 8105e02:	681b      	ldr	r3, [r3, #0]
 8105e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105e08:	2b00      	cmp	r3, #0
 8105e0a:	d031      	beq.n	8105e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e14:	d00e      	beq.n	8105e34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105e1a:	d814      	bhi.n	8105e46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8105e1c:	2b00      	cmp	r3, #0
 8105e1e:	d017      	beq.n	8105e50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8105e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e24:	d10f      	bne.n	8105e46 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e26:	4b09      	ldr	r3, [pc, #36]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e2a:	4a08      	ldr	r2, [pc, #32]	; (8105e4c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8105e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105e30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105e32:	e00e      	b.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	3304      	adds	r3, #4
 8105e38:	2101      	movs	r1, #1
 8105e3a:	4618      	mov	r0, r3
 8105e3c:	f001 fd62 	bl	8107904 <RCCEx_PLL2_Config>
 8105e40:	4603      	mov	r3, r0
 8105e42:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8105e44:	e005      	b.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8105e46:	2301      	movs	r3, #1
 8105e48:	75fb      	strb	r3, [r7, #23]
      break;
 8105e4a:	e002      	b.n	8105e52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8105e4c:	58024400 	.word	0x58024400
      break;
 8105e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105e52:	7dfb      	ldrb	r3, [r7, #23]
 8105e54:	2b00      	cmp	r3, #0
 8105e56:	d109      	bne.n	8105e6c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8105e58:	4bb8      	ldr	r3, [pc, #736]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105e64:	49b5      	ldr	r1, [pc, #724]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105e66:	4313      	orrs	r3, r2
 8105e68:	650b      	str	r3, [r1, #80]	; 0x50
 8105e6a:	e001      	b.n	8105e70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e6c:	7dfb      	ldrb	r3, [r7, #23]
 8105e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	681b      	ldr	r3, [r3, #0]
 8105e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8105e78:	2b00      	cmp	r3, #0
 8105e7a:	d032      	beq.n	8105ee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105e80:	2b03      	cmp	r3, #3
 8105e82:	d81b      	bhi.n	8105ebc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8105e84:	a201      	add	r2, pc, #4	; (adr r2, 8105e8c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8105e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e8a:	bf00      	nop
 8105e8c:	08105ec3 	.word	0x08105ec3
 8105e90:	08105e9d 	.word	0x08105e9d
 8105e94:	08105eab 	.word	0x08105eab
 8105e98:	08105ec3 	.word	0x08105ec3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e9c:	4ba7      	ldr	r3, [pc, #668]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ea0:	4aa6      	ldr	r2, [pc, #664]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105ea8:	e00c      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8105eaa:	687b      	ldr	r3, [r7, #4]
 8105eac:	3304      	adds	r3, #4
 8105eae:	2102      	movs	r1, #2
 8105eb0:	4618      	mov	r0, r3
 8105eb2:	f001 fd27 	bl	8107904 <RCCEx_PLL2_Config>
 8105eb6:	4603      	mov	r3, r0
 8105eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8105eba:	e003      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8105ebc:	2301      	movs	r3, #1
 8105ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8105ec0:	e000      	b.n	8105ec4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8105ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8105ec4:	7dfb      	ldrb	r3, [r7, #23]
 8105ec6:	2b00      	cmp	r3, #0
 8105ec8:	d109      	bne.n	8105ede <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8105eca:	4b9c      	ldr	r3, [pc, #624]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105ece:	f023 0203 	bic.w	r2, r3, #3
 8105ed2:	687b      	ldr	r3, [r7, #4]
 8105ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105ed6:	4999      	ldr	r1, [pc, #612]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105ed8:	4313      	orrs	r3, r2
 8105eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8105edc:	e001      	b.n	8105ee2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ede:	7dfb      	ldrb	r3, [r7, #23]
 8105ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	681b      	ldr	r3, [r3, #0]
 8105ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	f000 8088 	beq.w	8106000 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8105ef0:	4b93      	ldr	r3, [pc, #588]	; (8106140 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8105ef2:	681b      	ldr	r3, [r3, #0]
 8105ef4:	4a92      	ldr	r2, [pc, #584]	; (8106140 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8105ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105efc:	f7fb fa7c 	bl	81013f8 <HAL_GetTick>
 8105f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105f02:	e009      	b.n	8105f18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105f04:	f7fb fa78 	bl	81013f8 <HAL_GetTick>
 8105f08:	4602      	mov	r2, r0
 8105f0a:	693b      	ldr	r3, [r7, #16]
 8105f0c:	1ad3      	subs	r3, r2, r3
 8105f0e:	2b64      	cmp	r3, #100	; 0x64
 8105f10:	d902      	bls.n	8105f18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8105f12:	2303      	movs	r3, #3
 8105f14:	75fb      	strb	r3, [r7, #23]
        break;
 8105f16:	e005      	b.n	8105f24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8105f18:	4b89      	ldr	r3, [pc, #548]	; (8106140 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105f20:	2b00      	cmp	r3, #0
 8105f22:	d0ef      	beq.n	8105f04 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8105f24:	7dfb      	ldrb	r3, [r7, #23]
 8105f26:	2b00      	cmp	r3, #0
 8105f28:	d168      	bne.n	8105ffc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8105f2a:	4b84      	ldr	r3, [pc, #528]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105f2e:	687b      	ldr	r3, [r7, #4]
 8105f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105f34:	4053      	eors	r3, r2
 8105f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105f3a:	2b00      	cmp	r3, #0
 8105f3c:	d013      	beq.n	8105f66 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105f3e:	4b7f      	ldr	r3, [pc, #508]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105f46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8105f48:	4b7c      	ldr	r3, [pc, #496]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f4c:	4a7b      	ldr	r2, [pc, #492]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105f52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8105f54:	4b79      	ldr	r3, [pc, #484]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f58:	4a78      	ldr	r2, [pc, #480]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105f5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105f60:	4a76      	ldr	r2, [pc, #472]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f62:	68fb      	ldr	r3, [r7, #12]
 8105f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105f70:	d115      	bne.n	8105f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105f72:	f7fb fa41 	bl	81013f8 <HAL_GetTick>
 8105f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105f78:	e00b      	b.n	8105f92 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105f7a:	f7fb fa3d 	bl	81013f8 <HAL_GetTick>
 8105f7e:	4602      	mov	r2, r0
 8105f80:	693b      	ldr	r3, [r7, #16]
 8105f82:	1ad3      	subs	r3, r2, r3
 8105f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8105f88:	4293      	cmp	r3, r2
 8105f8a:	d902      	bls.n	8105f92 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8105f8c:	2303      	movs	r3, #3
 8105f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8105f90:	e005      	b.n	8105f9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105f92:	4b6a      	ldr	r3, [pc, #424]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105f96:	f003 0302 	and.w	r3, r3, #2
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d0ed      	beq.n	8105f7a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8105f9e:	7dfb      	ldrb	r3, [r7, #23]
 8105fa0:	2b00      	cmp	r3, #0
 8105fa2:	d128      	bne.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105fb2:	d10f      	bne.n	8105fd4 <HAL_RCCEx_PeriphCLKConfig+0x774>
 8105fb4:	4b61      	ldr	r3, [pc, #388]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fb6:	691b      	ldr	r3, [r3, #16]
 8105fb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8105fbc:	687b      	ldr	r3, [r7, #4]
 8105fbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105fc2:	091b      	lsrs	r3, r3, #4
 8105fc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8105fc8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8105fcc:	495b      	ldr	r1, [pc, #364]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fce:	4313      	orrs	r3, r2
 8105fd0:	610b      	str	r3, [r1, #16]
 8105fd2:	e005      	b.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x780>
 8105fd4:	4b59      	ldr	r3, [pc, #356]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fd6:	691b      	ldr	r3, [r3, #16]
 8105fd8:	4a58      	ldr	r2, [pc, #352]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8105fde:	6113      	str	r3, [r2, #16]
 8105fe0:	4b56      	ldr	r3, [pc, #344]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105fe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105fe4:	687b      	ldr	r3, [r7, #4]
 8105fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105fee:	4953      	ldr	r1, [pc, #332]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8105ff0:	4313      	orrs	r3, r2
 8105ff2:	670b      	str	r3, [r1, #112]	; 0x70
 8105ff4:	e004      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8105ff6:	7dfb      	ldrb	r3, [r7, #23]
 8105ff8:	75bb      	strb	r3, [r7, #22]
 8105ffa:	e001      	b.n	8106000 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ffc:	7dfb      	ldrb	r3, [r7, #23]
 8105ffe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	f003 0301 	and.w	r3, r3, #1
 8106008:	2b00      	cmp	r3, #0
 810600a:	d07e      	beq.n	810610a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8106010:	2b28      	cmp	r3, #40	; 0x28
 8106012:	d867      	bhi.n	81060e4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8106014:	a201      	add	r2, pc, #4	; (adr r2, 810601c <HAL_RCCEx_PeriphCLKConfig+0x7bc>)
 8106016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810601a:	bf00      	nop
 810601c:	081060eb 	.word	0x081060eb
 8106020:	081060e5 	.word	0x081060e5
 8106024:	081060e5 	.word	0x081060e5
 8106028:	081060e5 	.word	0x081060e5
 810602c:	081060e5 	.word	0x081060e5
 8106030:	081060e5 	.word	0x081060e5
 8106034:	081060e5 	.word	0x081060e5
 8106038:	081060e5 	.word	0x081060e5
 810603c:	081060c1 	.word	0x081060c1
 8106040:	081060e5 	.word	0x081060e5
 8106044:	081060e5 	.word	0x081060e5
 8106048:	081060e5 	.word	0x081060e5
 810604c:	081060e5 	.word	0x081060e5
 8106050:	081060e5 	.word	0x081060e5
 8106054:	081060e5 	.word	0x081060e5
 8106058:	081060e5 	.word	0x081060e5
 810605c:	081060d3 	.word	0x081060d3
 8106060:	081060e5 	.word	0x081060e5
 8106064:	081060e5 	.word	0x081060e5
 8106068:	081060e5 	.word	0x081060e5
 810606c:	081060e5 	.word	0x081060e5
 8106070:	081060e5 	.word	0x081060e5
 8106074:	081060e5 	.word	0x081060e5
 8106078:	081060e5 	.word	0x081060e5
 810607c:	081060eb 	.word	0x081060eb
 8106080:	081060e5 	.word	0x081060e5
 8106084:	081060e5 	.word	0x081060e5
 8106088:	081060e5 	.word	0x081060e5
 810608c:	081060e5 	.word	0x081060e5
 8106090:	081060e5 	.word	0x081060e5
 8106094:	081060e5 	.word	0x081060e5
 8106098:	081060e5 	.word	0x081060e5
 810609c:	081060eb 	.word	0x081060eb
 81060a0:	081060e5 	.word	0x081060e5
 81060a4:	081060e5 	.word	0x081060e5
 81060a8:	081060e5 	.word	0x081060e5
 81060ac:	081060e5 	.word	0x081060e5
 81060b0:	081060e5 	.word	0x081060e5
 81060b4:	081060e5 	.word	0x081060e5
 81060b8:	081060e5 	.word	0x081060e5
 81060bc:	081060eb 	.word	0x081060eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81060c0:	687b      	ldr	r3, [r7, #4]
 81060c2:	3304      	adds	r3, #4
 81060c4:	2101      	movs	r1, #1
 81060c6:	4618      	mov	r0, r3
 81060c8:	f001 fc1c 	bl	8107904 <RCCEx_PLL2_Config>
 81060cc:	4603      	mov	r3, r0
 81060ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81060d0:	e00c      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x88c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	3324      	adds	r3, #36	; 0x24
 81060d6:	2101      	movs	r1, #1
 81060d8:	4618      	mov	r0, r3
 81060da:	f001 fcc5 	bl	8107a68 <RCCEx_PLL3_Config>
 81060de:	4603      	mov	r3, r0
 81060e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81060e2:	e003      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81060e4:	2301      	movs	r3, #1
 81060e6:	75fb      	strb	r3, [r7, #23]
      break;
 81060e8:	e000      	b.n	81060ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
      break;
 81060ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81060ec:	7dfb      	ldrb	r3, [r7, #23]
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	d109      	bne.n	8106106 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81060f2:	4b12      	ldr	r3, [pc, #72]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 81060f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81060f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81060fa:	687b      	ldr	r3, [r7, #4]
 81060fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81060fe:	490f      	ldr	r1, [pc, #60]	; (810613c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8106100:	4313      	orrs	r3, r2
 8106102:	654b      	str	r3, [r1, #84]	; 0x54
 8106104:	e001      	b.n	810610a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106106:	7dfb      	ldrb	r3, [r7, #23]
 8106108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810610a:	687b      	ldr	r3, [r7, #4]
 810610c:	681b      	ldr	r3, [r3, #0]
 810610e:	f003 0302 	and.w	r3, r3, #2
 8106112:	2b00      	cmp	r3, #0
 8106114:	d03b      	beq.n	810618e <HAL_RCCEx_PeriphCLKConfig+0x92e>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8106116:	687b      	ldr	r3, [r7, #4]
 8106118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810611a:	2b05      	cmp	r3, #5
 810611c:	d824      	bhi.n	8106168 <HAL_RCCEx_PeriphCLKConfig+0x908>
 810611e:	a201      	add	r2, pc, #4	; (adr r2, 8106124 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8106120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106124:	0810616f 	.word	0x0810616f
 8106128:	08106145 	.word	0x08106145
 810612c:	08106157 	.word	0x08106157
 8106130:	0810616f 	.word	0x0810616f
 8106134:	0810616f 	.word	0x0810616f
 8106138:	0810616f 	.word	0x0810616f
 810613c:	58024400 	.word	0x58024400
 8106140:	58024800 	.word	0x58024800
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	3304      	adds	r3, #4
 8106148:	2101      	movs	r1, #1
 810614a:	4618      	mov	r0, r3
 810614c:	f001 fbda 	bl	8107904 <RCCEx_PLL2_Config>
 8106150:	4603      	mov	r3, r0
 8106152:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106154:	e00c      	b.n	8106170 <HAL_RCCEx_PeriphCLKConfig+0x910>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	3324      	adds	r3, #36	; 0x24
 810615a:	2101      	movs	r1, #1
 810615c:	4618      	mov	r0, r3
 810615e:	f001 fc83 	bl	8107a68 <RCCEx_PLL3_Config>
 8106162:	4603      	mov	r3, r0
 8106164:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8106166:	e003      	b.n	8106170 <HAL_RCCEx_PeriphCLKConfig+0x910>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106168:	2301      	movs	r3, #1
 810616a:	75fb      	strb	r3, [r7, #23]
      break;
 810616c:	e000      	b.n	8106170 <HAL_RCCEx_PeriphCLKConfig+0x910>
      break;
 810616e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106170:	7dfb      	ldrb	r3, [r7, #23]
 8106172:	2b00      	cmp	r3, #0
 8106174:	d109      	bne.n	810618a <HAL_RCCEx_PeriphCLKConfig+0x92a>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106176:	4ba0      	ldr	r3, [pc, #640]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810617a:	f023 0207 	bic.w	r2, r3, #7
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106182:	499d      	ldr	r1, [pc, #628]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106184:	4313      	orrs	r3, r2
 8106186:	654b      	str	r3, [r1, #84]	; 0x54
 8106188:	e001      	b.n	810618e <HAL_RCCEx_PeriphCLKConfig+0x92e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810618a:	7dfb      	ldrb	r3, [r7, #23]
 810618c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	f003 0304 	and.w	r3, r3, #4
 8106196:	2b00      	cmp	r3, #0
 8106198:	d03a      	beq.n	8106210 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81061a0:	2b05      	cmp	r3, #5
 81061a2:	d821      	bhi.n	81061e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 81061a4:	a201      	add	r2, pc, #4	; (adr r2, 81061ac <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 81061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061aa:	bf00      	nop
 81061ac:	081061ef 	.word	0x081061ef
 81061b0:	081061c5 	.word	0x081061c5
 81061b4:	081061d7 	.word	0x081061d7
 81061b8:	081061ef 	.word	0x081061ef
 81061bc:	081061ef 	.word	0x081061ef
 81061c0:	081061ef 	.word	0x081061ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81061c4:	687b      	ldr	r3, [r7, #4]
 81061c6:	3304      	adds	r3, #4
 81061c8:	2101      	movs	r1, #1
 81061ca:	4618      	mov	r0, r3
 81061cc:	f001 fb9a 	bl	8107904 <RCCEx_PLL2_Config>
 81061d0:	4603      	mov	r3, r0
 81061d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81061d4:	e00c      	b.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	3324      	adds	r3, #36	; 0x24
 81061da:	2101      	movs	r1, #1
 81061dc:	4618      	mov	r0, r3
 81061de:	f001 fc43 	bl	8107a68 <RCCEx_PLL3_Config>
 81061e2:	4603      	mov	r3, r0
 81061e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81061e6:	e003      	b.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81061e8:	2301      	movs	r3, #1
 81061ea:	75fb      	strb	r3, [r7, #23]
      break;
 81061ec:	e000      	b.n	81061f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 81061ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 81061f0:	7dfb      	ldrb	r3, [r7, #23]
 81061f2:	2b00      	cmp	r3, #0
 81061f4:	d10a      	bne.n	810620c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81061f6:	4b80      	ldr	r3, [pc, #512]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 81061f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81061fa:	f023 0207 	bic.w	r2, r3, #7
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106204:	497c      	ldr	r1, [pc, #496]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106206:	4313      	orrs	r3, r2
 8106208:	658b      	str	r3, [r1, #88]	; 0x58
 810620a:	e001      	b.n	8106210 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810620c:	7dfb      	ldrb	r3, [r7, #23]
 810620e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	f003 0320 	and.w	r3, r3, #32
 8106218:	2b00      	cmp	r3, #0
 810621a:	d04b      	beq.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810621c:	687b      	ldr	r3, [r7, #4]
 810621e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8106222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106226:	d02e      	beq.n	8106286 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8106228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810622c:	d828      	bhi.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 810622e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106232:	d02a      	beq.n	810628a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8106234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106238:	d822      	bhi.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 810623a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810623e:	d026      	beq.n	810628e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8106240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106244:	d81c      	bhi.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8106246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810624a:	d010      	beq.n	810626e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 810624c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106250:	d816      	bhi.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8106252:	2b00      	cmp	r3, #0
 8106254:	d01d      	beq.n	8106292 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8106256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810625a:	d111      	bne.n	8106280 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	3304      	adds	r3, #4
 8106260:	2100      	movs	r1, #0
 8106262:	4618      	mov	r0, r3
 8106264:	f001 fb4e 	bl	8107904 <RCCEx_PLL2_Config>
 8106268:	4603      	mov	r3, r0
 810626a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810626c:	e012      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	3324      	adds	r3, #36	; 0x24
 8106272:	2102      	movs	r1, #2
 8106274:	4618      	mov	r0, r3
 8106276:	f001 fbf7 	bl	8107a68 <RCCEx_PLL3_Config>
 810627a:	4603      	mov	r3, r0
 810627c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810627e:	e009      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106280:	2301      	movs	r3, #1
 8106282:	75fb      	strb	r3, [r7, #23]
      break;
 8106284:	e006      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8106286:	bf00      	nop
 8106288:	e004      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 810628a:	bf00      	nop
 810628c:	e002      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 810628e:	bf00      	nop
 8106290:	e000      	b.n	8106294 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8106292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106294:	7dfb      	ldrb	r3, [r7, #23]
 8106296:	2b00      	cmp	r3, #0
 8106298:	d10a      	bne.n	81062b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810629a:	4b57      	ldr	r3, [pc, #348]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 810629c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810629e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81062a8:	4953      	ldr	r1, [pc, #332]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 81062aa:	4313      	orrs	r3, r2
 81062ac:	654b      	str	r3, [r1, #84]	; 0x54
 81062ae:	e001      	b.n	81062b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062b0:	7dfb      	ldrb	r3, [r7, #23]
 81062b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	681b      	ldr	r3, [r3, #0]
 81062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81062bc:	2b00      	cmp	r3, #0
 81062be:	d04b      	beq.n	8106358 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81062c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81062ca:	d02e      	beq.n	810632a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 81062cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81062d0:	d828      	bhi.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 81062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81062d6:	d02a      	beq.n	810632e <HAL_RCCEx_PeriphCLKConfig+0xace>
 81062d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81062dc:	d822      	bhi.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 81062de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81062e2:	d026      	beq.n	8106332 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 81062e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81062e8:	d81c      	bhi.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 81062ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81062ee:	d010      	beq.n	8106312 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 81062f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81062f4:	d816      	bhi.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 81062f6:	2b00      	cmp	r3, #0
 81062f8:	d01d      	beq.n	8106336 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 81062fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81062fe:	d111      	bne.n	8106324 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8106300:	687b      	ldr	r3, [r7, #4]
 8106302:	3304      	adds	r3, #4
 8106304:	2100      	movs	r1, #0
 8106306:	4618      	mov	r0, r3
 8106308:	f001 fafc 	bl	8107904 <RCCEx_PLL2_Config>
 810630c:	4603      	mov	r3, r0
 810630e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8106310:	e012      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	3324      	adds	r3, #36	; 0x24
 8106316:	2102      	movs	r1, #2
 8106318:	4618      	mov	r0, r3
 810631a:	f001 fba5 	bl	8107a68 <RCCEx_PLL3_Config>
 810631e:	4603      	mov	r3, r0
 8106320:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8106322:	e009      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106324:	2301      	movs	r3, #1
 8106326:	75fb      	strb	r3, [r7, #23]
      break;
 8106328:	e006      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 810632a:	bf00      	nop
 810632c:	e004      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 810632e:	bf00      	nop
 8106330:	e002      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8106332:	bf00      	nop
 8106334:	e000      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8106336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106338:	7dfb      	ldrb	r3, [r7, #23]
 810633a:	2b00      	cmp	r3, #0
 810633c:	d10a      	bne.n	8106354 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810633e:	4b2e      	ldr	r3, [pc, #184]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8106340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106342:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8106346:	687b      	ldr	r3, [r7, #4]
 8106348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810634c:	492a      	ldr	r1, [pc, #168]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 810634e:	4313      	orrs	r3, r2
 8106350:	658b      	str	r3, [r1, #88]	; 0x58
 8106352:	e001      	b.n	8106358 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106354:	7dfb      	ldrb	r3, [r7, #23]
 8106356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106360:	2b00      	cmp	r3, #0
 8106362:	d04d      	beq.n	8106400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810636a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810636e:	d02e      	beq.n	81063ce <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8106370:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8106374:	d828      	bhi.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8106376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810637a:	d02a      	beq.n	81063d2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 810637c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106380:	d822      	bhi.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8106382:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8106386:	d026      	beq.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8106388:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810638c:	d81c      	bhi.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 810638e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106392:	d010      	beq.n	81063b6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8106394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106398:	d816      	bhi.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 810639a:	2b00      	cmp	r3, #0
 810639c:	d01d      	beq.n	81063da <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 810639e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81063a2:	d111      	bne.n	81063c8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	3304      	adds	r3, #4
 81063a8:	2100      	movs	r1, #0
 81063aa:	4618      	mov	r0, r3
 81063ac:	f001 faaa 	bl	8107904 <RCCEx_PLL2_Config>
 81063b0:	4603      	mov	r3, r0
 81063b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81063b4:	e012      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	3324      	adds	r3, #36	; 0x24
 81063ba:	2102      	movs	r1, #2
 81063bc:	4618      	mov	r0, r3
 81063be:	f001 fb53 	bl	8107a68 <RCCEx_PLL3_Config>
 81063c2:	4603      	mov	r3, r0
 81063c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81063c6:	e009      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81063c8:	2301      	movs	r3, #1
 81063ca:	75fb      	strb	r3, [r7, #23]
      break;
 81063cc:	e006      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81063ce:	bf00      	nop
 81063d0:	e004      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81063d2:	bf00      	nop
 81063d4:	e002      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81063d6:	bf00      	nop
 81063d8:	e000      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 81063da:	bf00      	nop
    }

    if(ret == HAL_OK)
 81063dc:	7dfb      	ldrb	r3, [r7, #23]
 81063de:	2b00      	cmp	r3, #0
 81063e0:	d10c      	bne.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81063e2:	4b05      	ldr	r3, [pc, #20]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 81063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81063e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81063f0:	4901      	ldr	r1, [pc, #4]	; (81063f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 81063f2:	4313      	orrs	r3, r2
 81063f4:	658b      	str	r3, [r1, #88]	; 0x58
 81063f6:	e003      	b.n	8106400 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 81063f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063fc:	7dfb      	ldrb	r3, [r7, #23]
 81063fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	f003 0308 	and.w	r3, r3, #8
 8106408:	2b00      	cmp	r3, #0
 810640a:	d01a      	beq.n	8106442 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106416:	d10a      	bne.n	810642e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	3324      	adds	r3, #36	; 0x24
 810641c:	2102      	movs	r1, #2
 810641e:	4618      	mov	r0, r3
 8106420:	f001 fb22 	bl	8107a68 <RCCEx_PLL3_Config>
 8106424:	4603      	mov	r3, r0
 8106426:	2b00      	cmp	r3, #0
 8106428:	d001      	beq.n	810642e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 810642a:	2301      	movs	r3, #1
 810642c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810642e:	4b8c      	ldr	r3, [pc, #560]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810643c:	4988      	ldr	r1, [pc, #544]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 810643e:	4313      	orrs	r3, r2
 8106440:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	f003 0310 	and.w	r3, r3, #16
 810644a:	2b00      	cmp	r3, #0
 810644c:	d01a      	beq.n	8106484 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8106454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106458:	d10a      	bne.n	8106470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	3324      	adds	r3, #36	; 0x24
 810645e:	2102      	movs	r1, #2
 8106460:	4618      	mov	r0, r3
 8106462:	f001 fb01 	bl	8107a68 <RCCEx_PLL3_Config>
 8106466:	4603      	mov	r3, r0
 8106468:	2b00      	cmp	r3, #0
 810646a:	d001      	beq.n	8106470 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 810646c:	2301      	movs	r3, #1
 810646e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106470:	4b7b      	ldr	r3, [pc, #492]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810647e:	4978      	ldr	r1, [pc, #480]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106480:	4313      	orrs	r3, r2
 8106482:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	681b      	ldr	r3, [r3, #0]
 8106488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810648c:	2b00      	cmp	r3, #0
 810648e:	d034      	beq.n	81064fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8106496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810649a:	d01d      	beq.n	81064d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 810649c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81064a0:	d817      	bhi.n	81064d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81064a2:	2b00      	cmp	r3, #0
 81064a4:	d003      	beq.n	81064ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 81064a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81064aa:	d009      	beq.n	81064c0 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 81064ac:	e011      	b.n	81064d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	3304      	adds	r3, #4
 81064b2:	2100      	movs	r1, #0
 81064b4:	4618      	mov	r0, r3
 81064b6:	f001 fa25 	bl	8107904 <RCCEx_PLL2_Config>
 81064ba:	4603      	mov	r3, r0
 81064bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81064be:	e00c      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	3324      	adds	r3, #36	; 0x24
 81064c4:	2102      	movs	r1, #2
 81064c6:	4618      	mov	r0, r3
 81064c8:	f001 face 	bl	8107a68 <RCCEx_PLL3_Config>
 81064cc:	4603      	mov	r3, r0
 81064ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81064d0:	e003      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81064d2:	2301      	movs	r3, #1
 81064d4:	75fb      	strb	r3, [r7, #23]
      break;
 81064d6:	e000      	b.n	81064da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 81064d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81064da:	7dfb      	ldrb	r3, [r7, #23]
 81064dc:	2b00      	cmp	r3, #0
 81064de:	d10a      	bne.n	81064f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81064e0:	4b5f      	ldr	r3, [pc, #380]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81064e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81064ee:	495c      	ldr	r1, [pc, #368]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81064f0:	4313      	orrs	r3, r2
 81064f2:	658b      	str	r3, [r1, #88]	; 0x58
 81064f4:	e001      	b.n	81064fa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81064f6:	7dfb      	ldrb	r3, [r7, #23]
 81064f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8106502:	2b00      	cmp	r3, #0
 8106504:	d033      	beq.n	810656e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810650c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106510:	d01c      	beq.n	810654c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8106512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106516:	d816      	bhi.n	8106546 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8106518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810651c:	d003      	beq.n	8106526 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 810651e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106522:	d007      	beq.n	8106534 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8106524:	e00f      	b.n	8106546 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106526:	4b4e      	ldr	r3, [pc, #312]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810652a:	4a4d      	ldr	r2, [pc, #308]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 810652c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8106532:	e00c      	b.n	810654e <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	3324      	adds	r3, #36	; 0x24
 8106538:	2101      	movs	r1, #1
 810653a:	4618      	mov	r0, r3
 810653c:	f001 fa94 	bl	8107a68 <RCCEx_PLL3_Config>
 8106540:	4603      	mov	r3, r0
 8106542:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8106544:	e003      	b.n	810654e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106546:	2301      	movs	r3, #1
 8106548:	75fb      	strb	r3, [r7, #23]
      break;
 810654a:	e000      	b.n	810654e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 810654c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810654e:	7dfb      	ldrb	r3, [r7, #23]
 8106550:	2b00      	cmp	r3, #0
 8106552:	d10a      	bne.n	810656a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106554:	4b42      	ldr	r3, [pc, #264]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106562:	493f      	ldr	r1, [pc, #252]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106564:	4313      	orrs	r3, r2
 8106566:	654b      	str	r3, [r1, #84]	; 0x54
 8106568:	e001      	b.n	810656e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810656a:	7dfb      	ldrb	r3, [r7, #23]
 810656c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106576:	2b00      	cmp	r3, #0
 8106578:	d029      	beq.n	81065ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810657e:	2b00      	cmp	r3, #0
 8106580:	d003      	beq.n	810658a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8106582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106586:	d007      	beq.n	8106598 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8106588:	e00f      	b.n	81065aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810658a:	4b35      	ldr	r3, [pc, #212]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 810658c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810658e:	4a34      	ldr	r2, [pc, #208]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8106596:	e00b      	b.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8106598:	687b      	ldr	r3, [r7, #4]
 810659a:	3304      	adds	r3, #4
 810659c:	2102      	movs	r1, #2
 810659e:	4618      	mov	r0, r3
 81065a0:	f001 f9b0 	bl	8107904 <RCCEx_PLL2_Config>
 81065a4:	4603      	mov	r3, r0
 81065a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81065a8:	e002      	b.n	81065b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 81065aa:	2301      	movs	r3, #1
 81065ac:	75fb      	strb	r3, [r7, #23]
      break;
 81065ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81065b0:	7dfb      	ldrb	r3, [r7, #23]
 81065b2:	2b00      	cmp	r3, #0
 81065b4:	d109      	bne.n	81065ca <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81065b6:	4b2a      	ldr	r3, [pc, #168]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81065b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81065ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81065c2:	4927      	ldr	r1, [pc, #156]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 81065c4:	4313      	orrs	r3, r2
 81065c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81065c8:	e001      	b.n	81065ce <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065ca:	7dfb      	ldrb	r3, [r7, #23]
 81065cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81065d6:	2b00      	cmp	r3, #0
 81065d8:	d00a      	beq.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	3324      	adds	r3, #36	; 0x24
 81065de:	2102      	movs	r1, #2
 81065e0:	4618      	mov	r0, r3
 81065e2:	f001 fa41 	bl	8107a68 <RCCEx_PLL3_Config>
 81065e6:	4603      	mov	r3, r0
 81065e8:	2b00      	cmp	r3, #0
 81065ea:	d001      	beq.n	81065f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 81065ec:	2301      	movs	r3, #1
 81065ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81065f8:	2b00      	cmp	r3, #0
 81065fa:	d035      	beq.n	8106668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106606:	d017      	beq.n	8106638 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8106608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810660c:	d811      	bhi.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810660e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106612:	d013      	beq.n	810663c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8106614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106618:	d80b      	bhi.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810661a:	2b00      	cmp	r3, #0
 810661c:	d010      	beq.n	8106640 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 810661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106622:	d106      	bne.n	8106632 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106624:	4b0e      	ldr	r3, [pc, #56]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106628:	4a0d      	ldr	r2, [pc, #52]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 810662a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810662e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8106630:	e007      	b.n	8106642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8106632:	2301      	movs	r3, #1
 8106634:	75fb      	strb	r3, [r7, #23]
      break;
 8106636:	e004      	b.n	8106642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8106638:	bf00      	nop
 810663a:	e002      	b.n	8106642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 810663c:	bf00      	nop
 810663e:	e000      	b.n	8106642 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8106640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8106642:	7dfb      	ldrb	r3, [r7, #23]
 8106644:	2b00      	cmp	r3, #0
 8106646:	d10d      	bne.n	8106664 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106648:	4b05      	ldr	r3, [pc, #20]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 810664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810664c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106656:	4902      	ldr	r1, [pc, #8]	; (8106660 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8106658:	4313      	orrs	r3, r2
 810665a:	654b      	str	r3, [r1, #84]	; 0x54
 810665c:	e004      	b.n	8106668 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 810665e:	bf00      	nop
 8106660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106664:	7dfb      	ldrb	r3, [r7, #23]
 8106666:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	681b      	ldr	r3, [r3, #0]
 810666c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8106670:	2b00      	cmp	r3, #0
 8106672:	d008      	beq.n	8106686 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106674:	4b31      	ldr	r3, [pc, #196]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106680:	492e      	ldr	r1, [pc, #184]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106682:	4313      	orrs	r3, r2
 8106684:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	681b      	ldr	r3, [r3, #0]
 810668a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810668e:	2b00      	cmp	r3, #0
 8106690:	d009      	beq.n	81066a6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106692:	4b2a      	ldr	r3, [pc, #168]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106694:	691b      	ldr	r3, [r3, #16]
 8106696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810669a:	687b      	ldr	r3, [r7, #4]
 810669c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81066a0:	4926      	ldr	r1, [pc, #152]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066a2:	4313      	orrs	r3, r2
 81066a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81066a6:	687b      	ldr	r3, [r7, #4]
 81066a8:	681b      	ldr	r3, [r3, #0]
 81066aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81066ae:	2b00      	cmp	r3, #0
 81066b0:	d008      	beq.n	81066c4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81066b2:	4b22      	ldr	r3, [pc, #136]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81066b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81066ba:	687b      	ldr	r3, [r7, #4]
 81066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81066be:	491f      	ldr	r1, [pc, #124]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066c0:	4313      	orrs	r3, r2
 81066c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81066cc:	2b00      	cmp	r3, #0
 81066ce:	d00d      	beq.n	81066ec <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81066d0:	4b1a      	ldr	r3, [pc, #104]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066d2:	691b      	ldr	r3, [r3, #16]
 81066d4:	4a19      	ldr	r2, [pc, #100]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81066da:	6113      	str	r3, [r2, #16]
 81066dc:	4b17      	ldr	r3, [pc, #92]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066de:	691a      	ldr	r2, [r3, #16]
 81066e0:	687b      	ldr	r3, [r7, #4]
 81066e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81066e6:	4915      	ldr	r1, [pc, #84]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066e8:	4313      	orrs	r3, r2
 81066ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	2b00      	cmp	r3, #0
 81066f2:	da08      	bge.n	8106706 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81066f4:	4b11      	ldr	r3, [pc, #68]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 81066f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81066f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106700:	490e      	ldr	r1, [pc, #56]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106702:	4313      	orrs	r3, r2
 8106704:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	681b      	ldr	r3, [r3, #0]
 810670a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810670e:	2b00      	cmp	r3, #0
 8106710:	d009      	beq.n	8106726 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106712:	4b0a      	ldr	r3, [pc, #40]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8106720:	4906      	ldr	r1, [pc, #24]	; (810673c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8106722:	4313      	orrs	r3, r2
 8106724:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8106726:	7dbb      	ldrb	r3, [r7, #22]
 8106728:	2b00      	cmp	r3, #0
 810672a:	d101      	bne.n	8106730 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 810672c:	2300      	movs	r3, #0
 810672e:	e000      	b.n	8106732 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8106730:	2301      	movs	r3, #1
}
 8106732:	4618      	mov	r0, r3
 8106734:	3718      	adds	r7, #24
 8106736:	46bd      	mov	sp, r7
 8106738:	bd80      	pop	{r7, pc}
 810673a:	bf00      	nop
 810673c:	58024400 	.word	0x58024400

08106740 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8106740:	b580      	push	{r7, lr}
 8106742:	b090      	sub	sp, #64	; 0x40
 8106744:	af00      	add	r7, sp, #0
 8106746:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810674e:	f040 8095 	bne.w	810687c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8106752:	4bae      	ldr	r3, [pc, #696]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106756:	f003 0307 	and.w	r3, r3, #7
 810675a:	633b      	str	r3, [r7, #48]	; 0x30
 810675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810675e:	2b04      	cmp	r3, #4
 8106760:	f200 8088 	bhi.w	8106874 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8106764:	a201      	add	r2, pc, #4	; (adr r2, 810676c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8106766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810676a:	bf00      	nop
 810676c:	08106781 	.word	0x08106781
 8106770:	081067a9 	.word	0x081067a9
 8106774:	081067d1 	.word	0x081067d1
 8106778:	0810686d 	.word	0x0810686d
 810677c:	081067f9 	.word	0x081067f9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106780:	4ba2      	ldr	r3, [pc, #648]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810678c:	d108      	bne.n	81067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810678e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106792:	4618      	mov	r0, r3
 8106794:	f000 ff64 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8106798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810679a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810679c:	f000 bc95 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81067a0:	2300      	movs	r3, #0
 81067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81067a4:	f000 bc91 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81067a8:	4b98      	ldr	r3, [pc, #608]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81067aa:	681b      	ldr	r3, [r3, #0]
 81067ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81067b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81067b4:	d108      	bne.n	81067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81067b6:	f107 0318 	add.w	r3, r7, #24
 81067ba:	4618      	mov	r0, r3
 81067bc:	f000 fca8 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81067c0:	69bb      	ldr	r3, [r7, #24]
 81067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81067c4:	f000 bc81 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81067c8:	2300      	movs	r3, #0
 81067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81067cc:	f000 bc7d 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81067d0:	4b8e      	ldr	r3, [pc, #568]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81067d2:	681b      	ldr	r3, [r3, #0]
 81067d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81067d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81067dc:	d108      	bne.n	81067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81067de:	f107 030c 	add.w	r3, r7, #12
 81067e2:	4618      	mov	r0, r3
 81067e4:	f000 fde8 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81067e8:	68fb      	ldr	r3, [r7, #12]
 81067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81067ec:	f000 bc6d 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81067f0:	2300      	movs	r3, #0
 81067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81067f4:	f000 bc69 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 81067f8:	4b84      	ldr	r3, [pc, #528]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81067fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106800:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106802:	4b82      	ldr	r3, [pc, #520]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106804:	681b      	ldr	r3, [r3, #0]
 8106806:	f003 0304 	and.w	r3, r3, #4
 810680a:	2b04      	cmp	r3, #4
 810680c:	d10c      	bne.n	8106828 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 810680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106810:	2b00      	cmp	r3, #0
 8106812:	d109      	bne.n	8106828 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106814:	4b7d      	ldr	r3, [pc, #500]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	08db      	lsrs	r3, r3, #3
 810681a:	f003 0303 	and.w	r3, r3, #3
 810681e:	4a7c      	ldr	r2, [pc, #496]	; (8106a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8106820:	fa22 f303 	lsr.w	r3, r2, r3
 8106824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106826:	e01f      	b.n	8106868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106828:	4b78      	ldr	r3, [pc, #480]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 810682a:	681b      	ldr	r3, [r3, #0]
 810682c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106834:	d106      	bne.n	8106844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8106836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810683c:	d102      	bne.n	8106844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810683e:	4b75      	ldr	r3, [pc, #468]	; (8106a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8106840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106842:	e011      	b.n	8106868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106844:	4b71      	ldr	r3, [pc, #452]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810684c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106850:	d106      	bne.n	8106860 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8106852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106858:	d102      	bne.n	8106860 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810685a:	4b6f      	ldr	r3, [pc, #444]	; (8106a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 810685c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810685e:	e003      	b.n	8106868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106860:	2300      	movs	r3, #0
 8106862:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106864:	f000 bc31 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106868:	f000 bc2f 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810686c:	4b6b      	ldr	r3, [pc, #428]	; (8106a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 810686e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106870:	f000 bc2b 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8106874:	2300      	movs	r3, #0
 8106876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106878:	f000 bc27 	b.w	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8106882:	f040 8095 	bne.w	81069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8106886:	4b61      	ldr	r3, [pc, #388]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810688a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810688e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106896:	d04d      	beq.n	8106934 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8106898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810689a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810689e:	f200 8084 	bhi.w	81069aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068a4:	2bc0      	cmp	r3, #192	; 0xc0
 81068a6:	d07d      	beq.n	81069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 81068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068aa:	2bc0      	cmp	r3, #192	; 0xc0
 81068ac:	d87d      	bhi.n	81069aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068b0:	2b80      	cmp	r3, #128	; 0x80
 81068b2:	d02d      	beq.n	8106910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 81068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068b6:	2b80      	cmp	r3, #128	; 0x80
 81068b8:	d877      	bhi.n	81069aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 81068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068bc:	2b00      	cmp	r3, #0
 81068be:	d003      	beq.n	81068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 81068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068c2:	2b40      	cmp	r3, #64	; 0x40
 81068c4:	d012      	beq.n	81068ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 81068c6:	e070      	b.n	81069aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81068c8:	4b50      	ldr	r3, [pc, #320]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81068ca:	681b      	ldr	r3, [r3, #0]
 81068cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81068d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81068d4:	d107      	bne.n	81068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81068d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81068da:	4618      	mov	r0, r3
 81068dc:	f000 fec0 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81068e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81068e4:	e3f1      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81068e6:	2300      	movs	r3, #0
 81068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81068ea:	e3ee      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81068ec:	4b47      	ldr	r3, [pc, #284]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81068ee:	681b      	ldr	r3, [r3, #0]
 81068f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81068f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81068f8:	d107      	bne.n	810690a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81068fa:	f107 0318 	add.w	r3, r7, #24
 81068fe:	4618      	mov	r0, r3
 8106900:	f000 fc06 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106904:	69bb      	ldr	r3, [r7, #24]
 8106906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106908:	e3df      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810690a:	2300      	movs	r3, #0
 810690c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810690e:	e3dc      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106910:	4b3e      	ldr	r3, [pc, #248]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106912:	681b      	ldr	r3, [r3, #0]
 8106914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810691c:	d107      	bne.n	810692e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810691e:	f107 030c 	add.w	r3, r7, #12
 8106922:	4618      	mov	r0, r3
 8106924:	f000 fd48 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106928:	68fb      	ldr	r3, [r7, #12]
 810692a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810692c:	e3cd      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810692e:	2300      	movs	r3, #0
 8106930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106932:	e3ca      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106934:	4b35      	ldr	r3, [pc, #212]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810693c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810693e:	4b33      	ldr	r3, [pc, #204]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106940:	681b      	ldr	r3, [r3, #0]
 8106942:	f003 0304 	and.w	r3, r3, #4
 8106946:	2b04      	cmp	r3, #4
 8106948:	d10c      	bne.n	8106964 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 810694a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810694c:	2b00      	cmp	r3, #0
 810694e:	d109      	bne.n	8106964 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106950:	4b2e      	ldr	r3, [pc, #184]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106952:	681b      	ldr	r3, [r3, #0]
 8106954:	08db      	lsrs	r3, r3, #3
 8106956:	f003 0303 	and.w	r3, r3, #3
 810695a:	4a2d      	ldr	r2, [pc, #180]	; (8106a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 810695c:	fa22 f303 	lsr.w	r3, r2, r3
 8106960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106962:	e01e      	b.n	81069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106964:	4b29      	ldr	r3, [pc, #164]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810696c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106970:	d106      	bne.n	8106980 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8106972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106978:	d102      	bne.n	8106980 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 810697a:	4b26      	ldr	r3, [pc, #152]	; (8106a14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 810697c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810697e:	e010      	b.n	81069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106980:	4b22      	ldr	r3, [pc, #136]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8106982:	681b      	ldr	r3, [r3, #0]
 8106984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810698c:	d106      	bne.n	810699c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 810698e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106994:	d102      	bne.n	810699c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106996:	4b20      	ldr	r3, [pc, #128]	; (8106a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8106998:	63fb      	str	r3, [r7, #60]	; 0x3c
 810699a:	e002      	b.n	81069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810699c:	2300      	movs	r3, #0
 810699e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 81069a0:	e393      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81069a2:	e392      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 81069a4:	4b1d      	ldr	r3, [pc, #116]	; (8106a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 81069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069a8:	e38f      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81069aa:	2300      	movs	r3, #0
 81069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81069ae:	e38c      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81069b6:	f040 80a7 	bne.w	8106b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 81069ba:	4b14      	ldr	r3, [pc, #80]	; (8106a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 81069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81069be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 81069c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 81069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81069ca:	d05f      	beq.n	8106a8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 81069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81069d2:	f200 8096 	bhi.w	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81069dc:	f000 808e 	beq.w	8106afc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 81069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81069e6:	f200 808c 	bhi.w	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81069f0:	d03a      	beq.n	8106a68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 81069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81069f8:	f200 8083 	bhi.w	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 81069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069fe:	2b00      	cmp	r3, #0
 8106a00:	d00e      	beq.n	8106a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8106a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106a08:	d01c      	beq.n	8106a44 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8106a0a:	e07a      	b.n	8106b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8106a0c:	58024400 	.word	0x58024400
 8106a10:	03d09000 	.word	0x03d09000
 8106a14:	003d0900 	.word	0x003d0900
 8106a18:	02dc6c00 	.word	0x02dc6c00
 8106a1c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106a20:	4baa      	ldr	r3, [pc, #680]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106a28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106a2c:	d107      	bne.n	8106a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106a32:	4618      	mov	r0, r3
 8106a34:	f000 fe14 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a3c:	e345      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106a3e:	2300      	movs	r3, #0
 8106a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a42:	e342      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106a44:	4ba1      	ldr	r3, [pc, #644]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106a50:	d107      	bne.n	8106a62 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106a52:	f107 0318 	add.w	r3, r7, #24
 8106a56:	4618      	mov	r0, r3
 8106a58:	f000 fb5a 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106a5c:	69bb      	ldr	r3, [r7, #24]
 8106a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a60:	e333      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106a62:	2300      	movs	r3, #0
 8106a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a66:	e330      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106a68:	4b98      	ldr	r3, [pc, #608]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106a74:	d107      	bne.n	8106a86 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106a76:	f107 030c 	add.w	r3, r7, #12
 8106a7a:	4618      	mov	r0, r3
 8106a7c:	f000 fc9c 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106a80:	68fb      	ldr	r3, [r7, #12]
 8106a82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106a84:	e321      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106a86:	2300      	movs	r3, #0
 8106a88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106a8a:	e31e      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106a8c:	4b8f      	ldr	r3, [pc, #572]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106a94:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106a96:	4b8d      	ldr	r3, [pc, #564]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	f003 0304 	and.w	r3, r3, #4
 8106a9e:	2b04      	cmp	r3, #4
 8106aa0:	d10c      	bne.n	8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8106aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106aa4:	2b00      	cmp	r3, #0
 8106aa6:	d109      	bne.n	8106abc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106aa8:	4b88      	ldr	r3, [pc, #544]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106aaa:	681b      	ldr	r3, [r3, #0]
 8106aac:	08db      	lsrs	r3, r3, #3
 8106aae:	f003 0303 	and.w	r3, r3, #3
 8106ab2:	4a87      	ldr	r2, [pc, #540]	; (8106cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8106ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8106ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106aba:	e01e      	b.n	8106afa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106abc:	4b83      	ldr	r3, [pc, #524]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106abe:	681b      	ldr	r3, [r3, #0]
 8106ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106ac8:	d106      	bne.n	8106ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8106aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106ad0:	d102      	bne.n	8106ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106ad2:	4b80      	ldr	r3, [pc, #512]	; (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8106ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106ad6:	e010      	b.n	8106afa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106ad8:	4b7c      	ldr	r3, [pc, #496]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106ae4:	d106      	bne.n	8106af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8106ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106aec:	d102      	bne.n	8106af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106aee:	4b7a      	ldr	r3, [pc, #488]	; (8106cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8106af0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106af2:	e002      	b.n	8106afa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106af4:	2300      	movs	r3, #0
 8106af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106af8:	e2e7      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106afa:	e2e6      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106afc:	4b77      	ldr	r3, [pc, #476]	; (8106cdc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8106afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b00:	e2e3      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106b02:	2300      	movs	r3, #0
 8106b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b06:	e2e0      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106b0e:	f040 809c 	bne.w	8106c4a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8106b12:	4b6e      	ldr	r3, [pc, #440]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106b16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8106b1a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8106b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106b22:	d054      	beq.n	8106bce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8106b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106b2a:	f200 808b 	bhi.w	8106c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8106b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106b34:	f000 8083 	beq.w	8106c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8106b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106b3e:	f200 8081 	bhi.w	8106c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8106b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b48:	d02f      	beq.n	8106baa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8106b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b50:	d878      	bhi.n	8106c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8106b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b54:	2b00      	cmp	r3, #0
 8106b56:	d004      	beq.n	8106b62 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8106b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106b5e:	d012      	beq.n	8106b86 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8106b60:	e070      	b.n	8106c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106b62:	4b5a      	ldr	r3, [pc, #360]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b64:	681b      	ldr	r3, [r3, #0]
 8106b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106b6e:	d107      	bne.n	8106b80 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106b74:	4618      	mov	r0, r3
 8106b76:	f000 fd73 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106b7e:	e2a4      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106b80:	2300      	movs	r3, #0
 8106b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106b84:	e2a1      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106b86:	4b51      	ldr	r3, [pc, #324]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106b92:	d107      	bne.n	8106ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106b94:	f107 0318 	add.w	r3, r7, #24
 8106b98:	4618      	mov	r0, r3
 8106b9a:	f000 fab9 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106b9e:	69bb      	ldr	r3, [r7, #24]
 8106ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8106ba2:	e292      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106ba4:	2300      	movs	r3, #0
 8106ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ba8:	e28f      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106baa:	4b48      	ldr	r3, [pc, #288]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106bac:	681b      	ldr	r3, [r3, #0]
 8106bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106bb6:	d107      	bne.n	8106bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106bb8:	f107 030c 	add.w	r3, r7, #12
 8106bbc:	4618      	mov	r0, r3
 8106bbe:	f000 fbfb 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106bc6:	e280      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106bc8:	2300      	movs	r3, #0
 8106bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106bcc:	e27d      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106bce:	4b3f      	ldr	r3, [pc, #252]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106bd6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106bd8:	4b3c      	ldr	r3, [pc, #240]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106bda:	681b      	ldr	r3, [r3, #0]
 8106bdc:	f003 0304 	and.w	r3, r3, #4
 8106be0:	2b04      	cmp	r3, #4
 8106be2:	d10c      	bne.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8106be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106be6:	2b00      	cmp	r3, #0
 8106be8:	d109      	bne.n	8106bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106bea:	4b38      	ldr	r3, [pc, #224]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106bec:	681b      	ldr	r3, [r3, #0]
 8106bee:	08db      	lsrs	r3, r3, #3
 8106bf0:	f003 0303 	and.w	r3, r3, #3
 8106bf4:	4a36      	ldr	r2, [pc, #216]	; (8106cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8106bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8106bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106bfc:	e01e      	b.n	8106c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106bfe:	4b33      	ldr	r3, [pc, #204]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c00:	681b      	ldr	r3, [r3, #0]
 8106c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106c0a:	d106      	bne.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8106c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106c12:	d102      	bne.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106c14:	4b2f      	ldr	r3, [pc, #188]	; (8106cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8106c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c18:	e010      	b.n	8106c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106c1a:	4b2c      	ldr	r3, [pc, #176]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c1c:	681b      	ldr	r3, [r3, #0]
 8106c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106c26:	d106      	bne.n	8106c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8106c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106c2e:	d102      	bne.n	8106c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106c30:	4b29      	ldr	r3, [pc, #164]	; (8106cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8106c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106c34:	e002      	b.n	8106c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106c36:	2300      	movs	r3, #0
 8106c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106c3a:	e246      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106c3c:	e245      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106c3e:	4b27      	ldr	r3, [pc, #156]	; (8106cdc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8106c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c42:	e242      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106c44:	2300      	movs	r3, #0
 8106c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106c48:	e23f      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106c50:	f040 80a8 	bne.w	8106da4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8106c54:	4b1d      	ldr	r3, [pc, #116]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106c58:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8106c5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106c64:	d060      	beq.n	8106d28 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8106c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106c6c:	f200 8097 	bhi.w	8106d9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8106c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106c76:	f000 808f 	beq.w	8106d98 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8106c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106c80:	f200 808d 	bhi.w	8106d9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8106c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106c8a:	d03b      	beq.n	8106d04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8106c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106c92:	f200 8084 	bhi.w	8106d9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8106c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	d004      	beq.n	8106ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8106c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106ca2:	d01d      	beq.n	8106ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8106ca4:	e07b      	b.n	8106d9e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106ca6:	4b09      	ldr	r3, [pc, #36]	; (8106ccc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106cae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106cb2:	d107      	bne.n	8106cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106cb8:	4618      	mov	r0, r3
 8106cba:	f000 fcd1 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106cc2:	e202      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106cc4:	2300      	movs	r3, #0
 8106cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106cc8:	e1ff      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106cca:	bf00      	nop
 8106ccc:	58024400 	.word	0x58024400
 8106cd0:	03d09000 	.word	0x03d09000
 8106cd4:	003d0900 	.word	0x003d0900
 8106cd8:	02dc6c00 	.word	0x02dc6c00
 8106cdc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ce0:	4ba3      	ldr	r3, [pc, #652]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106ce2:	681b      	ldr	r3, [r3, #0]
 8106ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106cec:	d107      	bne.n	8106cfe <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106cee:	f107 0318 	add.w	r3, r7, #24
 8106cf2:	4618      	mov	r0, r3
 8106cf4:	f000 fa0c 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106cf8:	69bb      	ldr	r3, [r7, #24]
 8106cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106cfc:	e1e5      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106cfe:	2300      	movs	r3, #0
 8106d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d02:	e1e2      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106d04:	4b9a      	ldr	r3, [pc, #616]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d06:	681b      	ldr	r3, [r3, #0]
 8106d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d10:	d107      	bne.n	8106d22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106d12:	f107 030c 	add.w	r3, r7, #12
 8106d16:	4618      	mov	r0, r3
 8106d18:	f000 fb4e 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106d1c:	68fb      	ldr	r3, [r7, #12]
 8106d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106d20:	e1d3      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106d22:	2300      	movs	r3, #0
 8106d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d26:	e1d0      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106d28:	4b91      	ldr	r3, [pc, #580]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106d30:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106d32:	4b8f      	ldr	r3, [pc, #572]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d34:	681b      	ldr	r3, [r3, #0]
 8106d36:	f003 0304 	and.w	r3, r3, #4
 8106d3a:	2b04      	cmp	r3, #4
 8106d3c:	d10c      	bne.n	8106d58 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8106d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d40:	2b00      	cmp	r3, #0
 8106d42:	d109      	bne.n	8106d58 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106d44:	4b8a      	ldr	r3, [pc, #552]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d46:	681b      	ldr	r3, [r3, #0]
 8106d48:	08db      	lsrs	r3, r3, #3
 8106d4a:	f003 0303 	and.w	r3, r3, #3
 8106d4e:	4a89      	ldr	r2, [pc, #548]	; (8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8106d50:	fa22 f303 	lsr.w	r3, r2, r3
 8106d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d56:	e01e      	b.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106d58:	4b85      	ldr	r3, [pc, #532]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106d64:	d106      	bne.n	8106d74 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8106d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106d6c:	d102      	bne.n	8106d74 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106d6e:	4b82      	ldr	r3, [pc, #520]	; (8106f78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8106d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d72:	e010      	b.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106d74:	4b7e      	ldr	r3, [pc, #504]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d80:	d106      	bne.n	8106d90 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8106d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106d88:	d102      	bne.n	8106d90 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106d8a:	4b7c      	ldr	r3, [pc, #496]	; (8106f7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8106d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106d8e:	e002      	b.n	8106d96 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106d90:	2300      	movs	r3, #0
 8106d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106d94:	e199      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106d96:	e198      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8106d98:	4b79      	ldr	r3, [pc, #484]	; (8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8106d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106d9c:	e195      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8106d9e:	2300      	movs	r3, #0
 8106da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106da2:	e192      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8106da4:	687b      	ldr	r3, [r7, #4]
 8106da6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106daa:	d173      	bne.n	8106e94 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8106dac:	4b70      	ldr	r3, [pc, #448]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8106db4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106dbc:	d02f      	beq.n	8106e1e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8106dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106dc4:	d863      	bhi.n	8106e8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8106dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dc8:	2b00      	cmp	r3, #0
 8106dca:	d004      	beq.n	8106dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8106dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106dd2:	d012      	beq.n	8106dfa <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8106dd4:	e05b      	b.n	8106e8e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106dd6:	4b66      	ldr	r3, [pc, #408]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dd8:	681b      	ldr	r3, [r3, #0]
 8106dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106de2:	d107      	bne.n	8106df4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106de4:	f107 0318 	add.w	r3, r7, #24
 8106de8:	4618      	mov	r0, r3
 8106dea:	f000 f991 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106dee:	69bb      	ldr	r3, [r7, #24]
 8106df0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106df2:	e16a      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106df4:	2300      	movs	r3, #0
 8106df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106df8:	e167      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106dfa:	4b5d      	ldr	r3, [pc, #372]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106dfc:	681b      	ldr	r3, [r3, #0]
 8106dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e06:	d107      	bne.n	8106e18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e08:	f107 030c 	add.w	r3, r7, #12
 8106e0c:	4618      	mov	r0, r3
 8106e0e:	f000 fad3 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8106e12:	697b      	ldr	r3, [r7, #20]
 8106e14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8106e16:	e158      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8106e18:	2300      	movs	r3, #0
 8106e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e1c:	e155      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8106e1e:	4b54      	ldr	r3, [pc, #336]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106e22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8106e26:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106e28:	4b51      	ldr	r3, [pc, #324]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e2a:	681b      	ldr	r3, [r3, #0]
 8106e2c:	f003 0304 	and.w	r3, r3, #4
 8106e30:	2b04      	cmp	r3, #4
 8106e32:	d10c      	bne.n	8106e4e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8106e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e36:	2b00      	cmp	r3, #0
 8106e38:	d109      	bne.n	8106e4e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106e3a:	4b4d      	ldr	r3, [pc, #308]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e3c:	681b      	ldr	r3, [r3, #0]
 8106e3e:	08db      	lsrs	r3, r3, #3
 8106e40:	f003 0303 	and.w	r3, r3, #3
 8106e44:	4a4b      	ldr	r2, [pc, #300]	; (8106f74 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8106e46:	fa22 f303 	lsr.w	r3, r2, r3
 8106e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e4c:	e01e      	b.n	8106e8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106e4e:	4b48      	ldr	r3, [pc, #288]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e50:	681b      	ldr	r3, [r3, #0]
 8106e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106e5a:	d106      	bne.n	8106e6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8106e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106e62:	d102      	bne.n	8106e6a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8106e64:	4b44      	ldr	r3, [pc, #272]	; (8106f78 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8106e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e68:	e010      	b.n	8106e8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106e6a:	4b41      	ldr	r3, [pc, #260]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e6c:	681b      	ldr	r3, [r3, #0]
 8106e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8106e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106e76:	d106      	bne.n	8106e86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8106e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e7e:	d102      	bne.n	8106e86 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8106e80:	4b3e      	ldr	r3, [pc, #248]	; (8106f7c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8106e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8106e84:	e002      	b.n	8106e8c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8106e86:	2300      	movs	r3, #0
 8106e88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8106e8a:	e11e      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106e8c:	e11d      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106e8e:	2300      	movs	r3, #0
 8106e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106e92:	e11a      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106e94:	687b      	ldr	r3, [r7, #4]
 8106e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106e9a:	d133      	bne.n	8106f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8106e9c:	4b34      	ldr	r3, [pc, #208]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106ea4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106ea8:	2b00      	cmp	r3, #0
 8106eaa:	d004      	beq.n	8106eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8106eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106eb2:	d012      	beq.n	8106eda <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8106eb4:	e023      	b.n	8106efe <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106eb6:	4b2e      	ldr	r3, [pc, #184]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8106ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106ec2:	d107      	bne.n	8106ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8106ec8:	4618      	mov	r0, r3
 8106eca:	f000 fbc9 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106ed2:	e0fa      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106ed4:	2300      	movs	r3, #0
 8106ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ed8:	e0f7      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106eda:	4b25      	ldr	r3, [pc, #148]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106edc:	681b      	ldr	r3, [r3, #0]
 8106ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106ee6:	d107      	bne.n	8106ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ee8:	f107 0318 	add.w	r3, r7, #24
 8106eec:	4618      	mov	r0, r3
 8106eee:	f000 f90f 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8106ef2:	6a3b      	ldr	r3, [r7, #32]
 8106ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106ef6:	e0e8      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106ef8:	2300      	movs	r3, #0
 8106efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106efc:	e0e5      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8106efe:	2300      	movs	r3, #0
 8106f00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106f02:	e0e2      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106f0a:	f040 808f 	bne.w	810702c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8106f0e:	4b18      	ldr	r3, [pc, #96]	; (8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8106f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106f12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8106f16:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8106f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106f1e:	d075      	beq.n	810700c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8106f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106f26:	d87e      	bhi.n	8107026 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106f2e:	d060      	beq.n	8106ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8106f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106f36:	d876      	bhi.n	8107026 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106f3e:	d045      	beq.n	8106fcc <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8106f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106f46:	d86e      	bhi.n	8107026 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f4e:	d02b      	beq.n	8106fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8106f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106f56:	d866      	bhi.n	8107026 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8106f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f5a:	2b00      	cmp	r3, #0
 8106f5c:	d004      	beq.n	8106f68 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8106f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106f64:	d00e      	beq.n	8106f84 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8106f66:	e05e      	b.n	8107026 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8106f68:	f000 f8bc 	bl	81070e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8106f6c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8106f6e:	e0ac      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8106f70:	58024400 	.word	0x58024400
 8106f74:	03d09000 	.word	0x03d09000
 8106f78:	003d0900 	.word	0x003d0900
 8106f7c:	02dc6c00 	.word	0x02dc6c00
 8106f80:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106f84:	4b53      	ldr	r3, [pc, #332]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8106f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8106f90:	d107      	bne.n	8106fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f92:	f107 0318 	add.w	r3, r7, #24
 8106f96:	4618      	mov	r0, r3
 8106f98:	f000 f8ba 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106f9c:	69fb      	ldr	r3, [r7, #28]
 8106f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106fa0:	e093      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106fa2:	2300      	movs	r3, #0
 8106fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106fa6:	e090      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106fa8:	4b4a      	ldr	r3, [pc, #296]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106fb4:	d107      	bne.n	8106fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106fb6:	f107 030c 	add.w	r3, r7, #12
 8106fba:	4618      	mov	r0, r3
 8106fbc:	f000 f9fc 	bl	81073b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8106fc0:	693b      	ldr	r3, [r7, #16]
 8106fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106fc4:	e081      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106fc6:	2300      	movs	r3, #0
 8106fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106fca:	e07e      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106fcc:	4b41      	ldr	r3, [pc, #260]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	f003 0304 	and.w	r3, r3, #4
 8106fd4:	2b04      	cmp	r3, #4
 8106fd6:	d109      	bne.n	8106fec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106fd8:	4b3e      	ldr	r3, [pc, #248]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	08db      	lsrs	r3, r3, #3
 8106fde:	f003 0303 	and.w	r3, r3, #3
 8106fe2:	4a3d      	ldr	r2, [pc, #244]	; (81070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8106fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8106fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8106fea:	e06e      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8106fec:	2300      	movs	r3, #0
 8106fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8106ff0:	e06b      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8106ff2:	4b38      	ldr	r3, [pc, #224]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8106ff4:	681b      	ldr	r3, [r3, #0]
 8106ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106ffe:	d102      	bne.n	8107006 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8107000:	4b36      	ldr	r3, [pc, #216]	; (81070dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8107002:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8107004:	e061      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8107006:	2300      	movs	r3, #0
 8107008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810700a:	e05e      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810700c:	4b31      	ldr	r3, [pc, #196]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810700e:	681b      	ldr	r3, [r3, #0]
 8107010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107018:	d102      	bne.n	8107020 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810701a:	4b31      	ldr	r3, [pc, #196]	; (81070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810701c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 810701e:	e054      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107020:	2300      	movs	r3, #0
 8107022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107024:	e051      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8107026:	2300      	movs	r3, #0
 8107028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810702a:	e04e      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107032:	d148      	bne.n	81070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8107034:	4b27      	ldr	r3, [pc, #156]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810703c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107044:	d02a      	beq.n	810709c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8107046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810704c:	d838      	bhi.n	81070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 810704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107050:	2b00      	cmp	r3, #0
 8107052:	d004      	beq.n	810705e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8107054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810705a:	d00d      	beq.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 810705c:	e030      	b.n	81070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810705e:	4b1d      	ldr	r3, [pc, #116]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8107060:	681b      	ldr	r3, [r3, #0]
 8107062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810706a:	d102      	bne.n	8107072 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 810706c:	4b1c      	ldr	r3, [pc, #112]	; (81070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 810706e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107070:	e02b      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107072:	2300      	movs	r3, #0
 8107074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8107076:	e028      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107078:	4b16      	ldr	r3, [pc, #88]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810707a:	681b      	ldr	r3, [r3, #0]
 810707c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107084:	d107      	bne.n	8107096 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810708a:	4618      	mov	r0, r3
 810708c:	f000 fae8 	bl	8107660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8107094:	e019      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8107096:	2300      	movs	r3, #0
 8107098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810709a:	e016      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810709c:	4b0d      	ldr	r3, [pc, #52]	; (81070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81070a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81070a8:	d107      	bne.n	81070ba <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81070aa:	f107 0318 	add.w	r3, r7, #24
 81070ae:	4618      	mov	r0, r3
 81070b0:	f000 f82e 	bl	8107110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81070b4:	69fb      	ldr	r3, [r7, #28]
 81070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81070b8:	e007      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81070ba:	2300      	movs	r3, #0
 81070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070be:	e004      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81070c0:	2300      	movs	r3, #0
 81070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81070c4:	e001      	b.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 81070c6:	2300      	movs	r3, #0
 81070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81070ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81070cc:	4618      	mov	r0, r3
 81070ce:	3740      	adds	r7, #64	; 0x40
 81070d0:	46bd      	mov	sp, r7
 81070d2:	bd80      	pop	{r7, pc}
 81070d4:	58024400 	.word	0x58024400
 81070d8:	03d09000 	.word	0x03d09000
 81070dc:	003d0900 	.word	0x003d0900
 81070e0:	02dc6c00 	.word	0x02dc6c00

081070e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81070e4:	b580      	push	{r7, lr}
 81070e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81070e8:	f7fe fb88 	bl	81057fc <HAL_RCC_GetHCLKFreq>
 81070ec:	4602      	mov	r2, r0
 81070ee:	4b06      	ldr	r3, [pc, #24]	; (8107108 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81070f0:	6a1b      	ldr	r3, [r3, #32]
 81070f2:	091b      	lsrs	r3, r3, #4
 81070f4:	f003 0307 	and.w	r3, r3, #7
 81070f8:	4904      	ldr	r1, [pc, #16]	; (810710c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81070fa:	5ccb      	ldrb	r3, [r1, r3]
 81070fc:	f003 031f 	and.w	r3, r3, #31
 8107100:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107104:	4618      	mov	r0, r3
 8107106:	bd80      	pop	{r7, pc}
 8107108:	58024400 	.word	0x58024400
 810710c:	0810d680 	.word	0x0810d680

08107110 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8107110:	b480      	push	{r7}
 8107112:	b089      	sub	sp, #36	; 0x24
 8107114:	af00      	add	r7, sp, #0
 8107116:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107118:	4ba1      	ldr	r3, [pc, #644]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810711c:	f003 0303 	and.w	r3, r3, #3
 8107120:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8107122:	4b9f      	ldr	r3, [pc, #636]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107126:	0b1b      	lsrs	r3, r3, #12
 8107128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810712c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810712e:	4b9c      	ldr	r3, [pc, #624]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107132:	091b      	lsrs	r3, r3, #4
 8107134:	f003 0301 	and.w	r3, r3, #1
 8107138:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810713a:	4b99      	ldr	r3, [pc, #612]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810713e:	08db      	lsrs	r3, r3, #3
 8107140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107144:	693a      	ldr	r2, [r7, #16]
 8107146:	fb02 f303 	mul.w	r3, r2, r3
 810714a:	ee07 3a90 	vmov	s15, r3
 810714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107156:	697b      	ldr	r3, [r7, #20]
 8107158:	2b00      	cmp	r3, #0
 810715a:	f000 8111 	beq.w	8107380 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810715e:	69bb      	ldr	r3, [r7, #24]
 8107160:	2b02      	cmp	r3, #2
 8107162:	f000 8083 	beq.w	810726c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107166:	69bb      	ldr	r3, [r7, #24]
 8107168:	2b02      	cmp	r3, #2
 810716a:	f200 80a1 	bhi.w	81072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810716e:	69bb      	ldr	r3, [r7, #24]
 8107170:	2b00      	cmp	r3, #0
 8107172:	d003      	beq.n	810717c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107174:	69bb      	ldr	r3, [r7, #24]
 8107176:	2b01      	cmp	r3, #1
 8107178:	d056      	beq.n	8107228 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810717a:	e099      	b.n	81072b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810717c:	4b88      	ldr	r3, [pc, #544]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	f003 0320 	and.w	r3, r3, #32
 8107184:	2b00      	cmp	r3, #0
 8107186:	d02d      	beq.n	81071e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107188:	4b85      	ldr	r3, [pc, #532]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810718a:	681b      	ldr	r3, [r3, #0]
 810718c:	08db      	lsrs	r3, r3, #3
 810718e:	f003 0303 	and.w	r3, r3, #3
 8107192:	4a84      	ldr	r2, [pc, #528]	; (81073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107194:	fa22 f303 	lsr.w	r3, r2, r3
 8107198:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810719a:	68bb      	ldr	r3, [r7, #8]
 810719c:	ee07 3a90 	vmov	s15, r3
 81071a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81071a4:	697b      	ldr	r3, [r7, #20]
 81071a6:	ee07 3a90 	vmov	s15, r3
 81071aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81071b2:	4b7b      	ldr	r3, [pc, #492]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81071ba:	ee07 3a90 	vmov	s15, r3
 81071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81071c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81071c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 81073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81071d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81071de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81071e2:	e087      	b.n	81072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81071e4:	697b      	ldr	r3, [r7, #20]
 81071e6:	ee07 3a90 	vmov	s15, r3
 81071ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81071ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81073ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81071f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81071f6:	4b6a      	ldr	r3, [pc, #424]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81071fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81071fe:	ee07 3a90 	vmov	s15, r3
 8107202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107206:	ed97 6a03 	vldr	s12, [r7, #12]
 810720a:	eddf 5a67 	vldr	s11, [pc, #412]	; 81073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810720e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810721a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810721e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107226:	e065      	b.n	81072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8107228:	697b      	ldr	r3, [r7, #20]
 810722a:	ee07 3a90 	vmov	s15, r3
 810722e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107232:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810723a:	4b59      	ldr	r3, [pc, #356]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107242:	ee07 3a90 	vmov	s15, r3
 8107246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810724a:	ed97 6a03 	vldr	s12, [r7, #12]
 810724e:	eddf 5a56 	vldr	s11, [pc, #344]	; 81073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810725a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810725e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107266:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810726a:	e043      	b.n	81072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810726c:	697b      	ldr	r3, [r7, #20]
 810726e:	ee07 3a90 	vmov	s15, r3
 8107272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107276:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81073b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810727e:	4b48      	ldr	r3, [pc, #288]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107286:	ee07 3a90 	vmov	s15, r3
 810728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810728e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107292:	eddf 5a45 	vldr	s11, [pc, #276]	; 81073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810729e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81072aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81072ae:	e021      	b.n	81072f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81072b0:	697b      	ldr	r3, [r7, #20]
 81072b2:	ee07 3a90 	vmov	s15, r3
 81072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81072ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81073b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81072c2:	4b37      	ldr	r3, [pc, #220]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81072ca:	ee07 3a90 	vmov	s15, r3
 81072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81072d2:	ed97 6a03 	vldr	s12, [r7, #12]
 81072d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 81073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81072ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81072f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81072f4:	4b2a      	ldr	r3, [pc, #168]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81072f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81072f8:	0a5b      	lsrs	r3, r3, #9
 81072fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81072fe:	ee07 3a90 	vmov	s15, r3
 8107302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810730a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810730e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810731a:	ee17 2a90 	vmov	r2, s15
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8107322:	4b1f      	ldr	r3, [pc, #124]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107326:	0c1b      	lsrs	r3, r3, #16
 8107328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810732c:	ee07 3a90 	vmov	s15, r3
 8107330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107338:	ee37 7a87 	vadd.f32	s14, s15, s14
 810733c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107348:	ee17 2a90 	vmov	r2, s15
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8107350:	4b13      	ldr	r3, [pc, #76]	; (81073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107354:	0e1b      	lsrs	r3, r3, #24
 8107356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810735a:	ee07 3a90 	vmov	s15, r3
 810735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107366:	ee37 7a87 	vadd.f32	s14, s15, s14
 810736a:	edd7 6a07 	vldr	s13, [r7, #28]
 810736e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107376:	ee17 2a90 	vmov	r2, s15
 810737a:	687b      	ldr	r3, [r7, #4]
 810737c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810737e:	e008      	b.n	8107392 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	2200      	movs	r2, #0
 8107384:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	2200      	movs	r2, #0
 810738a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810738c:	687b      	ldr	r3, [r7, #4]
 810738e:	2200      	movs	r2, #0
 8107390:	609a      	str	r2, [r3, #8]
}
 8107392:	bf00      	nop
 8107394:	3724      	adds	r7, #36	; 0x24
 8107396:	46bd      	mov	sp, r7
 8107398:	f85d 7b04 	ldr.w	r7, [sp], #4
 810739c:	4770      	bx	lr
 810739e:	bf00      	nop
 81073a0:	58024400 	.word	0x58024400
 81073a4:	03d09000 	.word	0x03d09000
 81073a8:	46000000 	.word	0x46000000
 81073ac:	4c742400 	.word	0x4c742400
 81073b0:	4a742400 	.word	0x4a742400
 81073b4:	4c371b00 	.word	0x4c371b00

081073b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81073b8:	b480      	push	{r7}
 81073ba:	b089      	sub	sp, #36	; 0x24
 81073bc:	af00      	add	r7, sp, #0
 81073be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81073c0:	4ba1      	ldr	r3, [pc, #644]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81073c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073c4:	f003 0303 	and.w	r3, r3, #3
 81073c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81073ca:	4b9f      	ldr	r3, [pc, #636]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81073cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073ce:	0d1b      	lsrs	r3, r3, #20
 81073d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81073d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81073d6:	4b9c      	ldr	r3, [pc, #624]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81073da:	0a1b      	lsrs	r3, r3, #8
 81073dc:	f003 0301 	and.w	r3, r3, #1
 81073e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81073e2:	4b99      	ldr	r3, [pc, #612]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81073e6:	08db      	lsrs	r3, r3, #3
 81073e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81073ec:	693a      	ldr	r2, [r7, #16]
 81073ee:	fb02 f303 	mul.w	r3, r2, r3
 81073f2:	ee07 3a90 	vmov	s15, r3
 81073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81073fe:	697b      	ldr	r3, [r7, #20]
 8107400:	2b00      	cmp	r3, #0
 8107402:	f000 8111 	beq.w	8107628 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107406:	69bb      	ldr	r3, [r7, #24]
 8107408:	2b02      	cmp	r3, #2
 810740a:	f000 8083 	beq.w	8107514 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810740e:	69bb      	ldr	r3, [r7, #24]
 8107410:	2b02      	cmp	r3, #2
 8107412:	f200 80a1 	bhi.w	8107558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107416:	69bb      	ldr	r3, [r7, #24]
 8107418:	2b00      	cmp	r3, #0
 810741a:	d003      	beq.n	8107424 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810741c:	69bb      	ldr	r3, [r7, #24]
 810741e:	2b01      	cmp	r3, #1
 8107420:	d056      	beq.n	81074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107422:	e099      	b.n	8107558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107424:	4b88      	ldr	r3, [pc, #544]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	f003 0320 	and.w	r3, r3, #32
 810742c:	2b00      	cmp	r3, #0
 810742e:	d02d      	beq.n	810748c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8107430:	4b85      	ldr	r3, [pc, #532]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	08db      	lsrs	r3, r3, #3
 8107436:	f003 0303 	and.w	r3, r3, #3
 810743a:	4a84      	ldr	r2, [pc, #528]	; (810764c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810743c:	fa22 f303 	lsr.w	r3, r2, r3
 8107440:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107442:	68bb      	ldr	r3, [r7, #8]
 8107444:	ee07 3a90 	vmov	s15, r3
 8107448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810744c:	697b      	ldr	r3, [r7, #20]
 810744e:	ee07 3a90 	vmov	s15, r3
 8107452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810745a:	4b7b      	ldr	r3, [pc, #492]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810745e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107462:	ee07 3a90 	vmov	s15, r3
 8107466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810746a:	ed97 6a03 	vldr	s12, [r7, #12]
 810746e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8107650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810747a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810747e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107486:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810748a:	e087      	b.n	810759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810748c:	697b      	ldr	r3, [r7, #20]
 810748e:	ee07 3a90 	vmov	s15, r3
 8107492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107496:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8107654 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810749a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810749e:	4b6a      	ldr	r3, [pc, #424]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81074a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074a6:	ee07 3a90 	vmov	s15, r3
 81074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81074b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8107650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81074ce:	e065      	b.n	810759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81074d0:	697b      	ldr	r3, [r7, #20]
 81074d2:	ee07 3a90 	vmov	s15, r3
 81074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8107658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81074de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074e2:	4b59      	ldr	r3, [pc, #356]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074ea:	ee07 3a90 	vmov	s15, r3
 81074ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81074f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8107650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81074fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810750e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107512:	e043      	b.n	810759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107514:	697b      	ldr	r3, [r7, #20]
 8107516:	ee07 3a90 	vmov	s15, r3
 810751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810751e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810765c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107526:	4b48      	ldr	r3, [pc, #288]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810752a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810752e:	ee07 3a90 	vmov	s15, r3
 8107532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107536:	ed97 6a03 	vldr	s12, [r7, #12]
 810753a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8107650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810753e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810754a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810754e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107556:	e021      	b.n	810759c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8107558:	697b      	ldr	r3, [r7, #20]
 810755a:	ee07 3a90 	vmov	s15, r3
 810755e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107562:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8107658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810756a:	4b37      	ldr	r3, [pc, #220]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107572:	ee07 3a90 	vmov	s15, r3
 8107576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810757a:	ed97 6a03 	vldr	s12, [r7, #12]
 810757e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8107650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810758a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810758e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810759a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810759c:	4b2a      	ldr	r3, [pc, #168]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075a0:	0a5b      	lsrs	r3, r3, #9
 81075a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81075a6:	ee07 3a90 	vmov	s15, r3
 81075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81075b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81075ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81075be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075c2:	ee17 2a90 	vmov	r2, s15
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81075ca:	4b1f      	ldr	r3, [pc, #124]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075ce:	0c1b      	lsrs	r3, r3, #16
 81075d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81075d4:	ee07 3a90 	vmov	s15, r3
 81075d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81075e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81075e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81075ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075f0:	ee17 2a90 	vmov	r2, s15
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81075f8:	4b13      	ldr	r3, [pc, #76]	; (8107648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81075fc:	0e1b      	lsrs	r3, r3, #24
 81075fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107602:	ee07 3a90 	vmov	s15, r3
 8107606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810760a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810760e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107612:	edd7 6a07 	vldr	s13, [r7, #28]
 8107616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810761a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810761e:	ee17 2a90 	vmov	r2, s15
 8107622:	687b      	ldr	r3, [r7, #4]
 8107624:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107626:	e008      	b.n	810763a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	2200      	movs	r2, #0
 810762c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	2200      	movs	r2, #0
 8107632:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	2200      	movs	r2, #0
 8107638:	609a      	str	r2, [r3, #8]
}
 810763a:	bf00      	nop
 810763c:	3724      	adds	r7, #36	; 0x24
 810763e:	46bd      	mov	sp, r7
 8107640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107644:	4770      	bx	lr
 8107646:	bf00      	nop
 8107648:	58024400 	.word	0x58024400
 810764c:	03d09000 	.word	0x03d09000
 8107650:	46000000 	.word	0x46000000
 8107654:	4c742400 	.word	0x4c742400
 8107658:	4a742400 	.word	0x4a742400
 810765c:	4c371b00 	.word	0x4c371b00

08107660 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8107660:	b480      	push	{r7}
 8107662:	b089      	sub	sp, #36	; 0x24
 8107664:	af00      	add	r7, sp, #0
 8107666:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107668:	4ba0      	ldr	r3, [pc, #640]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810766c:	f003 0303 	and.w	r3, r3, #3
 8107670:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8107672:	4b9e      	ldr	r3, [pc, #632]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107676:	091b      	lsrs	r3, r3, #4
 8107678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810767c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810767e:	4b9b      	ldr	r3, [pc, #620]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107682:	f003 0301 	and.w	r3, r3, #1
 8107686:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8107688:	4b98      	ldr	r3, [pc, #608]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810768a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810768c:	08db      	lsrs	r3, r3, #3
 810768e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107692:	693a      	ldr	r2, [r7, #16]
 8107694:	fb02 f303 	mul.w	r3, r2, r3
 8107698:	ee07 3a90 	vmov	s15, r3
 810769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 81076a4:	697b      	ldr	r3, [r7, #20]
 81076a6:	2b00      	cmp	r3, #0
 81076a8:	f000 8111 	beq.w	81078ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 81076ac:	69bb      	ldr	r3, [r7, #24]
 81076ae:	2b02      	cmp	r3, #2
 81076b0:	f000 8083 	beq.w	81077ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 81076b4:	69bb      	ldr	r3, [r7, #24]
 81076b6:	2b02      	cmp	r3, #2
 81076b8:	f200 80a1 	bhi.w	81077fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 81076bc:	69bb      	ldr	r3, [r7, #24]
 81076be:	2b00      	cmp	r3, #0
 81076c0:	d003      	beq.n	81076ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 81076c2:	69bb      	ldr	r3, [r7, #24]
 81076c4:	2b01      	cmp	r3, #1
 81076c6:	d056      	beq.n	8107776 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 81076c8:	e099      	b.n	81077fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81076ca:	4b88      	ldr	r3, [pc, #544]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	f003 0320 	and.w	r3, r3, #32
 81076d2:	2b00      	cmp	r3, #0
 81076d4:	d02d      	beq.n	8107732 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81076d6:	4b85      	ldr	r3, [pc, #532]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81076d8:	681b      	ldr	r3, [r3, #0]
 81076da:	08db      	lsrs	r3, r3, #3
 81076dc:	f003 0303 	and.w	r3, r3, #3
 81076e0:	4a83      	ldr	r2, [pc, #524]	; (81078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 81076e2:	fa22 f303 	lsr.w	r3, r2, r3
 81076e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81076e8:	68bb      	ldr	r3, [r7, #8]
 81076ea:	ee07 3a90 	vmov	s15, r3
 81076ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076f2:	697b      	ldr	r3, [r7, #20]
 81076f4:	ee07 3a90 	vmov	s15, r3
 81076f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107700:	4b7a      	ldr	r3, [pc, #488]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107708:	ee07 3a90 	vmov	s15, r3
 810770c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107710:	ed97 6a03 	vldr	s12, [r7, #12]
 8107714:	eddf 5a77 	vldr	s11, [pc, #476]	; 81078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810771c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107728:	ee67 7a27 	vmul.f32	s15, s14, s15
 810772c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8107730:	e087      	b.n	8107842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107732:	697b      	ldr	r3, [r7, #20]
 8107734:	ee07 3a90 	vmov	s15, r3
 8107738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810773c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81078f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107744:	4b69      	ldr	r3, [pc, #420]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810774c:	ee07 3a90 	vmov	s15, r3
 8107750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107754:	ed97 6a03 	vldr	s12, [r7, #12]
 8107758:	eddf 5a66 	vldr	s11, [pc, #408]	; 81078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810775c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810776c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107774:	e065      	b.n	8107842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8107776:	697b      	ldr	r3, [r7, #20]
 8107778:	ee07 3a90 	vmov	s15, r3
 810777c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107780:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81078fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107788:	4b58      	ldr	r3, [pc, #352]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810778c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107790:	ee07 3a90 	vmov	s15, r3
 8107794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107798:	ed97 6a03 	vldr	s12, [r7, #12]
 810779c:	eddf 5a55 	vldr	s11, [pc, #340]	; 81078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81077a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81077b8:	e043      	b.n	8107842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81077ba:	697b      	ldr	r3, [r7, #20]
 81077bc:	ee07 3a90 	vmov	s15, r3
 81077c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8107900 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 81077c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077cc:	4b47      	ldr	r3, [pc, #284]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81077d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077d4:	ee07 3a90 	vmov	s15, r3
 81077d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077dc:	ed97 6a03 	vldr	s12, [r7, #12]
 81077e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 81078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81077e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81077f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81077fc:	e021      	b.n	8107842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81077fe:	697b      	ldr	r3, [r7, #20]
 8107800:	ee07 3a90 	vmov	s15, r3
 8107804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107808:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81078f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810780c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107810:	4b36      	ldr	r3, [pc, #216]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107818:	ee07 3a90 	vmov	s15, r3
 810781c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107820:	ed97 6a03 	vldr	s12, [r7, #12]
 8107824:	eddf 5a33 	vldr	s11, [pc, #204]	; 81078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810782c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8107834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107838:	ee67 7a27 	vmul.f32	s15, s14, s15
 810783c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8107840:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8107842:	4b2a      	ldr	r3, [pc, #168]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107846:	0a5b      	lsrs	r3, r3, #9
 8107848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810784c:	ee07 3a90 	vmov	s15, r3
 8107850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107858:	ee37 7a87 	vadd.f32	s14, s15, s14
 810785c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107868:	ee17 2a90 	vmov	r2, s15
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8107870:	4b1e      	ldr	r3, [pc, #120]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107874:	0c1b      	lsrs	r3, r3, #16
 8107876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810787a:	ee07 3a90 	vmov	s15, r3
 810787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8107886:	ee37 7a87 	vadd.f32	s14, s15, s14
 810788a:	edd7 6a07 	vldr	s13, [r7, #28]
 810788e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107896:	ee17 2a90 	vmov	r2, s15
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 810789e:	4b13      	ldr	r3, [pc, #76]	; (81078ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078a2:	0e1b      	lsrs	r3, r3, #24
 81078a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81078a8:	ee07 3a90 	vmov	s15, r3
 81078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81078b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81078b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81078b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81078bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81078c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81078c4:	ee17 2a90 	vmov	r2, s15
 81078c8:	687b      	ldr	r3, [r7, #4]
 81078ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 81078cc:	e008      	b.n	81078e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 81078ce:	687b      	ldr	r3, [r7, #4]
 81078d0:	2200      	movs	r2, #0
 81078d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	2200      	movs	r2, #0
 81078d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	2200      	movs	r2, #0
 81078de:	609a      	str	r2, [r3, #8]
}
 81078e0:	bf00      	nop
 81078e2:	3724      	adds	r7, #36	; 0x24
 81078e4:	46bd      	mov	sp, r7
 81078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078ea:	4770      	bx	lr
 81078ec:	58024400 	.word	0x58024400
 81078f0:	03d09000 	.word	0x03d09000
 81078f4:	46000000 	.word	0x46000000
 81078f8:	4c742400 	.word	0x4c742400
 81078fc:	4a742400 	.word	0x4a742400
 8107900:	4c371b00 	.word	0x4c371b00

08107904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8107904:	b580      	push	{r7, lr}
 8107906:	b084      	sub	sp, #16
 8107908:	af00      	add	r7, sp, #0
 810790a:	6078      	str	r0, [r7, #4]
 810790c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810790e:	2300      	movs	r3, #0
 8107910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107912:	4b54      	ldr	r3, [pc, #336]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107916:	f003 0303 	and.w	r3, r3, #3
 810791a:	2b03      	cmp	r3, #3
 810791c:	d101      	bne.n	8107922 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810791e:	2301      	movs	r3, #1
 8107920:	e09b      	b.n	8107a5a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8107922:	4b50      	ldr	r3, [pc, #320]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107924:	681b      	ldr	r3, [r3, #0]
 8107926:	4a4f      	ldr	r2, [pc, #316]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810792c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810792e:	f7f9 fd63 	bl	81013f8 <HAL_GetTick>
 8107932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107934:	e008      	b.n	8107948 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107936:	f7f9 fd5f 	bl	81013f8 <HAL_GetTick>
 810793a:	4602      	mov	r2, r0
 810793c:	68bb      	ldr	r3, [r7, #8]
 810793e:	1ad3      	subs	r3, r2, r3
 8107940:	2b02      	cmp	r3, #2
 8107942:	d901      	bls.n	8107948 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107944:	2303      	movs	r3, #3
 8107946:	e088      	b.n	8107a5a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8107948:	4b46      	ldr	r3, [pc, #280]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 810794a:	681b      	ldr	r3, [r3, #0]
 810794c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107950:	2b00      	cmp	r3, #0
 8107952:	d1f0      	bne.n	8107936 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107954:	4b43      	ldr	r3, [pc, #268]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	681b      	ldr	r3, [r3, #0]
 8107960:	031b      	lsls	r3, r3, #12
 8107962:	4940      	ldr	r1, [pc, #256]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107964:	4313      	orrs	r3, r2
 8107966:	628b      	str	r3, [r1, #40]	; 0x28
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	685b      	ldr	r3, [r3, #4]
 810796c:	3b01      	subs	r3, #1
 810796e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	689b      	ldr	r3, [r3, #8]
 8107976:	3b01      	subs	r3, #1
 8107978:	025b      	lsls	r3, r3, #9
 810797a:	b29b      	uxth	r3, r3
 810797c:	431a      	orrs	r2, r3
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	68db      	ldr	r3, [r3, #12]
 8107982:	3b01      	subs	r3, #1
 8107984:	041b      	lsls	r3, r3, #16
 8107986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810798a:	431a      	orrs	r2, r3
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	691b      	ldr	r3, [r3, #16]
 8107990:	3b01      	subs	r3, #1
 8107992:	061b      	lsls	r3, r3, #24
 8107994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107998:	4932      	ldr	r1, [pc, #200]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 810799a:	4313      	orrs	r3, r2
 810799c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810799e:	4b31      	ldr	r3, [pc, #196]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	695b      	ldr	r3, [r3, #20]
 81079aa:	492e      	ldr	r1, [pc, #184]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079ac:	4313      	orrs	r3, r2
 81079ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81079b0:	4b2c      	ldr	r3, [pc, #176]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079b4:	f023 0220 	bic.w	r2, r3, #32
 81079b8:	687b      	ldr	r3, [r7, #4]
 81079ba:	699b      	ldr	r3, [r3, #24]
 81079bc:	4929      	ldr	r1, [pc, #164]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079be:	4313      	orrs	r3, r2
 81079c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81079c2:	4b28      	ldr	r3, [pc, #160]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079c6:	4a27      	ldr	r2, [pc, #156]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079c8:	f023 0310 	bic.w	r3, r3, #16
 81079cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81079ce:	4b25      	ldr	r3, [pc, #148]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81079d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81079d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81079da:	687a      	ldr	r2, [r7, #4]
 81079dc:	69d2      	ldr	r2, [r2, #28]
 81079de:	00d2      	lsls	r2, r2, #3
 81079e0:	4920      	ldr	r1, [pc, #128]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079e2:	4313      	orrs	r3, r2
 81079e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81079e6:	4b1f      	ldr	r3, [pc, #124]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079ea:	4a1e      	ldr	r2, [pc, #120]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079ec:	f043 0310 	orr.w	r3, r3, #16
 81079f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81079f2:	683b      	ldr	r3, [r7, #0]
 81079f4:	2b00      	cmp	r3, #0
 81079f6:	d106      	bne.n	8107a06 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81079f8:	4b1a      	ldr	r3, [pc, #104]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079fc:	4a19      	ldr	r2, [pc, #100]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 81079fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8107a02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107a04:	e00f      	b.n	8107a26 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107a06:	683b      	ldr	r3, [r7, #0]
 8107a08:	2b01      	cmp	r3, #1
 8107a0a:	d106      	bne.n	8107a1a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8107a0c:	4b15      	ldr	r3, [pc, #84]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a10:	4a14      	ldr	r2, [pc, #80]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8107a16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107a18:	e005      	b.n	8107a26 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8107a1a:	4b12      	ldr	r3, [pc, #72]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a1e:	4a11      	ldr	r2, [pc, #68]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8107a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8107a26:	4b0f      	ldr	r3, [pc, #60]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a28:	681b      	ldr	r3, [r3, #0]
 8107a2a:	4a0e      	ldr	r2, [pc, #56]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8107a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a32:	f7f9 fce1 	bl	81013f8 <HAL_GetTick>
 8107a36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107a38:	e008      	b.n	8107a4c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8107a3a:	f7f9 fcdd 	bl	81013f8 <HAL_GetTick>
 8107a3e:	4602      	mov	r2, r0
 8107a40:	68bb      	ldr	r3, [r7, #8]
 8107a42:	1ad3      	subs	r3, r2, r3
 8107a44:	2b02      	cmp	r3, #2
 8107a46:	d901      	bls.n	8107a4c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107a48:	2303      	movs	r3, #3
 8107a4a:	e006      	b.n	8107a5a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107a4c:	4b05      	ldr	r3, [pc, #20]	; (8107a64 <RCCEx_PLL2_Config+0x160>)
 8107a4e:	681b      	ldr	r3, [r3, #0]
 8107a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107a54:	2b00      	cmp	r3, #0
 8107a56:	d0f0      	beq.n	8107a3a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8107a5a:	4618      	mov	r0, r3
 8107a5c:	3710      	adds	r7, #16
 8107a5e:	46bd      	mov	sp, r7
 8107a60:	bd80      	pop	{r7, pc}
 8107a62:	bf00      	nop
 8107a64:	58024400 	.word	0x58024400

08107a68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107a68:	b580      	push	{r7, lr}
 8107a6a:	b084      	sub	sp, #16
 8107a6c:	af00      	add	r7, sp, #0
 8107a6e:	6078      	str	r0, [r7, #4]
 8107a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107a72:	2300      	movs	r3, #0
 8107a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107a76:	4b54      	ldr	r3, [pc, #336]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a7a:	f003 0303 	and.w	r3, r3, #3
 8107a7e:	2b03      	cmp	r3, #3
 8107a80:	d101      	bne.n	8107a86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107a82:	2301      	movs	r3, #1
 8107a84:	e09b      	b.n	8107bbe <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107a86:	4b50      	ldr	r3, [pc, #320]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107a88:	681b      	ldr	r3, [r3, #0]
 8107a8a:	4a4f      	ldr	r2, [pc, #316]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8107a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a92:	f7f9 fcb1 	bl	81013f8 <HAL_GetTick>
 8107a96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107a98:	e008      	b.n	8107aac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107a9a:	f7f9 fcad 	bl	81013f8 <HAL_GetTick>
 8107a9e:	4602      	mov	r2, r0
 8107aa0:	68bb      	ldr	r3, [r7, #8]
 8107aa2:	1ad3      	subs	r3, r2, r3
 8107aa4:	2b02      	cmp	r3, #2
 8107aa6:	d901      	bls.n	8107aac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107aa8:	2303      	movs	r3, #3
 8107aaa:	e088      	b.n	8107bbe <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107aac:	4b46      	ldr	r3, [pc, #280]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107aae:	681b      	ldr	r3, [r3, #0]
 8107ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107ab4:	2b00      	cmp	r3, #0
 8107ab6:	d1f0      	bne.n	8107a9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107ab8:	4b43      	ldr	r3, [pc, #268]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107abc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	051b      	lsls	r3, r3, #20
 8107ac6:	4940      	ldr	r1, [pc, #256]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107ac8:	4313      	orrs	r3, r2
 8107aca:	628b      	str	r3, [r1, #40]	; 0x28
 8107acc:	687b      	ldr	r3, [r7, #4]
 8107ace:	685b      	ldr	r3, [r3, #4]
 8107ad0:	3b01      	subs	r3, #1
 8107ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107ad6:	687b      	ldr	r3, [r7, #4]
 8107ad8:	689b      	ldr	r3, [r3, #8]
 8107ada:	3b01      	subs	r3, #1
 8107adc:	025b      	lsls	r3, r3, #9
 8107ade:	b29b      	uxth	r3, r3
 8107ae0:	431a      	orrs	r2, r3
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	68db      	ldr	r3, [r3, #12]
 8107ae6:	3b01      	subs	r3, #1
 8107ae8:	041b      	lsls	r3, r3, #16
 8107aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8107aee:	431a      	orrs	r2, r3
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	691b      	ldr	r3, [r3, #16]
 8107af4:	3b01      	subs	r3, #1
 8107af6:	061b      	lsls	r3, r3, #24
 8107af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8107afc:	4932      	ldr	r1, [pc, #200]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107afe:	4313      	orrs	r3, r2
 8107b00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107b02:	4b31      	ldr	r3, [pc, #196]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8107b0a:	687b      	ldr	r3, [r7, #4]
 8107b0c:	695b      	ldr	r3, [r3, #20]
 8107b0e:	492e      	ldr	r1, [pc, #184]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b10:	4313      	orrs	r3, r2
 8107b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107b14:	4b2c      	ldr	r3, [pc, #176]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8107b1c:	687b      	ldr	r3, [r7, #4]
 8107b1e:	699b      	ldr	r3, [r3, #24]
 8107b20:	4929      	ldr	r1, [pc, #164]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b22:	4313      	orrs	r3, r2
 8107b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107b26:	4b28      	ldr	r3, [pc, #160]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b2a:	4a27      	ldr	r2, [pc, #156]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107b32:	4b25      	ldr	r3, [pc, #148]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107b3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8107b3e:	687a      	ldr	r2, [r7, #4]
 8107b40:	69d2      	ldr	r2, [r2, #28]
 8107b42:	00d2      	lsls	r2, r2, #3
 8107b44:	4920      	ldr	r1, [pc, #128]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b46:	4313      	orrs	r3, r2
 8107b48:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107b4a:	4b1f      	ldr	r3, [pc, #124]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b4e:	4a1e      	ldr	r2, [pc, #120]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8107b54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8107b56:	683b      	ldr	r3, [r7, #0]
 8107b58:	2b00      	cmp	r3, #0
 8107b5a:	d106      	bne.n	8107b6a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107b5c:	4b1a      	ldr	r3, [pc, #104]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b60:	4a19      	ldr	r2, [pc, #100]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8107b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b68:	e00f      	b.n	8107b8a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8107b6a:	683b      	ldr	r3, [r7, #0]
 8107b6c:	2b01      	cmp	r3, #1
 8107b6e:	d106      	bne.n	8107b7e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107b70:	4b15      	ldr	r3, [pc, #84]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b74:	4a14      	ldr	r2, [pc, #80]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8107b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8107b7c:	e005      	b.n	8107b8a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107b7e:	4b12      	ldr	r3, [pc, #72]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b82:	4a11      	ldr	r2, [pc, #68]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8107b88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107b8a:	4b0f      	ldr	r3, [pc, #60]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b8c:	681b      	ldr	r3, [r3, #0]
 8107b8e:	4a0e      	ldr	r2, [pc, #56]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8107b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b96:	f7f9 fc2f 	bl	81013f8 <HAL_GetTick>
 8107b9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107b9c:	e008      	b.n	8107bb0 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8107b9e:	f7f9 fc2b 	bl	81013f8 <HAL_GetTick>
 8107ba2:	4602      	mov	r2, r0
 8107ba4:	68bb      	ldr	r3, [r7, #8]
 8107ba6:	1ad3      	subs	r3, r2, r3
 8107ba8:	2b02      	cmp	r3, #2
 8107baa:	d901      	bls.n	8107bb0 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107bac:	2303      	movs	r3, #3
 8107bae:	e006      	b.n	8107bbe <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107bb0:	4b05      	ldr	r3, [pc, #20]	; (8107bc8 <RCCEx_PLL3_Config+0x160>)
 8107bb2:	681b      	ldr	r3, [r3, #0]
 8107bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107bb8:	2b00      	cmp	r3, #0
 8107bba:	d0f0      	beq.n	8107b9e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8107bbe:	4618      	mov	r0, r3
 8107bc0:	3710      	adds	r7, #16
 8107bc2:	46bd      	mov	sp, r7
 8107bc4:	bd80      	pop	{r7, pc}
 8107bc6:	bf00      	nop
 8107bc8:	58024400 	.word	0x58024400

08107bcc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8107bcc:	b580      	push	{r7, lr}
 8107bce:	b084      	sub	sp, #16
 8107bd0:	af00      	add	r7, sp, #0
 8107bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	2b00      	cmp	r3, #0
 8107bd8:	d101      	bne.n	8107bde <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8107bda:	2301      	movs	r3, #1
 8107bdc:	e04d      	b.n	8107c7a <HAL_RNG_Init+0xae>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	7a5b      	ldrb	r3, [r3, #9]
 8107be2:	b2db      	uxtb	r3, r3
 8107be4:	2b00      	cmp	r3, #0
 8107be6:	d105      	bne.n	8107bf4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	2200      	movs	r2, #0
 8107bec:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8107bee:	6878      	ldr	r0, [r7, #4]
 8107bf0:	f7f9 f8b2 	bl	8100d58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	2202      	movs	r2, #2
 8107bf8:	725a      	strb	r2, [r3, #9]
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8107bfa:	687b      	ldr	r3, [r7, #4]
 8107bfc:	681b      	ldr	r3, [r3, #0]
 8107bfe:	681b      	ldr	r3, [r3, #0]
 8107c00:	f023 0120 	bic.w	r1, r3, #32
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	685a      	ldr	r2, [r3, #4]
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	681b      	ldr	r3, [r3, #0]
 8107c0c:	430a      	orrs	r2, r1
 8107c0e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8107c10:	687b      	ldr	r3, [r7, #4]
 8107c12:	681b      	ldr	r3, [r3, #0]
 8107c14:	681a      	ldr	r2, [r3, #0]
 8107c16:	687b      	ldr	r3, [r7, #4]
 8107c18:	681b      	ldr	r3, [r3, #0]
 8107c1a:	f042 0204 	orr.w	r2, r2, #4
 8107c1e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8107c20:	687b      	ldr	r3, [r7, #4]
 8107c22:	681b      	ldr	r3, [r3, #0]
 8107c24:	685b      	ldr	r3, [r3, #4]
 8107c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107c2a:	2b40      	cmp	r3, #64	; 0x40
 8107c2c:	d104      	bne.n	8107c38 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8107c2e:	687b      	ldr	r3, [r7, #4]
 8107c30:	2204      	movs	r2, #4
 8107c32:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8107c34:	2301      	movs	r3, #1
 8107c36:	e020      	b.n	8107c7a <HAL_RNG_Init+0xae>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8107c38:	f7f9 fbde 	bl	81013f8 <HAL_GetTick>
 8107c3c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8107c3e:	e00e      	b.n	8107c5e <HAL_RNG_Init+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8107c40:	f7f9 fbda 	bl	81013f8 <HAL_GetTick>
 8107c44:	4602      	mov	r2, r0
 8107c46:	68fb      	ldr	r3, [r7, #12]
 8107c48:	1ad3      	subs	r3, r2, r3
 8107c4a:	2b02      	cmp	r3, #2
 8107c4c:	d907      	bls.n	8107c5e <HAL_RNG_Init+0x92>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8107c4e:	687b      	ldr	r3, [r7, #4]
 8107c50:	2204      	movs	r2, #4
 8107c52:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8107c54:	687b      	ldr	r3, [r7, #4]
 8107c56:	2202      	movs	r2, #2
 8107c58:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8107c5a:	2301      	movs	r3, #1
 8107c5c:	e00d      	b.n	8107c7a <HAL_RNG_Init+0xae>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8107c5e:	687b      	ldr	r3, [r7, #4]
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	685b      	ldr	r3, [r3, #4]
 8107c64:	f003 0304 	and.w	r3, r3, #4
 8107c68:	2b04      	cmp	r3, #4
 8107c6a:	d0e9      	beq.n	8107c40 <HAL_RNG_Init+0x74>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	2201      	movs	r2, #1
 8107c70:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8107c72:	687b      	ldr	r3, [r7, #4]
 8107c74:	2200      	movs	r2, #0
 8107c76:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8107c78:	2300      	movs	r3, #0
}
 8107c7a:	4618      	mov	r0, r3
 8107c7c:	3710      	adds	r7, #16
 8107c7e:	46bd      	mov	sp, r7
 8107c80:	bd80      	pop	{r7, pc}

08107c82 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8107c82:	b580      	push	{r7, lr}
 8107c84:	b084      	sub	sp, #16
 8107c86:	af00      	add	r7, sp, #0
 8107c88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8107c8a:	2301      	movs	r3, #1
 8107c8c:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8107c8e:	687b      	ldr	r3, [r7, #4]
 8107c90:	2b00      	cmp	r3, #0
 8107c92:	d069      	beq.n	8107d68 <HAL_RTC_Init+0xe6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8107c9a:	b2db      	uxtb	r3, r3
 8107c9c:	2b00      	cmp	r3, #0
 8107c9e:	d106      	bne.n	8107cae <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	2200      	movs	r2, #0
 8107ca4:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8107ca8:	6878      	ldr	r0, [r7, #4]
 8107caa:	f7f9 f88d 	bl	8100dc8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8107cae:	687b      	ldr	r3, [r7, #4]
 8107cb0:	2202      	movs	r2, #2
 8107cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	22ca      	movs	r2, #202	; 0xca
 8107cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8107cbe:	687b      	ldr	r3, [r7, #4]
 8107cc0:	681b      	ldr	r3, [r3, #0]
 8107cc2:	2253      	movs	r2, #83	; 0x53
 8107cc4:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8107cc6:	6878      	ldr	r0, [r7, #4]
 8107cc8:	f000 f99d 	bl	8108006 <RTC_EnterInitMode>
 8107ccc:	4603      	mov	r3, r0
 8107cce:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8107cd0:	7bfb      	ldrb	r3, [r7, #15]
 8107cd2:	2b00      	cmp	r3, #0
 8107cd4:	d13d      	bne.n	8107d52 <HAL_RTC_Init+0xd0>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8107cd6:	687b      	ldr	r3, [r7, #4]
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	689b      	ldr	r3, [r3, #8]
 8107cdc:	687a      	ldr	r2, [r7, #4]
 8107cde:	6812      	ldr	r2, [r2, #0]
 8107ce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8107ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107ce8:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	681b      	ldr	r3, [r3, #0]
 8107cee:	6899      	ldr	r1, [r3, #8]
 8107cf0:	687b      	ldr	r3, [r7, #4]
 8107cf2:	685a      	ldr	r2, [r3, #4]
 8107cf4:	687b      	ldr	r3, [r7, #4]
 8107cf6:	691b      	ldr	r3, [r3, #16]
 8107cf8:	431a      	orrs	r2, r3
 8107cfa:	687b      	ldr	r3, [r7, #4]
 8107cfc:	699b      	ldr	r3, [r3, #24]
 8107cfe:	431a      	orrs	r2, r3
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	681b      	ldr	r3, [r3, #0]
 8107d04:	430a      	orrs	r2, r1
 8107d06:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	689b      	ldr	r3, [r3, #8]
 8107d0c:	0419      	lsls	r1, r3, #16
 8107d0e:	687b      	ldr	r3, [r7, #4]
 8107d10:	68da      	ldr	r2, [r3, #12]
 8107d12:	687b      	ldr	r3, [r7, #4]
 8107d14:	681b      	ldr	r3, [r3, #0]
 8107d16:	430a      	orrs	r2, r1
 8107d18:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8107d1a:	6878      	ldr	r0, [r7, #4]
 8107d1c:	f000 f9a4 	bl	8108068 <RTC_ExitInitMode>
 8107d20:	4603      	mov	r3, r0
 8107d22:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8107d24:	7bfb      	ldrb	r3, [r7, #15]
 8107d26:	2b00      	cmp	r3, #0
 8107d28:	d113      	bne.n	8107d52 <HAL_RTC_Init+0xd0>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	681b      	ldr	r3, [r3, #0]
 8107d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	681b      	ldr	r3, [r3, #0]
 8107d34:	f022 0203 	bic.w	r2, r2, #3
 8107d38:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8107d3a:	687b      	ldr	r3, [r7, #4]
 8107d3c:	681b      	ldr	r3, [r3, #0]
 8107d3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8107d40:	687b      	ldr	r3, [r7, #4]
 8107d42:	69da      	ldr	r2, [r3, #28]
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	695b      	ldr	r3, [r3, #20]
 8107d48:	431a      	orrs	r2, r3
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	430a      	orrs	r2, r1
 8107d50:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8107d52:	687b      	ldr	r3, [r7, #4]
 8107d54:	681b      	ldr	r3, [r3, #0]
 8107d56:	22ff      	movs	r2, #255	; 0xff
 8107d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8107d5a:	7bfb      	ldrb	r3, [r7, #15]
 8107d5c:	2b00      	cmp	r3, #0
 8107d5e:	d103      	bne.n	8107d68 <HAL_RTC_Init+0xe6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	2201      	movs	r2, #1
 8107d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8107d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8107d6a:	4618      	mov	r0, r3
 8107d6c:	3710      	adds	r7, #16
 8107d6e:	46bd      	mov	sp, r7
 8107d70:	bd80      	pop	{r7, pc}

08107d72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8107d72:	b590      	push	{r4, r7, lr}
 8107d74:	b087      	sub	sp, #28
 8107d76:	af00      	add	r7, sp, #0
 8107d78:	60f8      	str	r0, [r7, #12]
 8107d7a:	60b9      	str	r1, [r7, #8]
 8107d7c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8107d7e:	68fb      	ldr	r3, [r7, #12]
 8107d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8107d84:	2b01      	cmp	r3, #1
 8107d86:	d101      	bne.n	8107d8c <HAL_RTC_SetTime+0x1a>
 8107d88:	2302      	movs	r3, #2
 8107d8a:	e08b      	b.n	8107ea4 <HAL_RTC_SetTime+0x132>
 8107d8c:	68fb      	ldr	r3, [r7, #12]
 8107d8e:	2201      	movs	r2, #1
 8107d90:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8107d94:	68fb      	ldr	r3, [r7, #12]
 8107d96:	2202      	movs	r2, #2
 8107d98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8107d9c:	68fb      	ldr	r3, [r7, #12]
 8107d9e:	681b      	ldr	r3, [r3, #0]
 8107da0:	22ca      	movs	r2, #202	; 0xca
 8107da2:	625a      	str	r2, [r3, #36]	; 0x24
 8107da4:	68fb      	ldr	r3, [r7, #12]
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	2253      	movs	r2, #83	; 0x53
 8107daa:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8107dac:	68f8      	ldr	r0, [r7, #12]
 8107dae:	f000 f92a 	bl	8108006 <RTC_EnterInitMode>
 8107db2:	4603      	mov	r3, r0
 8107db4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8107db6:	7cfb      	ldrb	r3, [r7, #19]
 8107db8:	2b00      	cmp	r3, #0
 8107dba:	d163      	bne.n	8107e84 <HAL_RTC_SetTime+0x112>
  {
    if(Format == RTC_FORMAT_BIN)
 8107dbc:	687b      	ldr	r3, [r7, #4]
 8107dbe:	2b00      	cmp	r3, #0
 8107dc0:	d126      	bne.n	8107e10 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8107dc2:	68fb      	ldr	r3, [r7, #12]
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	689b      	ldr	r3, [r3, #8]
 8107dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107dcc:	2b00      	cmp	r3, #0
 8107dce:	d102      	bne.n	8107dd6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8107dd0:	68bb      	ldr	r3, [r7, #8]
 8107dd2:	2200      	movs	r2, #0
 8107dd4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8107dd6:	68bb      	ldr	r3, [r7, #8]
 8107dd8:	781b      	ldrb	r3, [r3, #0]
 8107dda:	4618      	mov	r0, r3
 8107ddc:	f000 f982 	bl	81080e4 <RTC_ByteToBcd2>
 8107de0:	4603      	mov	r3, r0
 8107de2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8107de4:	68bb      	ldr	r3, [r7, #8]
 8107de6:	785b      	ldrb	r3, [r3, #1]
 8107de8:	4618      	mov	r0, r3
 8107dea:	f000 f97b 	bl	81080e4 <RTC_ByteToBcd2>
 8107dee:	4603      	mov	r3, r0
 8107df0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8107df2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8107df4:	68bb      	ldr	r3, [r7, #8]
 8107df6:	789b      	ldrb	r3, [r3, #2]
 8107df8:	4618      	mov	r0, r3
 8107dfa:	f000 f973 	bl	81080e4 <RTC_ByteToBcd2>
 8107dfe:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8107e00:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8107e04:	68bb      	ldr	r3, [r7, #8]
 8107e06:	78db      	ldrb	r3, [r3, #3]
 8107e08:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8107e0a:	4313      	orrs	r3, r2
 8107e0c:	617b      	str	r3, [r7, #20]
 8107e0e:	e018      	b.n	8107e42 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8107e10:	68fb      	ldr	r3, [r7, #12]
 8107e12:	681b      	ldr	r3, [r3, #0]
 8107e14:	689b      	ldr	r3, [r3, #8]
 8107e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107e1a:	2b00      	cmp	r3, #0
 8107e1c:	d102      	bne.n	8107e24 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8107e1e:	68bb      	ldr	r3, [r7, #8]
 8107e20:	2200      	movs	r2, #0
 8107e22:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8107e24:	68bb      	ldr	r3, [r7, #8]
 8107e26:	781b      	ldrb	r3, [r3, #0]
 8107e28:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8107e2a:	68bb      	ldr	r3, [r7, #8]
 8107e2c:	785b      	ldrb	r3, [r3, #1]
 8107e2e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8107e30:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8107e32:	68ba      	ldr	r2, [r7, #8]
 8107e34:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8107e36:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8107e38:	68bb      	ldr	r3, [r7, #8]
 8107e3a:	78db      	ldrb	r3, [r3, #3]
 8107e3c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8107e3e:	4313      	orrs	r3, r2
 8107e40:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8107e42:	68fb      	ldr	r3, [r7, #12]
 8107e44:	681a      	ldr	r2, [r3, #0]
 8107e46:	697b      	ldr	r3, [r7, #20]
 8107e48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8107e4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8107e50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8107e52:	68fb      	ldr	r3, [r7, #12]
 8107e54:	681b      	ldr	r3, [r3, #0]
 8107e56:	689a      	ldr	r2, [r3, #8]
 8107e58:	68fb      	ldr	r3, [r7, #12]
 8107e5a:	681b      	ldr	r3, [r3, #0]
 8107e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8107e60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8107e62:	68fb      	ldr	r3, [r7, #12]
 8107e64:	681b      	ldr	r3, [r3, #0]
 8107e66:	6899      	ldr	r1, [r3, #8]
 8107e68:	68bb      	ldr	r3, [r7, #8]
 8107e6a:	68da      	ldr	r2, [r3, #12]
 8107e6c:	68bb      	ldr	r3, [r7, #8]
 8107e6e:	691b      	ldr	r3, [r3, #16]
 8107e70:	431a      	orrs	r2, r3
 8107e72:	68fb      	ldr	r3, [r7, #12]
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	430a      	orrs	r2, r1
 8107e78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8107e7a:	68f8      	ldr	r0, [r7, #12]
 8107e7c:	f000 f8f4 	bl	8108068 <RTC_ExitInitMode>
 8107e80:	4603      	mov	r3, r0
 8107e82:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8107e84:	68fb      	ldr	r3, [r7, #12]
 8107e86:	681b      	ldr	r3, [r3, #0]
 8107e88:	22ff      	movs	r2, #255	; 0xff
 8107e8a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8107e8c:	7cfb      	ldrb	r3, [r7, #19]
 8107e8e:	2b00      	cmp	r3, #0
 8107e90:	d103      	bne.n	8107e9a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8107e92:	68fb      	ldr	r3, [r7, #12]
 8107e94:	2201      	movs	r2, #1
 8107e96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8107e9a:	68fb      	ldr	r3, [r7, #12]
 8107e9c:	2200      	movs	r2, #0
 8107e9e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8107ea2:	7cfb      	ldrb	r3, [r7, #19]
}
 8107ea4:	4618      	mov	r0, r3
 8107ea6:	371c      	adds	r7, #28
 8107ea8:	46bd      	mov	sp, r7
 8107eaa:	bd90      	pop	{r4, r7, pc}

08107eac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8107eac:	b590      	push	{r4, r7, lr}
 8107eae:	b087      	sub	sp, #28
 8107eb0:	af00      	add	r7, sp, #0
 8107eb2:	60f8      	str	r0, [r7, #12]
 8107eb4:	60b9      	str	r1, [r7, #8]
 8107eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8107eb8:	68fb      	ldr	r3, [r7, #12]
 8107eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8107ebe:	2b01      	cmp	r3, #1
 8107ec0:	d101      	bne.n	8107ec6 <HAL_RTC_SetDate+0x1a>
 8107ec2:	2302      	movs	r3, #2
 8107ec4:	e075      	b.n	8107fb2 <HAL_RTC_SetDate+0x106>
 8107ec6:	68fb      	ldr	r3, [r7, #12]
 8107ec8:	2201      	movs	r2, #1
 8107eca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8107ece:	68fb      	ldr	r3, [r7, #12]
 8107ed0:	2202      	movs	r2, #2
 8107ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8107ed6:	687b      	ldr	r3, [r7, #4]
 8107ed8:	2b00      	cmp	r3, #0
 8107eda:	d10e      	bne.n	8107efa <HAL_RTC_SetDate+0x4e>
 8107edc:	68bb      	ldr	r3, [r7, #8]
 8107ede:	785b      	ldrb	r3, [r3, #1]
 8107ee0:	f003 0310 	and.w	r3, r3, #16
 8107ee4:	2b00      	cmp	r3, #0
 8107ee6:	d008      	beq.n	8107efa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8107ee8:	68bb      	ldr	r3, [r7, #8]
 8107eea:	785b      	ldrb	r3, [r3, #1]
 8107eec:	f023 0310 	bic.w	r3, r3, #16
 8107ef0:	b2db      	uxtb	r3, r3
 8107ef2:	330a      	adds	r3, #10
 8107ef4:	b2da      	uxtb	r2, r3
 8107ef6:	68bb      	ldr	r3, [r7, #8]
 8107ef8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	2b00      	cmp	r3, #0
 8107efe:	d11c      	bne.n	8107f3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8107f00:	68bb      	ldr	r3, [r7, #8]
 8107f02:	78db      	ldrb	r3, [r3, #3]
 8107f04:	4618      	mov	r0, r3
 8107f06:	f000 f8ed 	bl	81080e4 <RTC_ByteToBcd2>
 8107f0a:	4603      	mov	r3, r0
 8107f0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8107f0e:	68bb      	ldr	r3, [r7, #8]
 8107f10:	785b      	ldrb	r3, [r3, #1]
 8107f12:	4618      	mov	r0, r3
 8107f14:	f000 f8e6 	bl	81080e4 <RTC_ByteToBcd2>
 8107f18:	4603      	mov	r3, r0
 8107f1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8107f1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8107f1e:	68bb      	ldr	r3, [r7, #8]
 8107f20:	789b      	ldrb	r3, [r3, #2]
 8107f22:	4618      	mov	r0, r3
 8107f24:	f000 f8de 	bl	81080e4 <RTC_ByteToBcd2>
 8107f28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8107f2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8107f2e:	68bb      	ldr	r3, [r7, #8]
 8107f30:	781b      	ldrb	r3, [r3, #0]
 8107f32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8107f34:	4313      	orrs	r3, r2
 8107f36:	617b      	str	r3, [r7, #20]
 8107f38:	e00e      	b.n	8107f58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8107f3a:	68bb      	ldr	r3, [r7, #8]
 8107f3c:	78db      	ldrb	r3, [r3, #3]
 8107f3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8107f40:	68bb      	ldr	r3, [r7, #8]
 8107f42:	785b      	ldrb	r3, [r3, #1]
 8107f44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8107f46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8107f48:	68ba      	ldr	r2, [r7, #8]
 8107f4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8107f4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8107f4e:	68bb      	ldr	r3, [r7, #8]
 8107f50:	781b      	ldrb	r3, [r3, #0]
 8107f52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8107f54:	4313      	orrs	r3, r2
 8107f56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8107f58:	68fb      	ldr	r3, [r7, #12]
 8107f5a:	681b      	ldr	r3, [r3, #0]
 8107f5c:	22ca      	movs	r2, #202	; 0xca
 8107f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8107f60:	68fb      	ldr	r3, [r7, #12]
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	2253      	movs	r2, #83	; 0x53
 8107f66:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8107f68:	68f8      	ldr	r0, [r7, #12]
 8107f6a:	f000 f84c 	bl	8108006 <RTC_EnterInitMode>
 8107f6e:	4603      	mov	r3, r0
 8107f70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8107f72:	7cfb      	ldrb	r3, [r7, #19]
 8107f74:	2b00      	cmp	r3, #0
 8107f76:	d10c      	bne.n	8107f92 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8107f78:	68fb      	ldr	r3, [r7, #12]
 8107f7a:	681a      	ldr	r2, [r3, #0]
 8107f7c:	697b      	ldr	r3, [r7, #20]
 8107f7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8107f82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8107f86:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8107f88:	68f8      	ldr	r0, [r7, #12]
 8107f8a:	f000 f86d 	bl	8108068 <RTC_ExitInitMode>
 8107f8e:	4603      	mov	r3, r0
 8107f90:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8107f92:	68fb      	ldr	r3, [r7, #12]
 8107f94:	681b      	ldr	r3, [r3, #0]
 8107f96:	22ff      	movs	r2, #255	; 0xff
 8107f98:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8107f9a:	7cfb      	ldrb	r3, [r7, #19]
 8107f9c:	2b00      	cmp	r3, #0
 8107f9e:	d103      	bne.n	8107fa8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8107fa0:	68fb      	ldr	r3, [r7, #12]
 8107fa2:	2201      	movs	r2, #1
 8107fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8107fa8:	68fb      	ldr	r3, [r7, #12]
 8107faa:	2200      	movs	r2, #0
 8107fac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8107fb0:	7cfb      	ldrb	r3, [r7, #19]


}
 8107fb2:	4618      	mov	r0, r3
 8107fb4:	371c      	adds	r7, #28
 8107fb6:	46bd      	mov	sp, r7
 8107fb8:	bd90      	pop	{r4, r7, pc}

08107fba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8107fba:	b580      	push	{r7, lr}
 8107fbc:	b084      	sub	sp, #16
 8107fbe:	af00      	add	r7, sp, #0
 8107fc0:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	68da      	ldr	r2, [r3, #12]
 8107fc8:	687b      	ldr	r3, [r7, #4]
 8107fca:	681b      	ldr	r3, [r3, #0]
 8107fcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8107fd0:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8107fd2:	f7f9 fa11 	bl	81013f8 <HAL_GetTick>
 8107fd6:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8107fd8:	e009      	b.n	8107fee <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8107fda:	f7f9 fa0d 	bl	81013f8 <HAL_GetTick>
 8107fde:	4602      	mov	r2, r0
 8107fe0:	68fb      	ldr	r3, [r7, #12]
 8107fe2:	1ad3      	subs	r3, r2, r3
 8107fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8107fe8:	d901      	bls.n	8107fee <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8107fea:	2303      	movs	r3, #3
 8107fec:	e007      	b.n	8107ffe <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	681b      	ldr	r3, [r3, #0]
 8107ff2:	68db      	ldr	r3, [r3, #12]
 8107ff4:	f003 0320 	and.w	r3, r3, #32
 8107ff8:	2b00      	cmp	r3, #0
 8107ffa:	d0ee      	beq.n	8107fda <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8107ffc:	2300      	movs	r3, #0
}
 8107ffe:	4618      	mov	r0, r3
 8108000:	3710      	adds	r7, #16
 8108002:	46bd      	mov	sp, r7
 8108004:	bd80      	pop	{r7, pc}

08108006 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8108006:	b580      	push	{r7, lr}
 8108008:	b084      	sub	sp, #16
 810800a:	af00      	add	r7, sp, #0
 810800c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810800e:	2300      	movs	r3, #0
 8108010:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	68db      	ldr	r3, [r3, #12]
 8108018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810801c:	2b00      	cmp	r3, #0
 810801e:	d11d      	bne.n	810805c <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108028:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 810802a:	f7f9 f9e5 	bl	81013f8 <HAL_GetTick>
 810802e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8108030:	e00d      	b.n	810804e <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8108032:	f7f9 f9e1 	bl	81013f8 <HAL_GetTick>
 8108036:	4602      	mov	r2, r0
 8108038:	68bb      	ldr	r3, [r7, #8]
 810803a:	1ad3      	subs	r3, r2, r3
 810803c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8108040:	d905      	bls.n	810804e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8108042:	2303      	movs	r3, #3
 8108044:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	2203      	movs	r2, #3
 810804a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	68db      	ldr	r3, [r3, #12]
 8108054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108058:	2b00      	cmp	r3, #0
 810805a:	d0ea      	beq.n	8108032 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 810805c:	7bfb      	ldrb	r3, [r7, #15]
}
 810805e:	4618      	mov	r0, r3
 8108060:	3710      	adds	r7, #16
 8108062:	46bd      	mov	sp, r7
 8108064:	bd80      	pop	{r7, pc}
	...

08108068 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8108068:	b580      	push	{r7, lr}
 810806a:	b084      	sub	sp, #16
 810806c:	af00      	add	r7, sp, #0
 810806e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108070:	2300      	movs	r3, #0
 8108072:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8108074:	4b1a      	ldr	r3, [pc, #104]	; (81080e0 <RTC_ExitInitMode+0x78>)
 8108076:	68db      	ldr	r3, [r3, #12]
 8108078:	4a19      	ldr	r2, [pc, #100]	; (81080e0 <RTC_ExitInitMode+0x78>)
 810807a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810807e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8108080:	4b17      	ldr	r3, [pc, #92]	; (81080e0 <RTC_ExitInitMode+0x78>)
 8108082:	689b      	ldr	r3, [r3, #8]
 8108084:	f003 0320 	and.w	r3, r3, #32
 8108088:	2b00      	cmp	r3, #0
 810808a:	d10c      	bne.n	81080a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810808c:	6878      	ldr	r0, [r7, #4]
 810808e:	f7ff ff94 	bl	8107fba <HAL_RTC_WaitForSynchro>
 8108092:	4603      	mov	r3, r0
 8108094:	2b00      	cmp	r3, #0
 8108096:	d01e      	beq.n	81080d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108098:	687b      	ldr	r3, [r7, #4]
 810809a:	2203      	movs	r2, #3
 810809c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81080a0:	2303      	movs	r3, #3
 81080a2:	73fb      	strb	r3, [r7, #15]
 81080a4:	e017      	b.n	81080d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81080a6:	4b0e      	ldr	r3, [pc, #56]	; (81080e0 <RTC_ExitInitMode+0x78>)
 81080a8:	689b      	ldr	r3, [r3, #8]
 81080aa:	4a0d      	ldr	r2, [pc, #52]	; (81080e0 <RTC_ExitInitMode+0x78>)
 81080ac:	f023 0320 	bic.w	r3, r3, #32
 81080b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81080b2:	6878      	ldr	r0, [r7, #4]
 81080b4:	f7ff ff81 	bl	8107fba <HAL_RTC_WaitForSynchro>
 81080b8:	4603      	mov	r3, r0
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	d005      	beq.n	81080ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	2203      	movs	r2, #3
 81080c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81080c6:	2303      	movs	r3, #3
 81080c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81080ca:	4b05      	ldr	r3, [pc, #20]	; (81080e0 <RTC_ExitInitMode+0x78>)
 81080cc:	689b      	ldr	r3, [r3, #8]
 81080ce:	4a04      	ldr	r2, [pc, #16]	; (81080e0 <RTC_ExitInitMode+0x78>)
 81080d0:	f043 0320 	orr.w	r3, r3, #32
 81080d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 81080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 81080d8:	4618      	mov	r0, r3
 81080da:	3710      	adds	r7, #16
 81080dc:	46bd      	mov	sp, r7
 81080de:	bd80      	pop	{r7, pc}
 81080e0:	58004000 	.word	0x58004000

081080e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 81080e4:	b480      	push	{r7}
 81080e6:	b085      	sub	sp, #20
 81080e8:	af00      	add	r7, sp, #0
 81080ea:	4603      	mov	r3, r0
 81080ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 81080ee:	2300      	movs	r3, #0
 81080f0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 81080f2:	79fb      	ldrb	r3, [r7, #7]
 81080f4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 81080f6:	e005      	b.n	8108104 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 81080f8:	68fb      	ldr	r3, [r7, #12]
 81080fa:	3301      	adds	r3, #1
 81080fc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 81080fe:	7afb      	ldrb	r3, [r7, #11]
 8108100:	3b0a      	subs	r3, #10
 8108102:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8108104:	7afb      	ldrb	r3, [r7, #11]
 8108106:	2b09      	cmp	r3, #9
 8108108:	d8f6      	bhi.n	81080f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 810810a:	68fb      	ldr	r3, [r7, #12]
 810810c:	b2db      	uxtb	r3, r3
 810810e:	011b      	lsls	r3, r3, #4
 8108110:	b2da      	uxtb	r2, r3
 8108112:	7afb      	ldrb	r3, [r7, #11]
 8108114:	4313      	orrs	r3, r2
 8108116:	b2db      	uxtb	r3, r3
}
 8108118:	4618      	mov	r0, r3
 810811a:	3714      	adds	r7, #20
 810811c:	46bd      	mov	sp, r7
 810811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108122:	4770      	bx	lr

08108124 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8108124:	b580      	push	{r7, lr}
 8108126:	b08a      	sub	sp, #40	; 0x28
 8108128:	af00      	add	r7, sp, #0
 810812a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 810812c:	687b      	ldr	r3, [r7, #4]
 810812e:	2b00      	cmp	r3, #0
 8108130:	d101      	bne.n	8108136 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8108132:	2301      	movs	r3, #1
 8108134:	e075      	b.n	8108222 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8108136:	687b      	ldr	r3, [r7, #4]
 8108138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810813c:	b2db      	uxtb	r3, r3
 810813e:	2b00      	cmp	r3, #0
 8108140:	d105      	bne.n	810814e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	2200      	movs	r2, #0
 8108146:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8108148:	6878      	ldr	r0, [r7, #4]
 810814a:	f7f8 fe6d 	bl	8100e28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 810814e:	687b      	ldr	r3, [r7, #4]
 8108150:	2203      	movs	r2, #3
 8108152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8108156:	6878      	ldr	r0, [r7, #4]
 8108158:	f000 f868 	bl	810822c <HAL_SD_InitCard>
 810815c:	4603      	mov	r3, r0
 810815e:	2b00      	cmp	r3, #0
 8108160:	d001      	beq.n	8108166 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8108162:	2301      	movs	r3, #1
 8108164:	e05d      	b.n	8108222 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8108166:	f107 0308 	add.w	r3, r7, #8
 810816a:	4619      	mov	r1, r3
 810816c:	6878      	ldr	r0, [r7, #4]
 810816e:	f000 fdad 	bl	8108ccc <HAL_SD_GetCardStatus>
 8108172:	4603      	mov	r3, r0
 8108174:	2b00      	cmp	r3, #0
 8108176:	d001      	beq.n	810817c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8108178:	2301      	movs	r3, #1
 810817a:	e052      	b.n	8108222 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 810817c:	7e3b      	ldrb	r3, [r7, #24]
 810817e:	b2db      	uxtb	r3, r3
 8108180:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8108182:	7e7b      	ldrb	r3, [r7, #25]
 8108184:	b2db      	uxtb	r3, r3
 8108186:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810818c:	2b01      	cmp	r3, #1
 810818e:	d10a      	bne.n	81081a6 <HAL_SD_Init+0x82>
 8108190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108192:	2b00      	cmp	r3, #0
 8108194:	d102      	bne.n	810819c <HAL_SD_Init+0x78>
 8108196:	6a3b      	ldr	r3, [r7, #32]
 8108198:	2b00      	cmp	r3, #0
 810819a:	d004      	beq.n	81081a6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810819c:	687b      	ldr	r3, [r7, #4]
 810819e:	f44f 7200 	mov.w	r2, #512	; 0x200
 81081a2:	659a      	str	r2, [r3, #88]	; 0x58
 81081a4:	e00b      	b.n	81081be <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081aa:	2b01      	cmp	r3, #1
 81081ac:	d104      	bne.n	81081b8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 81081b4:	659a      	str	r2, [r3, #88]	; 0x58
 81081b6:	e002      	b.n	81081be <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 81081b8:	687b      	ldr	r3, [r7, #4]
 81081ba:	2200      	movs	r2, #0
 81081bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	68db      	ldr	r3, [r3, #12]
 81081c2:	4619      	mov	r1, r3
 81081c4:	6878      	ldr	r0, [r7, #4]
 81081c6:	f000 fe63 	bl	8108e90 <HAL_SD_ConfigWideBusOperation>
 81081ca:	4603      	mov	r3, r0
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d001      	beq.n	81081d4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 81081d0:	2301      	movs	r3, #1
 81081d2:	e026      	b.n	8108222 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 81081d4:	f7f9 f910 	bl	81013f8 <HAL_GetTick>
 81081d8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 81081da:	e011      	b.n	8108200 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81081dc:	f7f9 f90c 	bl	81013f8 <HAL_GetTick>
 81081e0:	4602      	mov	r2, r0
 81081e2:	69fb      	ldr	r3, [r7, #28]
 81081e4:	1ad3      	subs	r3, r2, r3
 81081e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81081ea:	d109      	bne.n	8108200 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81081f2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	2201      	movs	r2, #1
 81081f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 81081fc:	2303      	movs	r3, #3
 81081fe:	e010      	b.n	8108222 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108200:	6878      	ldr	r0, [r7, #4]
 8108202:	f000 ff55 	bl	81090b0 <HAL_SD_GetCardState>
 8108206:	4603      	mov	r3, r0
 8108208:	2b04      	cmp	r3, #4
 810820a:	d1e7      	bne.n	81081dc <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	2200      	movs	r2, #0
 8108210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8108212:	687b      	ldr	r3, [r7, #4]
 8108214:	2200      	movs	r2, #0
 8108216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	2201      	movs	r2, #1
 810821c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8108220:	2300      	movs	r3, #0
}
 8108222:	4618      	mov	r0, r3
 8108224:	3728      	adds	r7, #40	; 0x28
 8108226:	46bd      	mov	sp, r7
 8108228:	bd80      	pop	{r7, pc}
	...

0810822c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 810822c:	b590      	push	{r4, r7, lr}
 810822e:	b08d      	sub	sp, #52	; 0x34
 8108230:	af02      	add	r7, sp, #8
 8108232:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8108234:	2300      	movs	r3, #0
 8108236:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8108238:	2300      	movs	r3, #0
 810823a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810823c:	2300      	movs	r3, #0
 810823e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8108240:	2300      	movs	r3, #0
 8108242:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108244:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8108248:	f7fe fa7a 	bl	8106740 <HAL_RCCEx_GetPeriphCLKFreq>
 810824c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108250:	2b00      	cmp	r3, #0
 8108252:	d109      	bne.n	8108268 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108254:	687b      	ldr	r3, [r7, #4]
 8108256:	2201      	movs	r2, #1
 8108258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8108262:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108264:	2301      	movs	r3, #1
 8108266:	e06a      	b.n	810833e <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8108268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810826a:	0a1b      	lsrs	r3, r3, #8
 810826c:	4a36      	ldr	r2, [pc, #216]	; (8108348 <HAL_SD_InitCard+0x11c>)
 810826e:	fba2 2303 	umull	r2, r3, r2, r3
 8108272:	091b      	lsrs	r3, r3, #4
 8108274:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8108276:	687b      	ldr	r3, [r7, #4]
 8108278:	681c      	ldr	r4, [r3, #0]
 810827a:	466a      	mov	r2, sp
 810827c:	f107 0318 	add.w	r3, r7, #24
 8108280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108284:	e882 0003 	stmia.w	r2, {r0, r1}
 8108288:	f107 030c 	add.w	r3, r7, #12
 810828c:	cb0e      	ldmia	r3, {r1, r2, r3}
 810828e:	4620      	mov	r0, r4
 8108290:	f001 fcec 	bl	8109c6c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8108294:	687b      	ldr	r3, [r7, #4]
 8108296:	681b      	ldr	r3, [r3, #0]
 8108298:	4618      	mov	r0, r3
 810829a:	f001 fd2f 	bl	8109cfc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 810829e:	69fb      	ldr	r3, [r7, #28]
 81082a0:	005b      	lsls	r3, r3, #1
 81082a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 81082a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 81082aa:	4a28      	ldr	r2, [pc, #160]	; (810834c <HAL_SD_InitCard+0x120>)
 81082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81082ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81082b2:	3301      	adds	r3, #1
 81082b4:	4618      	mov	r0, r3
 81082b6:	f7f9 f8ab 	bl	8101410 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 81082ba:	6878      	ldr	r0, [r7, #4]
 81082bc:	f000 ffd4 	bl	8109268 <SD_PowerON>
 81082c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81082c2:	6a3b      	ldr	r3, [r7, #32]
 81082c4:	2b00      	cmp	r3, #0
 81082c6:	d00b      	beq.n	81082e0 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 81082c8:	687b      	ldr	r3, [r7, #4]
 81082ca:	2201      	movs	r2, #1
 81082cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 81082d0:	687b      	ldr	r3, [r7, #4]
 81082d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81082d4:	6a3b      	ldr	r3, [r7, #32]
 81082d6:	431a      	orrs	r2, r3
 81082d8:	687b      	ldr	r3, [r7, #4]
 81082da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 81082dc:	2301      	movs	r3, #1
 81082de:	e02e      	b.n	810833e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 81082e0:	6878      	ldr	r0, [r7, #4]
 81082e2:	f000 ff05 	bl	81090f0 <SD_InitCard>
 81082e6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81082e8:	6a3b      	ldr	r3, [r7, #32]
 81082ea:	2b00      	cmp	r3, #0
 81082ec:	d00b      	beq.n	8108306 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	2201      	movs	r2, #1
 81082f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 81082f6:	687b      	ldr	r3, [r7, #4]
 81082f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81082fa:	6a3b      	ldr	r3, [r7, #32]
 81082fc:	431a      	orrs	r2, r3
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108302:	2301      	movs	r3, #1
 8108304:	e01b      	b.n	810833e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108306:	687b      	ldr	r3, [r7, #4]
 8108308:	681b      	ldr	r3, [r3, #0]
 810830a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810830e:	4618      	mov	r0, r3
 8108310:	f001 fd8a 	bl	8109e28 <SDMMC_CmdBlockLength>
 8108314:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108316:	6a3b      	ldr	r3, [r7, #32]
 8108318:	2b00      	cmp	r3, #0
 810831a:	d00f      	beq.n	810833c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810831c:	687b      	ldr	r3, [r7, #4]
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	4a0b      	ldr	r2, [pc, #44]	; (8108350 <HAL_SD_InitCard+0x124>)
 8108322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108324:	687b      	ldr	r3, [r7, #4]
 8108326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108328:	6a3b      	ldr	r3, [r7, #32]
 810832a:	431a      	orrs	r2, r3
 810832c:	687b      	ldr	r3, [r7, #4]
 810832e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108330:	687b      	ldr	r3, [r7, #4]
 8108332:	2201      	movs	r2, #1
 8108334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8108338:	2301      	movs	r3, #1
 810833a:	e000      	b.n	810833e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 810833c:	2300      	movs	r3, #0
}
 810833e:	4618      	mov	r0, r3
 8108340:	372c      	adds	r7, #44	; 0x2c
 8108342:	46bd      	mov	sp, r7
 8108344:	bd90      	pop	{r4, r7, pc}
 8108346:	bf00      	nop
 8108348:	014f8b59 	.word	0x014f8b59
 810834c:	00012110 	.word	0x00012110
 8108350:	1fe00fff 	.word	0x1fe00fff

08108354 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8108354:	b580      	push	{r7, lr}
 8108356:	b092      	sub	sp, #72	; 0x48
 8108358:	af00      	add	r7, sp, #0
 810835a:	60f8      	str	r0, [r7, #12]
 810835c:	60b9      	str	r1, [r7, #8]
 810835e:	607a      	str	r2, [r7, #4]
 8108360:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8108362:	f7f9 f849 	bl	81013f8 <HAL_GetTick>
 8108366:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8108368:	687b      	ldr	r3, [r7, #4]
 810836a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 810836c:	68bb      	ldr	r3, [r7, #8]
 810836e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8108370:	68bb      	ldr	r3, [r7, #8]
 8108372:	2b00      	cmp	r3, #0
 8108374:	d107      	bne.n	8108386 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108376:	68fb      	ldr	r3, [r7, #12]
 8108378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810837a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810837e:	68fb      	ldr	r3, [r7, #12]
 8108380:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108382:	2301      	movs	r3, #1
 8108384:	e167      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8108386:	68fb      	ldr	r3, [r7, #12]
 8108388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810838c:	b2db      	uxtb	r3, r3
 810838e:	2b01      	cmp	r3, #1
 8108390:	f040 815a 	bne.w	8108648 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108394:	68fb      	ldr	r3, [r7, #12]
 8108396:	2200      	movs	r2, #0
 8108398:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 810839a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810839c:	683b      	ldr	r3, [r7, #0]
 810839e:	441a      	add	r2, r3
 81083a0:	68fb      	ldr	r3, [r7, #12]
 81083a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81083a4:	429a      	cmp	r2, r3
 81083a6:	d907      	bls.n	81083b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 81083a8:	68fb      	ldr	r3, [r7, #12]
 81083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81083ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 81083b0:	68fb      	ldr	r3, [r7, #12]
 81083b2:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 81083b4:	2301      	movs	r3, #1
 81083b6:	e14e      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 81083b8:	68fb      	ldr	r3, [r7, #12]
 81083ba:	2203      	movs	r2, #3
 81083bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 81083c0:	68fb      	ldr	r3, [r7, #12]
 81083c2:	681b      	ldr	r3, [r3, #0]
 81083c4:	2200      	movs	r2, #0
 81083c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 81083c8:	68fb      	ldr	r3, [r7, #12]
 81083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81083cc:	2b01      	cmp	r3, #1
 81083ce:	d002      	beq.n	81083d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 81083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083d2:	025b      	lsls	r3, r3, #9
 81083d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81083d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81083da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 81083dc:	683b      	ldr	r3, [r7, #0]
 81083de:	025b      	lsls	r3, r3, #9
 81083e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 81083e2:	2390      	movs	r3, #144	; 0x90
 81083e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81083e6:	2302      	movs	r3, #2
 81083e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81083ea:	2300      	movs	r3, #0
 81083ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 81083ee:	2300      	movs	r3, #0
 81083f0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 81083f2:	68fb      	ldr	r3, [r7, #12]
 81083f4:	681b      	ldr	r3, [r3, #0]
 81083f6:	f107 0214 	add.w	r2, r7, #20
 81083fa:	4611      	mov	r1, r2
 81083fc:	4618      	mov	r0, r3
 81083fe:	f001 fce7 	bl	8109dd0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8108402:	68fb      	ldr	r3, [r7, #12]
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	68da      	ldr	r2, [r3, #12]
 8108408:	68fb      	ldr	r3, [r7, #12]
 810840a:	681b      	ldr	r3, [r3, #0]
 810840c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108410:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8108412:	683b      	ldr	r3, [r7, #0]
 8108414:	2b01      	cmp	r3, #1
 8108416:	d90a      	bls.n	810842e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8108418:	68fb      	ldr	r3, [r7, #12]
 810841a:	2202      	movs	r2, #2
 810841c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 810841e:	68fb      	ldr	r3, [r7, #12]
 8108420:	681b      	ldr	r3, [r3, #0]
 8108422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8108424:	4618      	mov	r0, r3
 8108426:	f001 fd45 	bl	8109eb4 <SDMMC_CmdReadMultiBlock>
 810842a:	6478      	str	r0, [r7, #68]	; 0x44
 810842c:	e009      	b.n	8108442 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 810842e:	68fb      	ldr	r3, [r7, #12]
 8108430:	2201      	movs	r2, #1
 8108432:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8108434:	68fb      	ldr	r3, [r7, #12]
 8108436:	681b      	ldr	r3, [r3, #0]
 8108438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 810843a:	4618      	mov	r0, r3
 810843c:	f001 fd17 	bl	8109e6e <SDMMC_CmdReadSingleBlock>
 8108440:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8108442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108444:	2b00      	cmp	r3, #0
 8108446:	d012      	beq.n	810846e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108448:	68fb      	ldr	r3, [r7, #12]
 810844a:	681b      	ldr	r3, [r3, #0]
 810844c:	4a84      	ldr	r2, [pc, #528]	; (8108660 <HAL_SD_ReadBlocks+0x30c>)
 810844e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8108450:	68fb      	ldr	r3, [r7, #12]
 8108452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108456:	431a      	orrs	r2, r3
 8108458:	68fb      	ldr	r3, [r7, #12]
 810845a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 810845c:	68fb      	ldr	r3, [r7, #12]
 810845e:	2201      	movs	r2, #1
 8108460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8108464:	68fb      	ldr	r3, [r7, #12]
 8108466:	2200      	movs	r2, #0
 8108468:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 810846a:	2301      	movs	r3, #1
 810846c:	e0f3      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 810846e:	69bb      	ldr	r3, [r7, #24]
 8108470:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8108472:	e058      	b.n	8108526 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8108474:	68fb      	ldr	r3, [r7, #12]
 8108476:	681b      	ldr	r3, [r3, #0]
 8108478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810847a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810847e:	2b00      	cmp	r3, #0
 8108480:	d033      	beq.n	81084ea <HAL_SD_ReadBlocks+0x196>
 8108482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108484:	2b1f      	cmp	r3, #31
 8108486:	d930      	bls.n	81084ea <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8108488:	2300      	movs	r3, #0
 810848a:	643b      	str	r3, [r7, #64]	; 0x40
 810848c:	e027      	b.n	81084de <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 810848e:	68fb      	ldr	r3, [r7, #12]
 8108490:	681b      	ldr	r3, [r3, #0]
 8108492:	4618      	mov	r0, r3
 8108494:	f001 fc14 	bl	8109cc0 <SDMMC_ReadFIFO>
 8108498:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 810849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810849c:	b2da      	uxtb	r2, r3
 810849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084a0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 81084a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084a4:	3301      	adds	r3, #1
 81084a6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 81084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084aa:	0a1b      	lsrs	r3, r3, #8
 81084ac:	b2da      	uxtb	r2, r3
 81084ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084b0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 81084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084b4:	3301      	adds	r3, #1
 81084b6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 81084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084ba:	0c1b      	lsrs	r3, r3, #16
 81084bc:	b2da      	uxtb	r2, r3
 81084be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 81084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084c4:	3301      	adds	r3, #1
 81084c6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 81084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084ca:	0e1b      	lsrs	r3, r3, #24
 81084cc:	b2da      	uxtb	r2, r3
 81084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 81084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81084d4:	3301      	adds	r3, #1
 81084d6:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 81084d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81084da:	3301      	adds	r3, #1
 81084dc:	643b      	str	r3, [r7, #64]	; 0x40
 81084de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81084e0:	2b07      	cmp	r3, #7
 81084e2:	d9d4      	bls.n	810848e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 81084e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81084e6:	3b20      	subs	r3, #32
 81084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 81084ea:	f7f8 ff85 	bl	81013f8 <HAL_GetTick>
 81084ee:	4602      	mov	r2, r0
 81084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81084f2:	1ad3      	subs	r3, r2, r3
 81084f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81084f6:	429a      	cmp	r2, r3
 81084f8:	d902      	bls.n	8108500 <HAL_SD_ReadBlocks+0x1ac>
 81084fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81084fc:	2b00      	cmp	r3, #0
 81084fe:	d112      	bne.n	8108526 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108500:	68fb      	ldr	r3, [r7, #12]
 8108502:	681b      	ldr	r3, [r3, #0]
 8108504:	4a56      	ldr	r2, [pc, #344]	; (8108660 <HAL_SD_ReadBlocks+0x30c>)
 8108506:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8108508:	68fb      	ldr	r3, [r7, #12]
 810850a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810850c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8108510:	68fb      	ldr	r3, [r7, #12]
 8108512:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8108514:	68fb      	ldr	r3, [r7, #12]
 8108516:	2201      	movs	r2, #1
 8108518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 810851c:	68fb      	ldr	r3, [r7, #12]
 810851e:	2200      	movs	r2, #0
 8108520:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8108522:	2303      	movs	r3, #3
 8108524:	e097      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8108526:	68fb      	ldr	r3, [r7, #12]
 8108528:	681b      	ldr	r3, [r3, #0]
 810852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810852c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8108530:	2b00      	cmp	r3, #0
 8108532:	d09f      	beq.n	8108474 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8108534:	68fb      	ldr	r3, [r7, #12]
 8108536:	681b      	ldr	r3, [r3, #0]
 8108538:	68da      	ldr	r2, [r3, #12]
 810853a:	68fb      	ldr	r3, [r7, #12]
 810853c:	681b      	ldr	r3, [r3, #0]
 810853e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108542:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8108544:	68fb      	ldr	r3, [r7, #12]
 8108546:	681b      	ldr	r3, [r3, #0]
 8108548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810854a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810854e:	2b00      	cmp	r3, #0
 8108550:	d022      	beq.n	8108598 <HAL_SD_ReadBlocks+0x244>
 8108552:	683b      	ldr	r3, [r7, #0]
 8108554:	2b01      	cmp	r3, #1
 8108556:	d91f      	bls.n	8108598 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8108558:	68fb      	ldr	r3, [r7, #12]
 810855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810855c:	2b03      	cmp	r3, #3
 810855e:	d01b      	beq.n	8108598 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8108560:	68fb      	ldr	r3, [r7, #12]
 8108562:	681b      	ldr	r3, [r3, #0]
 8108564:	4618      	mov	r0, r3
 8108566:	f001 fd0f 	bl	8109f88 <SDMMC_CmdStopTransfer>
 810856a:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 810856c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810856e:	2b00      	cmp	r3, #0
 8108570:	d012      	beq.n	8108598 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108572:	68fb      	ldr	r3, [r7, #12]
 8108574:	681b      	ldr	r3, [r3, #0]
 8108576:	4a3a      	ldr	r2, [pc, #232]	; (8108660 <HAL_SD_ReadBlocks+0x30c>)
 8108578:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 810857a:	68fb      	ldr	r3, [r7, #12]
 810857c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810857e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108580:	431a      	orrs	r2, r3
 8108582:	68fb      	ldr	r3, [r7, #12]
 8108584:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8108586:	68fb      	ldr	r3, [r7, #12]
 8108588:	2201      	movs	r2, #1
 810858a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 810858e:	68fb      	ldr	r3, [r7, #12]
 8108590:	2200      	movs	r2, #0
 8108592:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8108594:	2301      	movs	r3, #1
 8108596:	e05e      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8108598:	68fb      	ldr	r3, [r7, #12]
 810859a:	681b      	ldr	r3, [r3, #0]
 810859c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810859e:	f003 0308 	and.w	r3, r3, #8
 81085a2:	2b00      	cmp	r3, #0
 81085a4:	d012      	beq.n	81085cc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81085a6:	68fb      	ldr	r3, [r7, #12]
 81085a8:	681b      	ldr	r3, [r3, #0]
 81085aa:	4a2d      	ldr	r2, [pc, #180]	; (8108660 <HAL_SD_ReadBlocks+0x30c>)
 81085ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 81085ae:	68fb      	ldr	r3, [r7, #12]
 81085b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81085b2:	f043 0208 	orr.w	r2, r3, #8
 81085b6:	68fb      	ldr	r3, [r7, #12]
 81085b8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 81085ba:	68fb      	ldr	r3, [r7, #12]
 81085bc:	2201      	movs	r2, #1
 81085be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81085c2:	68fb      	ldr	r3, [r7, #12]
 81085c4:	2200      	movs	r2, #0
 81085c6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 81085c8:	2301      	movs	r3, #1
 81085ca:	e044      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81085cc:	68fb      	ldr	r3, [r7, #12]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81085d2:	f003 0302 	and.w	r3, r3, #2
 81085d6:	2b00      	cmp	r3, #0
 81085d8:	d012      	beq.n	8108600 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81085da:	68fb      	ldr	r3, [r7, #12]
 81085dc:	681b      	ldr	r3, [r3, #0]
 81085de:	4a20      	ldr	r2, [pc, #128]	; (8108660 <HAL_SD_ReadBlocks+0x30c>)
 81085e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 81085e2:	68fb      	ldr	r3, [r7, #12]
 81085e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81085e6:	f043 0202 	orr.w	r2, r3, #2
 81085ea:	68fb      	ldr	r3, [r7, #12]
 81085ec:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 81085ee:	68fb      	ldr	r3, [r7, #12]
 81085f0:	2201      	movs	r2, #1
 81085f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81085f6:	68fb      	ldr	r3, [r7, #12]
 81085f8:	2200      	movs	r2, #0
 81085fa:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 81085fc:	2301      	movs	r3, #1
 81085fe:	e02a      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8108600:	68fb      	ldr	r3, [r7, #12]
 8108602:	681b      	ldr	r3, [r3, #0]
 8108604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108606:	f003 0320 	and.w	r3, r3, #32
 810860a:	2b00      	cmp	r3, #0
 810860c:	d012      	beq.n	8108634 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810860e:	68fb      	ldr	r3, [r7, #12]
 8108610:	681b      	ldr	r3, [r3, #0]
 8108612:	4a13      	ldr	r2, [pc, #76]	; (8108660 <HAL_SD_ReadBlocks+0x30c>)
 8108614:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8108616:	68fb      	ldr	r3, [r7, #12]
 8108618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810861a:	f043 0220 	orr.w	r2, r3, #32
 810861e:	68fb      	ldr	r3, [r7, #12]
 8108620:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8108622:	68fb      	ldr	r3, [r7, #12]
 8108624:	2201      	movs	r2, #1
 8108626:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 810862a:	68fb      	ldr	r3, [r7, #12]
 810862c:	2200      	movs	r2, #0
 810862e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8108630:	2301      	movs	r3, #1
 8108632:	e010      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108634:	68fb      	ldr	r3, [r7, #12]
 8108636:	681b      	ldr	r3, [r3, #0]
 8108638:	4a0a      	ldr	r2, [pc, #40]	; (8108664 <HAL_SD_ReadBlocks+0x310>)
 810863a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 810863c:	68fb      	ldr	r3, [r7, #12]
 810863e:	2201      	movs	r2, #1
 8108640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8108644:	2300      	movs	r3, #0
 8108646:	e006      	b.n	8108656 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8108648:	68fb      	ldr	r3, [r7, #12]
 810864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810864c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8108650:	68fb      	ldr	r3, [r7, #12]
 8108652:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108654:	2301      	movs	r3, #1
  }
}
 8108656:	4618      	mov	r0, r3
 8108658:	3748      	adds	r7, #72	; 0x48
 810865a:	46bd      	mov	sp, r7
 810865c:	bd80      	pop	{r7, pc}
 810865e:	bf00      	nop
 8108660:	1fe00fff 	.word	0x1fe00fff
 8108664:	18000f3a 	.word	0x18000f3a

08108668 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8108668:	b580      	push	{r7, lr}
 810866a:	b092      	sub	sp, #72	; 0x48
 810866c:	af00      	add	r7, sp, #0
 810866e:	60f8      	str	r0, [r7, #12]
 8108670:	60b9      	str	r1, [r7, #8]
 8108672:	607a      	str	r2, [r7, #4]
 8108674:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8108676:	f7f8 febf 	bl	81013f8 <HAL_GetTick>
 810867a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 810867c:	687b      	ldr	r3, [r7, #4]
 810867e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8108680:	68bb      	ldr	r3, [r7, #8]
 8108682:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8108684:	68bb      	ldr	r3, [r7, #8]
 8108686:	2b00      	cmp	r3, #0
 8108688:	d107      	bne.n	810869a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810868a:	68fb      	ldr	r3, [r7, #12]
 810868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810868e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108692:	68fb      	ldr	r3, [r7, #12]
 8108694:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108696:	2301      	movs	r3, #1
 8108698:	e16b      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 810869a:	68fb      	ldr	r3, [r7, #12]
 810869c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 81086a0:	b2db      	uxtb	r3, r3
 81086a2:	2b01      	cmp	r3, #1
 81086a4:	f040 815e 	bne.w	8108964 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 81086a8:	68fb      	ldr	r3, [r7, #12]
 81086aa:	2200      	movs	r2, #0
 81086ac:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 81086ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81086b0:	683b      	ldr	r3, [r7, #0]
 81086b2:	441a      	add	r2, r3
 81086b4:	68fb      	ldr	r3, [r7, #12]
 81086b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81086b8:	429a      	cmp	r2, r3
 81086ba:	d907      	bls.n	81086cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 81086bc:	68fb      	ldr	r3, [r7, #12]
 81086be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81086c0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 81086c4:	68fb      	ldr	r3, [r7, #12]
 81086c6:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 81086c8:	2301      	movs	r3, #1
 81086ca:	e152      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 81086cc:	68fb      	ldr	r3, [r7, #12]
 81086ce:	2203      	movs	r2, #3
 81086d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 81086d4:	68fb      	ldr	r3, [r7, #12]
 81086d6:	681b      	ldr	r3, [r3, #0]
 81086d8:	2200      	movs	r2, #0
 81086da:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 81086dc:	68fb      	ldr	r3, [r7, #12]
 81086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81086e0:	2b01      	cmp	r3, #1
 81086e2:	d002      	beq.n	81086ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 81086e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81086e6:	025b      	lsls	r3, r3, #9
 81086e8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81086ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81086ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 81086f0:	683b      	ldr	r3, [r7, #0]
 81086f2:	025b      	lsls	r3, r3, #9
 81086f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 81086f6:	2390      	movs	r3, #144	; 0x90
 81086f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 81086fa:	2300      	movs	r3, #0
 81086fc:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 81086fe:	2300      	movs	r3, #0
 8108700:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8108702:	2300      	movs	r3, #0
 8108704:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8108706:	68fb      	ldr	r3, [r7, #12]
 8108708:	681b      	ldr	r3, [r3, #0]
 810870a:	f107 0218 	add.w	r2, r7, #24
 810870e:	4611      	mov	r1, r2
 8108710:	4618      	mov	r0, r3
 8108712:	f001 fb5d 	bl	8109dd0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8108716:	68fb      	ldr	r3, [r7, #12]
 8108718:	681b      	ldr	r3, [r3, #0]
 810871a:	68da      	ldr	r2, [r3, #12]
 810871c:	68fb      	ldr	r3, [r7, #12]
 810871e:	681b      	ldr	r3, [r3, #0]
 8108720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8108724:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8108726:	683b      	ldr	r3, [r7, #0]
 8108728:	2b01      	cmp	r3, #1
 810872a:	d90a      	bls.n	8108742 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 810872c:	68fb      	ldr	r3, [r7, #12]
 810872e:	2220      	movs	r2, #32
 8108730:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8108732:	68fb      	ldr	r3, [r7, #12]
 8108734:	681b      	ldr	r3, [r3, #0]
 8108736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8108738:	4618      	mov	r0, r3
 810873a:	f001 fc01 	bl	8109f40 <SDMMC_CmdWriteMultiBlock>
 810873e:	6478      	str	r0, [r7, #68]	; 0x44
 8108740:	e009      	b.n	8108756 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8108742:	68fb      	ldr	r3, [r7, #12]
 8108744:	2210      	movs	r2, #16
 8108746:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8108748:	68fb      	ldr	r3, [r7, #12]
 810874a:	681b      	ldr	r3, [r3, #0]
 810874c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 810874e:	4618      	mov	r0, r3
 8108750:	f001 fbd3 	bl	8109efa <SDMMC_CmdWriteSingleBlock>
 8108754:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8108756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108758:	2b00      	cmp	r3, #0
 810875a:	d012      	beq.n	8108782 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810875c:	68fb      	ldr	r3, [r7, #12]
 810875e:	681b      	ldr	r3, [r3, #0]
 8108760:	4a86      	ldr	r2, [pc, #536]	; (810897c <HAL_SD_WriteBlocks+0x314>)
 8108762:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8108764:	68fb      	ldr	r3, [r7, #12]
 8108766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810876a:	431a      	orrs	r2, r3
 810876c:	68fb      	ldr	r3, [r7, #12]
 810876e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8108770:	68fb      	ldr	r3, [r7, #12]
 8108772:	2201      	movs	r2, #1
 8108774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8108778:	68fb      	ldr	r3, [r7, #12]
 810877a:	2200      	movs	r2, #0
 810877c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 810877e:	2301      	movs	r3, #1
 8108780:	e0f7      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8108782:	69fb      	ldr	r3, [r7, #28]
 8108784:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8108786:	e05c      	b.n	8108842 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8108788:	68fb      	ldr	r3, [r7, #12]
 810878a:	681b      	ldr	r3, [r3, #0]
 810878c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810878e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8108792:	2b00      	cmp	r3, #0
 8108794:	d037      	beq.n	8108806 <HAL_SD_WriteBlocks+0x19e>
 8108796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108798:	2b1f      	cmp	r3, #31
 810879a:	d934      	bls.n	8108806 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 810879c:	2300      	movs	r3, #0
 810879e:	643b      	str	r3, [r7, #64]	; 0x40
 81087a0:	e02b      	b.n	81087fa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 81087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087a4:	781b      	ldrb	r3, [r3, #0]
 81087a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 81087a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087aa:	3301      	adds	r3, #1
 81087ac:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 81087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087b0:	781b      	ldrb	r3, [r3, #0]
 81087b2:	021a      	lsls	r2, r3, #8
 81087b4:	697b      	ldr	r3, [r7, #20]
 81087b6:	4313      	orrs	r3, r2
 81087b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 81087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087bc:	3301      	adds	r3, #1
 81087be:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 81087c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087c2:	781b      	ldrb	r3, [r3, #0]
 81087c4:	041a      	lsls	r2, r3, #16
 81087c6:	697b      	ldr	r3, [r7, #20]
 81087c8:	4313      	orrs	r3, r2
 81087ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 81087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087ce:	3301      	adds	r3, #1
 81087d0:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 81087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087d4:	781b      	ldrb	r3, [r3, #0]
 81087d6:	061a      	lsls	r2, r3, #24
 81087d8:	697b      	ldr	r3, [r7, #20]
 81087da:	4313      	orrs	r3, r2
 81087dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 81087de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087e0:	3301      	adds	r3, #1
 81087e2:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 81087e4:	68fb      	ldr	r3, [r7, #12]
 81087e6:	681b      	ldr	r3, [r3, #0]
 81087e8:	f107 0214 	add.w	r2, r7, #20
 81087ec:	4611      	mov	r1, r2
 81087ee:	4618      	mov	r0, r3
 81087f0:	f001 fa73 	bl	8109cda <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 81087f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81087f6:	3301      	adds	r3, #1
 81087f8:	643b      	str	r3, [r7, #64]	; 0x40
 81087fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81087fc:	2b07      	cmp	r3, #7
 81087fe:	d9d0      	bls.n	81087a2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8108800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108802:	3b20      	subs	r3, #32
 8108804:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8108806:	f7f8 fdf7 	bl	81013f8 <HAL_GetTick>
 810880a:	4602      	mov	r2, r0
 810880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810880e:	1ad3      	subs	r3, r2, r3
 8108810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8108812:	429a      	cmp	r2, r3
 8108814:	d902      	bls.n	810881c <HAL_SD_WriteBlocks+0x1b4>
 8108816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108818:	2b00      	cmp	r3, #0
 810881a:	d112      	bne.n	8108842 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810881c:	68fb      	ldr	r3, [r7, #12]
 810881e:	681b      	ldr	r3, [r3, #0]
 8108820:	4a56      	ldr	r2, [pc, #344]	; (810897c <HAL_SD_WriteBlocks+0x314>)
 8108822:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8108824:	68fb      	ldr	r3, [r7, #12]
 8108826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810882a:	431a      	orrs	r2, r3
 810882c:	68fb      	ldr	r3, [r7, #12]
 810882e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8108830:	68fb      	ldr	r3, [r7, #12]
 8108832:	2201      	movs	r2, #1
 8108834:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8108838:	68fb      	ldr	r3, [r7, #12]
 810883a:	2200      	movs	r2, #0
 810883c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 810883e:	2303      	movs	r3, #3
 8108840:	e097      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8108842:	68fb      	ldr	r3, [r7, #12]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108848:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 810884c:	2b00      	cmp	r3, #0
 810884e:	d09b      	beq.n	8108788 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8108850:	68fb      	ldr	r3, [r7, #12]
 8108852:	681b      	ldr	r3, [r3, #0]
 8108854:	68da      	ldr	r2, [r3, #12]
 8108856:	68fb      	ldr	r3, [r7, #12]
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810885e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8108860:	68fb      	ldr	r3, [r7, #12]
 8108862:	681b      	ldr	r3, [r3, #0]
 8108864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810886a:	2b00      	cmp	r3, #0
 810886c:	d022      	beq.n	81088b4 <HAL_SD_WriteBlocks+0x24c>
 810886e:	683b      	ldr	r3, [r7, #0]
 8108870:	2b01      	cmp	r3, #1
 8108872:	d91f      	bls.n	81088b4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8108874:	68fb      	ldr	r3, [r7, #12]
 8108876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108878:	2b03      	cmp	r3, #3
 810887a:	d01b      	beq.n	81088b4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 810887c:	68fb      	ldr	r3, [r7, #12]
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	4618      	mov	r0, r3
 8108882:	f001 fb81 	bl	8109f88 <SDMMC_CmdStopTransfer>
 8108886:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8108888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810888a:	2b00      	cmp	r3, #0
 810888c:	d012      	beq.n	81088b4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810888e:	68fb      	ldr	r3, [r7, #12]
 8108890:	681b      	ldr	r3, [r3, #0]
 8108892:	4a3a      	ldr	r2, [pc, #232]	; (810897c <HAL_SD_WriteBlocks+0x314>)
 8108894:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8108896:	68fb      	ldr	r3, [r7, #12]
 8108898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810889a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810889c:	431a      	orrs	r2, r3
 810889e:	68fb      	ldr	r3, [r7, #12]
 81088a0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 81088a2:	68fb      	ldr	r3, [r7, #12]
 81088a4:	2201      	movs	r2, #1
 81088a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 81088aa:	68fb      	ldr	r3, [r7, #12]
 81088ac:	2200      	movs	r2, #0
 81088ae:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 81088b0:	2301      	movs	r3, #1
 81088b2:	e05e      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 81088b4:	68fb      	ldr	r3, [r7, #12]
 81088b6:	681b      	ldr	r3, [r3, #0]
 81088b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81088ba:	f003 0308 	and.w	r3, r3, #8
 81088be:	2b00      	cmp	r3, #0
 81088c0:	d012      	beq.n	81088e8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81088c2:	68fb      	ldr	r3, [r7, #12]
 81088c4:	681b      	ldr	r3, [r3, #0]
 81088c6:	4a2d      	ldr	r2, [pc, #180]	; (810897c <HAL_SD_WriteBlocks+0x314>)
 81088c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 81088ca:	68fb      	ldr	r3, [r7, #12]
 81088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81088ce:	f043 0208 	orr.w	r2, r3, #8
 81088d2:	68fb      	ldr	r3, [r7, #12]
 81088d4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 81088d6:	68fb      	ldr	r3, [r7, #12]
 81088d8:	2201      	movs	r2, #1
 81088da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 81088de:	68fb      	ldr	r3, [r7, #12]
 81088e0:	2200      	movs	r2, #0
 81088e2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 81088e4:	2301      	movs	r3, #1
 81088e6:	e044      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81088e8:	68fb      	ldr	r3, [r7, #12]
 81088ea:	681b      	ldr	r3, [r3, #0]
 81088ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81088ee:	f003 0302 	and.w	r3, r3, #2
 81088f2:	2b00      	cmp	r3, #0
 81088f4:	d012      	beq.n	810891c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81088f6:	68fb      	ldr	r3, [r7, #12]
 81088f8:	681b      	ldr	r3, [r3, #0]
 81088fa:	4a20      	ldr	r2, [pc, #128]	; (810897c <HAL_SD_WriteBlocks+0x314>)
 81088fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 81088fe:	68fb      	ldr	r3, [r7, #12]
 8108900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108902:	f043 0202 	orr.w	r2, r3, #2
 8108906:	68fb      	ldr	r3, [r7, #12]
 8108908:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 810890a:	68fb      	ldr	r3, [r7, #12]
 810890c:	2201      	movs	r2, #1
 810890e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8108912:	68fb      	ldr	r3, [r7, #12]
 8108914:	2200      	movs	r2, #0
 8108916:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8108918:	2301      	movs	r3, #1
 810891a:	e02a      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 810891c:	68fb      	ldr	r3, [r7, #12]
 810891e:	681b      	ldr	r3, [r3, #0]
 8108920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108922:	f003 0310 	and.w	r3, r3, #16
 8108926:	2b00      	cmp	r3, #0
 8108928:	d012      	beq.n	8108950 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810892a:	68fb      	ldr	r3, [r7, #12]
 810892c:	681b      	ldr	r3, [r3, #0]
 810892e:	4a13      	ldr	r2, [pc, #76]	; (810897c <HAL_SD_WriteBlocks+0x314>)
 8108930:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8108932:	68fb      	ldr	r3, [r7, #12]
 8108934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108936:	f043 0210 	orr.w	r2, r3, #16
 810893a:	68fb      	ldr	r3, [r7, #12]
 810893c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 810893e:	68fb      	ldr	r3, [r7, #12]
 8108940:	2201      	movs	r2, #1
 8108942:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8108946:	68fb      	ldr	r3, [r7, #12]
 8108948:	2200      	movs	r2, #0
 810894a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 810894c:	2301      	movs	r3, #1
 810894e:	e010      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8108950:	68fb      	ldr	r3, [r7, #12]
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	4a0a      	ldr	r2, [pc, #40]	; (8108980 <HAL_SD_WriteBlocks+0x318>)
 8108956:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8108958:	68fb      	ldr	r3, [r7, #12]
 810895a:	2201      	movs	r2, #1
 810895c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8108960:	2300      	movs	r3, #0
 8108962:	e006      	b.n	8108972 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8108964:	68fb      	ldr	r3, [r7, #12]
 8108966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108968:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810896c:	68fb      	ldr	r3, [r7, #12]
 810896e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8108970:	2301      	movs	r3, #1
  }
}
 8108972:	4618      	mov	r0, r3
 8108974:	3748      	adds	r7, #72	; 0x48
 8108976:	46bd      	mov	sp, r7
 8108978:	bd80      	pop	{r7, pc}
 810897a:	bf00      	nop
 810897c:	1fe00fff 	.word	0x1fe00fff
 8108980:	18000f3a 	.word	0x18000f3a

08108984 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8108984:	b480      	push	{r7}
 8108986:	b083      	sub	sp, #12
 8108988:	af00      	add	r7, sp, #0
 810898a:	6078      	str	r0, [r7, #4]
 810898c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8108992:	0f9b      	lsrs	r3, r3, #30
 8108994:	b2da      	uxtb	r2, r3
 8108996:	683b      	ldr	r3, [r7, #0]
 8108998:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810899a:	687b      	ldr	r3, [r7, #4]
 810899c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810899e:	0e9b      	lsrs	r3, r3, #26
 81089a0:	b2db      	uxtb	r3, r3
 81089a2:	f003 030f 	and.w	r3, r3, #15
 81089a6:	b2da      	uxtb	r2, r3
 81089a8:	683b      	ldr	r3, [r7, #0]
 81089aa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 81089ac:	687b      	ldr	r3, [r7, #4]
 81089ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81089b0:	0e1b      	lsrs	r3, r3, #24
 81089b2:	b2db      	uxtb	r3, r3
 81089b4:	f003 0303 	and.w	r3, r3, #3
 81089b8:	b2da      	uxtb	r2, r3
 81089ba:	683b      	ldr	r3, [r7, #0]
 81089bc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81089c2:	0c1b      	lsrs	r3, r3, #16
 81089c4:	b2da      	uxtb	r2, r3
 81089c6:	683b      	ldr	r3, [r7, #0]
 81089c8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81089ce:	0a1b      	lsrs	r3, r3, #8
 81089d0:	b2da      	uxtb	r2, r3
 81089d2:	683b      	ldr	r3, [r7, #0]
 81089d4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81089da:	b2da      	uxtb	r2, r3
 81089dc:	683b      	ldr	r3, [r7, #0]
 81089de:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 81089e0:	687b      	ldr	r3, [r7, #4]
 81089e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81089e4:	0d1b      	lsrs	r3, r3, #20
 81089e6:	b29a      	uxth	r2, r3
 81089e8:	683b      	ldr	r3, [r7, #0]
 81089ea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 81089ec:	687b      	ldr	r3, [r7, #4]
 81089ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81089f0:	0c1b      	lsrs	r3, r3, #16
 81089f2:	b2db      	uxtb	r3, r3
 81089f4:	f003 030f 	and.w	r3, r3, #15
 81089f8:	b2da      	uxtb	r2, r3
 81089fa:	683b      	ldr	r3, [r7, #0]
 81089fc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 81089fe:	687b      	ldr	r3, [r7, #4]
 8108a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108a02:	0bdb      	lsrs	r3, r3, #15
 8108a04:	b2db      	uxtb	r3, r3
 8108a06:	f003 0301 	and.w	r3, r3, #1
 8108a0a:	b2da      	uxtb	r2, r3
 8108a0c:	683b      	ldr	r3, [r7, #0]
 8108a0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8108a10:	687b      	ldr	r3, [r7, #4]
 8108a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108a14:	0b9b      	lsrs	r3, r3, #14
 8108a16:	b2db      	uxtb	r3, r3
 8108a18:	f003 0301 	and.w	r3, r3, #1
 8108a1c:	b2da      	uxtb	r2, r3
 8108a1e:	683b      	ldr	r3, [r7, #0]
 8108a20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8108a22:	687b      	ldr	r3, [r7, #4]
 8108a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108a26:	0b5b      	lsrs	r3, r3, #13
 8108a28:	b2db      	uxtb	r3, r3
 8108a2a:	f003 0301 	and.w	r3, r3, #1
 8108a2e:	b2da      	uxtb	r2, r3
 8108a30:	683b      	ldr	r3, [r7, #0]
 8108a32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8108a34:	687b      	ldr	r3, [r7, #4]
 8108a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108a38:	0b1b      	lsrs	r3, r3, #12
 8108a3a:	b2db      	uxtb	r3, r3
 8108a3c:	f003 0301 	and.w	r3, r3, #1
 8108a40:	b2da      	uxtb	r2, r3
 8108a42:	683b      	ldr	r3, [r7, #0]
 8108a44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8108a46:	683b      	ldr	r3, [r7, #0]
 8108a48:	2200      	movs	r2, #0
 8108a4a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108a50:	2b00      	cmp	r3, #0
 8108a52:	d163      	bne.n	8108b1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108a58:	009a      	lsls	r2, r3, #2
 8108a5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8108a5e:	4013      	ands	r3, r2
 8108a60:	687a      	ldr	r2, [r7, #4]
 8108a62:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8108a64:	0f92      	lsrs	r2, r2, #30
 8108a66:	431a      	orrs	r2, r3
 8108a68:	683b      	ldr	r3, [r7, #0]
 8108a6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8108a6c:	687b      	ldr	r3, [r7, #4]
 8108a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108a70:	0edb      	lsrs	r3, r3, #27
 8108a72:	b2db      	uxtb	r3, r3
 8108a74:	f003 0307 	and.w	r3, r3, #7
 8108a78:	b2da      	uxtb	r2, r3
 8108a7a:	683b      	ldr	r3, [r7, #0]
 8108a7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8108a7e:	687b      	ldr	r3, [r7, #4]
 8108a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108a82:	0e1b      	lsrs	r3, r3, #24
 8108a84:	b2db      	uxtb	r3, r3
 8108a86:	f003 0307 	and.w	r3, r3, #7
 8108a8a:	b2da      	uxtb	r2, r3
 8108a8c:	683b      	ldr	r3, [r7, #0]
 8108a8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8108a90:	687b      	ldr	r3, [r7, #4]
 8108a92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108a94:	0d5b      	lsrs	r3, r3, #21
 8108a96:	b2db      	uxtb	r3, r3
 8108a98:	f003 0307 	and.w	r3, r3, #7
 8108a9c:	b2da      	uxtb	r2, r3
 8108a9e:	683b      	ldr	r3, [r7, #0]
 8108aa0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8108aa2:	687b      	ldr	r3, [r7, #4]
 8108aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108aa6:	0c9b      	lsrs	r3, r3, #18
 8108aa8:	b2db      	uxtb	r3, r3
 8108aaa:	f003 0307 	and.w	r3, r3, #7
 8108aae:	b2da      	uxtb	r2, r3
 8108ab0:	683b      	ldr	r3, [r7, #0]
 8108ab2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108ab8:	0bdb      	lsrs	r3, r3, #15
 8108aba:	b2db      	uxtb	r3, r3
 8108abc:	f003 0307 	and.w	r3, r3, #7
 8108ac0:	b2da      	uxtb	r2, r3
 8108ac2:	683b      	ldr	r3, [r7, #0]
 8108ac4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8108ac6:	683b      	ldr	r3, [r7, #0]
 8108ac8:	691b      	ldr	r3, [r3, #16]
 8108aca:	1c5a      	adds	r2, r3, #1
 8108acc:	687b      	ldr	r3, [r7, #4]
 8108ace:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8108ad0:	683b      	ldr	r3, [r7, #0]
 8108ad2:	7e1b      	ldrb	r3, [r3, #24]
 8108ad4:	b2db      	uxtb	r3, r3
 8108ad6:	f003 0307 	and.w	r3, r3, #7
 8108ada:	3302      	adds	r3, #2
 8108adc:	2201      	movs	r2, #1
 8108ade:	fa02 f303 	lsl.w	r3, r2, r3
 8108ae2:	687a      	ldr	r2, [r7, #4]
 8108ae4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8108ae6:	fb02 f203 	mul.w	r2, r2, r3
 8108aea:	687b      	ldr	r3, [r7, #4]
 8108aec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8108aee:	683b      	ldr	r3, [r7, #0]
 8108af0:	7a1b      	ldrb	r3, [r3, #8]
 8108af2:	b2db      	uxtb	r3, r3
 8108af4:	f003 030f 	and.w	r3, r3, #15
 8108af8:	2201      	movs	r2, #1
 8108afa:	409a      	lsls	r2, r3
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8108b00:	687b      	ldr	r3, [r7, #4]
 8108b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8108b04:	687a      	ldr	r2, [r7, #4]
 8108b06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8108b08:	0a52      	lsrs	r2, r2, #9
 8108b0a:	fb02 f203 	mul.w	r2, r2, r3
 8108b0e:	687b      	ldr	r3, [r7, #4]
 8108b10:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8108b12:	687b      	ldr	r3, [r7, #4]
 8108b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8108b18:	655a      	str	r2, [r3, #84]	; 0x54
 8108b1a:	e031      	b.n	8108b80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108b1c:	687b      	ldr	r3, [r7, #4]
 8108b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108b20:	2b01      	cmp	r3, #1
 8108b22:	d11d      	bne.n	8108b60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8108b24:	687b      	ldr	r3, [r7, #4]
 8108b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108b28:	041b      	lsls	r3, r3, #16
 8108b2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8108b2e:	687b      	ldr	r3, [r7, #4]
 8108b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108b32:	0c1b      	lsrs	r3, r3, #16
 8108b34:	431a      	orrs	r2, r3
 8108b36:	683b      	ldr	r3, [r7, #0]
 8108b38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8108b3a:	683b      	ldr	r3, [r7, #0]
 8108b3c:	691b      	ldr	r3, [r3, #16]
 8108b3e:	3301      	adds	r3, #1
 8108b40:	029a      	lsls	r2, r3, #10
 8108b42:	687b      	ldr	r3, [r7, #4]
 8108b44:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8108b46:	687b      	ldr	r3, [r7, #4]
 8108b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8108b4e:	687b      	ldr	r3, [r7, #4]
 8108b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8108b54:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8108b56:	687b      	ldr	r3, [r7, #4]
 8108b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108b5a:	687b      	ldr	r3, [r7, #4]
 8108b5c:	655a      	str	r2, [r3, #84]	; 0x54
 8108b5e:	e00f      	b.n	8108b80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108b60:	687b      	ldr	r3, [r7, #4]
 8108b62:	681b      	ldr	r3, [r3, #0]
 8108b64:	4a58      	ldr	r2, [pc, #352]	; (8108cc8 <HAL_SD_GetCardCSD+0x344>)
 8108b66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108b68:	687b      	ldr	r3, [r7, #4]
 8108b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108b6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108b70:	687b      	ldr	r3, [r7, #4]
 8108b72:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108b74:	687b      	ldr	r3, [r7, #4]
 8108b76:	2201      	movs	r2, #1
 8108b78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8108b7c:	2301      	movs	r3, #1
 8108b7e:	e09d      	b.n	8108cbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8108b80:	687b      	ldr	r3, [r7, #4]
 8108b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108b84:	0b9b      	lsrs	r3, r3, #14
 8108b86:	b2db      	uxtb	r3, r3
 8108b88:	f003 0301 	and.w	r3, r3, #1
 8108b8c:	b2da      	uxtb	r2, r3
 8108b8e:	683b      	ldr	r3, [r7, #0]
 8108b90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108b96:	09db      	lsrs	r3, r3, #7
 8108b98:	b2db      	uxtb	r3, r3
 8108b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108b9e:	b2da      	uxtb	r2, r3
 8108ba0:	683b      	ldr	r3, [r7, #0]
 8108ba2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108ba8:	b2db      	uxtb	r3, r3
 8108baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108bae:	b2da      	uxtb	r2, r3
 8108bb0:	683b      	ldr	r3, [r7, #0]
 8108bb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8108bb4:	687b      	ldr	r3, [r7, #4]
 8108bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108bb8:	0fdb      	lsrs	r3, r3, #31
 8108bba:	b2da      	uxtb	r2, r3
 8108bbc:	683b      	ldr	r3, [r7, #0]
 8108bbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8108bc0:	687b      	ldr	r3, [r7, #4]
 8108bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108bc4:	0f5b      	lsrs	r3, r3, #29
 8108bc6:	b2db      	uxtb	r3, r3
 8108bc8:	f003 0303 	and.w	r3, r3, #3
 8108bcc:	b2da      	uxtb	r2, r3
 8108bce:	683b      	ldr	r3, [r7, #0]
 8108bd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8108bd2:	687b      	ldr	r3, [r7, #4]
 8108bd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108bd6:	0e9b      	lsrs	r3, r3, #26
 8108bd8:	b2db      	uxtb	r3, r3
 8108bda:	f003 0307 	and.w	r3, r3, #7
 8108bde:	b2da      	uxtb	r2, r3
 8108be0:	683b      	ldr	r3, [r7, #0]
 8108be2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108be8:	0d9b      	lsrs	r3, r3, #22
 8108bea:	b2db      	uxtb	r3, r3
 8108bec:	f003 030f 	and.w	r3, r3, #15
 8108bf0:	b2da      	uxtb	r2, r3
 8108bf2:	683b      	ldr	r3, [r7, #0]
 8108bf4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108bfa:	0d5b      	lsrs	r3, r3, #21
 8108bfc:	b2db      	uxtb	r3, r3
 8108bfe:	f003 0301 	and.w	r3, r3, #1
 8108c02:	b2da      	uxtb	r2, r3
 8108c04:	683b      	ldr	r3, [r7, #0]
 8108c06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8108c0a:	683b      	ldr	r3, [r7, #0]
 8108c0c:	2200      	movs	r2, #0
 8108c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c16:	0c1b      	lsrs	r3, r3, #16
 8108c18:	b2db      	uxtb	r3, r3
 8108c1a:	f003 0301 	and.w	r3, r3, #1
 8108c1e:	b2da      	uxtb	r2, r3
 8108c20:	683b      	ldr	r3, [r7, #0]
 8108c22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c2a:	0bdb      	lsrs	r3, r3, #15
 8108c2c:	b2db      	uxtb	r3, r3
 8108c2e:	f003 0301 	and.w	r3, r3, #1
 8108c32:	b2da      	uxtb	r2, r3
 8108c34:	683b      	ldr	r3, [r7, #0]
 8108c36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c3e:	0b9b      	lsrs	r3, r3, #14
 8108c40:	b2db      	uxtb	r3, r3
 8108c42:	f003 0301 	and.w	r3, r3, #1
 8108c46:	b2da      	uxtb	r2, r3
 8108c48:	683b      	ldr	r3, [r7, #0]
 8108c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c52:	0b5b      	lsrs	r3, r3, #13
 8108c54:	b2db      	uxtb	r3, r3
 8108c56:	f003 0301 	and.w	r3, r3, #1
 8108c5a:	b2da      	uxtb	r2, r3
 8108c5c:	683b      	ldr	r3, [r7, #0]
 8108c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8108c62:	687b      	ldr	r3, [r7, #4]
 8108c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c66:	0b1b      	lsrs	r3, r3, #12
 8108c68:	b2db      	uxtb	r3, r3
 8108c6a:	f003 0301 	and.w	r3, r3, #1
 8108c6e:	b2da      	uxtb	r2, r3
 8108c70:	683b      	ldr	r3, [r7, #0]
 8108c72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c7a:	0a9b      	lsrs	r3, r3, #10
 8108c7c:	b2db      	uxtb	r3, r3
 8108c7e:	f003 0303 	and.w	r3, r3, #3
 8108c82:	b2da      	uxtb	r2, r3
 8108c84:	683b      	ldr	r3, [r7, #0]
 8108c86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108c8e:	0a1b      	lsrs	r3, r3, #8
 8108c90:	b2db      	uxtb	r3, r3
 8108c92:	f003 0303 	and.w	r3, r3, #3
 8108c96:	b2da      	uxtb	r2, r3
 8108c98:	683b      	ldr	r3, [r7, #0]
 8108c9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8108c9e:	687b      	ldr	r3, [r7, #4]
 8108ca0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8108ca2:	085b      	lsrs	r3, r3, #1
 8108ca4:	b2db      	uxtb	r3, r3
 8108ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108caa:	b2da      	uxtb	r2, r3
 8108cac:	683b      	ldr	r3, [r7, #0]
 8108cae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8108cb2:	683b      	ldr	r3, [r7, #0]
 8108cb4:	2201      	movs	r2, #1
 8108cb6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8108cba:	2300      	movs	r3, #0
}
 8108cbc:	4618      	mov	r0, r3
 8108cbe:	370c      	adds	r7, #12
 8108cc0:	46bd      	mov	sp, r7
 8108cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cc6:	4770      	bx	lr
 8108cc8:	1fe00fff 	.word	0x1fe00fff

08108ccc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8108ccc:	b580      	push	{r7, lr}
 8108cce:	b094      	sub	sp, #80	; 0x50
 8108cd0:	af00      	add	r7, sp, #0
 8108cd2:	6078      	str	r0, [r7, #4]
 8108cd4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8108cd6:	2300      	movs	r3, #0
 8108cd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8108cdc:	f107 0308 	add.w	r3, r7, #8
 8108ce0:	4619      	mov	r1, r3
 8108ce2:	6878      	ldr	r0, [r7, #4]
 8108ce4:	f000 fb4a 	bl	810937c <SD_SendSDStatus>
 8108ce8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108cec:	2b00      	cmp	r3, #0
 8108cee:	d011      	beq.n	8108d14 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108cf0:	687b      	ldr	r3, [r7, #4]
 8108cf2:	681b      	ldr	r3, [r3, #0]
 8108cf4:	4a4f      	ldr	r2, [pc, #316]	; (8108e34 <HAL_SD_GetCardStatus+0x168>)
 8108cf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8108cf8:	687b      	ldr	r3, [r7, #4]
 8108cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108cfe:	431a      	orrs	r2, r3
 8108d00:	687b      	ldr	r3, [r7, #4]
 8108d02:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	2201      	movs	r2, #1
 8108d08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8108d0c:	2301      	movs	r3, #1
 8108d0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8108d12:	e070      	b.n	8108df6 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8108d14:	68bb      	ldr	r3, [r7, #8]
 8108d16:	099b      	lsrs	r3, r3, #6
 8108d18:	b2db      	uxtb	r3, r3
 8108d1a:	f003 0303 	and.w	r3, r3, #3
 8108d1e:	b2da      	uxtb	r2, r3
 8108d20:	683b      	ldr	r3, [r7, #0]
 8108d22:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8108d24:	68bb      	ldr	r3, [r7, #8]
 8108d26:	095b      	lsrs	r3, r3, #5
 8108d28:	b2db      	uxtb	r3, r3
 8108d2a:	f003 0301 	and.w	r3, r3, #1
 8108d2e:	b2da      	uxtb	r2, r3
 8108d30:	683b      	ldr	r3, [r7, #0]
 8108d32:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8108d34:	68bb      	ldr	r3, [r7, #8]
 8108d36:	0a1b      	lsrs	r3, r3, #8
 8108d38:	b29b      	uxth	r3, r3
 8108d3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8108d3e:	b29a      	uxth	r2, r3
 8108d40:	68bb      	ldr	r3, [r7, #8]
 8108d42:	0e1b      	lsrs	r3, r3, #24
 8108d44:	b29b      	uxth	r3, r3
 8108d46:	4313      	orrs	r3, r2
 8108d48:	b29a      	uxth	r2, r3
 8108d4a:	683b      	ldr	r3, [r7, #0]
 8108d4c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108d4e:	68fb      	ldr	r3, [r7, #12]
 8108d50:	061a      	lsls	r2, r3, #24
 8108d52:	68fb      	ldr	r3, [r7, #12]
 8108d54:	021b      	lsls	r3, r3, #8
 8108d56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8108d5a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108d5c:	68fb      	ldr	r3, [r7, #12]
 8108d5e:	0a1b      	lsrs	r3, r3, #8
 8108d60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108d64:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8108d66:	68fb      	ldr	r3, [r7, #12]
 8108d68:	0e1b      	lsrs	r3, r3, #24
 8108d6a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8108d6c:	683b      	ldr	r3, [r7, #0]
 8108d6e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8108d70:	693b      	ldr	r3, [r7, #16]
 8108d72:	b2da      	uxtb	r2, r3
 8108d74:	683b      	ldr	r3, [r7, #0]
 8108d76:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8108d78:	693b      	ldr	r3, [r7, #16]
 8108d7a:	0a1b      	lsrs	r3, r3, #8
 8108d7c:	b2da      	uxtb	r2, r3
 8108d7e:	683b      	ldr	r3, [r7, #0]
 8108d80:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8108d82:	693b      	ldr	r3, [r7, #16]
 8108d84:	0d1b      	lsrs	r3, r3, #20
 8108d86:	b2db      	uxtb	r3, r3
 8108d88:	f003 030f 	and.w	r3, r3, #15
 8108d8c:	b2da      	uxtb	r2, r3
 8108d8e:	683b      	ldr	r3, [r7, #0]
 8108d90:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8108d92:	693b      	ldr	r3, [r7, #16]
 8108d94:	0c1b      	lsrs	r3, r3, #16
 8108d96:	b29b      	uxth	r3, r3
 8108d98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8108d9c:	b29a      	uxth	r2, r3
 8108d9e:	697b      	ldr	r3, [r7, #20]
 8108da0:	b29b      	uxth	r3, r3
 8108da2:	b2db      	uxtb	r3, r3
 8108da4:	b29b      	uxth	r3, r3
 8108da6:	4313      	orrs	r3, r2
 8108da8:	b29a      	uxth	r2, r3
 8108daa:	683b      	ldr	r3, [r7, #0]
 8108dac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8108dae:	697b      	ldr	r3, [r7, #20]
 8108db0:	0a9b      	lsrs	r3, r3, #10
 8108db2:	b2db      	uxtb	r3, r3
 8108db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108db8:	b2da      	uxtb	r2, r3
 8108dba:	683b      	ldr	r3, [r7, #0]
 8108dbc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8108dbe:	697b      	ldr	r3, [r7, #20]
 8108dc0:	0a1b      	lsrs	r3, r3, #8
 8108dc2:	b2db      	uxtb	r3, r3
 8108dc4:	f003 0303 	and.w	r3, r3, #3
 8108dc8:	b2da      	uxtb	r2, r3
 8108dca:	683b      	ldr	r3, [r7, #0]
 8108dcc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8108dce:	697b      	ldr	r3, [r7, #20]
 8108dd0:	091b      	lsrs	r3, r3, #4
 8108dd2:	b2db      	uxtb	r3, r3
 8108dd4:	f003 030f 	and.w	r3, r3, #15
 8108dd8:	b2da      	uxtb	r2, r3
 8108dda:	683b      	ldr	r3, [r7, #0]
 8108ddc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8108dde:	697b      	ldr	r3, [r7, #20]
 8108de0:	b2db      	uxtb	r3, r3
 8108de2:	f003 030f 	and.w	r3, r3, #15
 8108de6:	b2da      	uxtb	r2, r3
 8108de8:	683b      	ldr	r3, [r7, #0]
 8108dea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8108dec:	69bb      	ldr	r3, [r7, #24]
 8108dee:	0e1b      	lsrs	r3, r3, #24
 8108df0:	b2da      	uxtb	r2, r3
 8108df2:	683b      	ldr	r3, [r7, #0]
 8108df4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108df6:	687b      	ldr	r3, [r7, #4]
 8108df8:	681b      	ldr	r3, [r3, #0]
 8108dfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8108dfe:	4618      	mov	r0, r3
 8108e00:	f001 f812 	bl	8109e28 <SDMMC_CmdBlockLength>
 8108e04:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8108e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108e08:	2b00      	cmp	r3, #0
 8108e0a:	d00d      	beq.n	8108e28 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108e0c:	687b      	ldr	r3, [r7, #4]
 8108e0e:	681b      	ldr	r3, [r3, #0]
 8108e10:	4a08      	ldr	r2, [pc, #32]	; (8108e34 <HAL_SD_GetCardStatus+0x168>)
 8108e12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8108e14:	687b      	ldr	r3, [r7, #4]
 8108e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108e18:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	2201      	movs	r2, #1
 8108e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8108e22:	2301      	movs	r3, #1
 8108e24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8108e28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8108e2c:	4618      	mov	r0, r3
 8108e2e:	3750      	adds	r7, #80	; 0x50
 8108e30:	46bd      	mov	sp, r7
 8108e32:	bd80      	pop	{r7, pc}
 8108e34:	1fe00fff 	.word	0x1fe00fff

08108e38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8108e38:	b480      	push	{r7}
 8108e3a:	b083      	sub	sp, #12
 8108e3c:	af00      	add	r7, sp, #0
 8108e3e:	6078      	str	r0, [r7, #4]
 8108e40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8108e42:	687b      	ldr	r3, [r7, #4]
 8108e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108e46:	683b      	ldr	r3, [r7, #0]
 8108e48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8108e4a:	687b      	ldr	r3, [r7, #4]
 8108e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108e4e:	683b      	ldr	r3, [r7, #0]
 8108e50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8108e52:	687b      	ldr	r3, [r7, #4]
 8108e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108e56:	683b      	ldr	r3, [r7, #0]
 8108e58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8108e5a:	687b      	ldr	r3, [r7, #4]
 8108e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108e5e:	683b      	ldr	r3, [r7, #0]
 8108e60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108e66:	683b      	ldr	r3, [r7, #0]
 8108e68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8108e6a:	687b      	ldr	r3, [r7, #4]
 8108e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108e6e:	683b      	ldr	r3, [r7, #0]
 8108e70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8108e76:	683b      	ldr	r3, [r7, #0]
 8108e78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8108e7e:	683b      	ldr	r3, [r7, #0]
 8108e80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8108e82:	2300      	movs	r3, #0
}
 8108e84:	4618      	mov	r0, r3
 8108e86:	370c      	adds	r7, #12
 8108e88:	46bd      	mov	sp, r7
 8108e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e8e:	4770      	bx	lr

08108e90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8108e90:	b590      	push	{r4, r7, lr}
 8108e92:	b08d      	sub	sp, #52	; 0x34
 8108e94:	af02      	add	r7, sp, #8
 8108e96:	6078      	str	r0, [r7, #4]
 8108e98:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8108e9a:	2300      	movs	r3, #0
 8108e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8108ea0:	687b      	ldr	r3, [r7, #4]
 8108ea2:	2203      	movs	r2, #3
 8108ea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8108ea8:	687b      	ldr	r3, [r7, #4]
 8108eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108eac:	2b03      	cmp	r3, #3
 8108eae:	d02e      	beq.n	8108f0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8108eb0:	683b      	ldr	r3, [r7, #0]
 8108eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108eb6:	d106      	bne.n	8108ec6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108eb8:	687b      	ldr	r3, [r7, #4]
 8108eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108ebc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8108ec4:	e029      	b.n	8108f1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8108ec6:	683b      	ldr	r3, [r7, #0]
 8108ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108ecc:	d10a      	bne.n	8108ee4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8108ece:	6878      	ldr	r0, [r7, #4]
 8108ed0:	f000 fb4c 	bl	810956c <SD_WideBus_Enable>
 8108ed4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8108ed6:	687b      	ldr	r3, [r7, #4]
 8108ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108eda:	6a3b      	ldr	r3, [r7, #32]
 8108edc:	431a      	orrs	r2, r3
 8108ede:	687b      	ldr	r3, [r7, #4]
 8108ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8108ee2:	e01a      	b.n	8108f1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8108ee4:	683b      	ldr	r3, [r7, #0]
 8108ee6:	2b00      	cmp	r3, #0
 8108ee8:	d10a      	bne.n	8108f00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8108eea:	6878      	ldr	r0, [r7, #4]
 8108eec:	f000 fb89 	bl	8109602 <SD_WideBus_Disable>
 8108ef0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8108ef2:	687b      	ldr	r3, [r7, #4]
 8108ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108ef6:	6a3b      	ldr	r3, [r7, #32]
 8108ef8:	431a      	orrs	r2, r3
 8108efa:	687b      	ldr	r3, [r7, #4]
 8108efc:	635a      	str	r2, [r3, #52]	; 0x34
 8108efe:	e00c      	b.n	8108f1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8108f00:	687b      	ldr	r3, [r7, #4]
 8108f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8108f08:	687b      	ldr	r3, [r7, #4]
 8108f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8108f0c:	e005      	b.n	8108f1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8108f0e:	687b      	ldr	r3, [r7, #4]
 8108f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8108f16:	687b      	ldr	r3, [r7, #4]
 8108f18:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8108f1a:	687b      	ldr	r3, [r7, #4]
 8108f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108f1e:	2b00      	cmp	r3, #0
 8108f20:	d007      	beq.n	8108f32 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108f22:	687b      	ldr	r3, [r7, #4]
 8108f24:	681b      	ldr	r3, [r3, #0]
 8108f26:	4a5e      	ldr	r2, [pc, #376]	; (81090a0 <HAL_SD_ConfigWideBusOperation+0x210>)
 8108f28:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8108f2a:	2301      	movs	r3, #1
 8108f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8108f30:	e094      	b.n	810905c <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108f32:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8108f36:	f7fd fc03 	bl	8106740 <HAL_RCCEx_GetPeriphCLKFreq>
 8108f3a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8108f3c:	69fb      	ldr	r3, [r7, #28]
 8108f3e:	2b00      	cmp	r3, #0
 8108f40:	f000 8083 	beq.w	810904a <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8108f44:	687b      	ldr	r3, [r7, #4]
 8108f46:	685b      	ldr	r3, [r3, #4]
 8108f48:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8108f4a:	687b      	ldr	r3, [r7, #4]
 8108f4c:	689b      	ldr	r3, [r3, #8]
 8108f4e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8108f50:	683b      	ldr	r3, [r7, #0]
 8108f52:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	691b      	ldr	r3, [r3, #16]
 8108f58:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8108f5a:	687b      	ldr	r3, [r7, #4]
 8108f5c:	695a      	ldr	r2, [r3, #20]
 8108f5e:	69fb      	ldr	r3, [r7, #28]
 8108f60:	4950      	ldr	r1, [pc, #320]	; (81090a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108f62:	fba1 1303 	umull	r1, r3, r1, r3
 8108f66:	0e1b      	lsrs	r3, r3, #24
 8108f68:	429a      	cmp	r2, r3
 8108f6a:	d303      	bcc.n	8108f74 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	695b      	ldr	r3, [r3, #20]
 8108f70:	61bb      	str	r3, [r7, #24]
 8108f72:	e05a      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8108f74:	687b      	ldr	r3, [r7, #4]
 8108f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108f7c:	d103      	bne.n	8108f86 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8108f7e:	687b      	ldr	r3, [r7, #4]
 8108f80:	695b      	ldr	r3, [r3, #20]
 8108f82:	61bb      	str	r3, [r7, #24]
 8108f84:	e051      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8108f86:	687b      	ldr	r3, [r7, #4]
 8108f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108f8e:	d126      	bne.n	8108fde <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108f90:	687b      	ldr	r3, [r7, #4]
 8108f92:	695b      	ldr	r3, [r3, #20]
 8108f94:	2b00      	cmp	r3, #0
 8108f96:	d10e      	bne.n	8108fb6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8108f98:	69fb      	ldr	r3, [r7, #28]
 8108f9a:	4a43      	ldr	r2, [pc, #268]	; (81090a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108f9c:	4293      	cmp	r3, r2
 8108f9e:	d906      	bls.n	8108fae <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108fa0:	69fb      	ldr	r3, [r7, #28]
 8108fa2:	4a40      	ldr	r2, [pc, #256]	; (81090a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8108fa8:	0e5b      	lsrs	r3, r3, #25
 8108faa:	61bb      	str	r3, [r7, #24]
 8108fac:	e03d      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108fae:	687b      	ldr	r3, [r7, #4]
 8108fb0:	695b      	ldr	r3, [r3, #20]
 8108fb2:	61bb      	str	r3, [r7, #24]
 8108fb4:	e039      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8108fb6:	687b      	ldr	r3, [r7, #4]
 8108fb8:	695b      	ldr	r3, [r3, #20]
 8108fba:	005b      	lsls	r3, r3, #1
 8108fbc:	69fa      	ldr	r2, [r7, #28]
 8108fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8108fc2:	4a39      	ldr	r2, [pc, #228]	; (81090a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8108fc4:	4293      	cmp	r3, r2
 8108fc6:	d906      	bls.n	8108fd6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8108fc8:	69fb      	ldr	r3, [r7, #28]
 8108fca:	4a36      	ldr	r2, [pc, #216]	; (81090a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8108fd0:	0e5b      	lsrs	r3, r3, #25
 8108fd2:	61bb      	str	r3, [r7, #24]
 8108fd4:	e029      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	695b      	ldr	r3, [r3, #20]
 8108fda:	61bb      	str	r3, [r7, #24]
 8108fdc:	e025      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	695b      	ldr	r3, [r3, #20]
 8108fe2:	2b00      	cmp	r3, #0
 8108fe4:	d10e      	bne.n	8109004 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8108fe6:	69fb      	ldr	r3, [r7, #28]
 8108fe8:	4a30      	ldr	r2, [pc, #192]	; (81090ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8108fea:	4293      	cmp	r3, r2
 8108fec:	d906      	bls.n	8108ffc <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8108fee:	69fb      	ldr	r3, [r7, #28]
 8108ff0:	4a2c      	ldr	r2, [pc, #176]	; (81090a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8108ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8108ff6:	0e1b      	lsrs	r3, r3, #24
 8108ff8:	61bb      	str	r3, [r7, #24]
 8108ffa:	e016      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	695b      	ldr	r3, [r3, #20]
 8109000:	61bb      	str	r3, [r7, #24]
 8109002:	e012      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	695b      	ldr	r3, [r3, #20]
 8109008:	005b      	lsls	r3, r3, #1
 810900a:	69fa      	ldr	r2, [r7, #28]
 810900c:	fbb2 f3f3 	udiv	r3, r2, r3
 8109010:	4a26      	ldr	r2, [pc, #152]	; (81090ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109012:	4293      	cmp	r3, r2
 8109014:	d906      	bls.n	8109024 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109016:	69fb      	ldr	r3, [r7, #28]
 8109018:	4a22      	ldr	r2, [pc, #136]	; (81090a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 810901a:	fba2 2303 	umull	r2, r3, r2, r3
 810901e:	0e1b      	lsrs	r3, r3, #24
 8109020:	61bb      	str	r3, [r7, #24]
 8109022:	e002      	b.n	810902a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109024:	687b      	ldr	r3, [r7, #4]
 8109026:	695b      	ldr	r3, [r3, #20]
 8109028:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 810902a:	687b      	ldr	r3, [r7, #4]
 810902c:	681c      	ldr	r4, [r3, #0]
 810902e:	466a      	mov	r2, sp
 8109030:	f107 0314 	add.w	r3, r7, #20
 8109034:	e893 0003 	ldmia.w	r3, {r0, r1}
 8109038:	e882 0003 	stmia.w	r2, {r0, r1}
 810903c:	f107 0308 	add.w	r3, r7, #8
 8109040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8109042:	4620      	mov	r0, r4
 8109044:	f000 fe12 	bl	8109c6c <SDMMC_Init>
 8109048:	e008      	b.n	810905c <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810904e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8109052:	687b      	ldr	r3, [r7, #4]
 8109054:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8109056:	2301      	movs	r3, #1
 8109058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	681b      	ldr	r3, [r3, #0]
 8109060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8109064:	4618      	mov	r0, r3
 8109066:	f000 fedf 	bl	8109e28 <SDMMC_CmdBlockLength>
 810906a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810906c:	6a3b      	ldr	r3, [r7, #32]
 810906e:	2b00      	cmp	r3, #0
 8109070:	d00c      	beq.n	810908c <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109072:	687b      	ldr	r3, [r7, #4]
 8109074:	681b      	ldr	r3, [r3, #0]
 8109076:	4a0a      	ldr	r2, [pc, #40]	; (81090a0 <HAL_SD_ConfigWideBusOperation+0x210>)
 8109078:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810907a:	687b      	ldr	r3, [r7, #4]
 810907c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810907e:	6a3b      	ldr	r3, [r7, #32]
 8109080:	431a      	orrs	r2, r3
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8109086:	2301      	movs	r3, #1
 8109088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810908c:	687b      	ldr	r3, [r7, #4]
 810908e:	2201      	movs	r2, #1
 8109090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8109094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8109098:	4618      	mov	r0, r3
 810909a:	372c      	adds	r7, #44	; 0x2c
 810909c:	46bd      	mov	sp, r7
 810909e:	bd90      	pop	{r4, r7, pc}
 81090a0:	1fe00fff 	.word	0x1fe00fff
 81090a4:	55e63b89 	.word	0x55e63b89
 81090a8:	02faf080 	.word	0x02faf080
 81090ac:	017d7840 	.word	0x017d7840

081090b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 81090b0:	b580      	push	{r7, lr}
 81090b2:	b086      	sub	sp, #24
 81090b4:	af00      	add	r7, sp, #0
 81090b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 81090b8:	2300      	movs	r3, #0
 81090ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 81090bc:	f107 030c 	add.w	r3, r7, #12
 81090c0:	4619      	mov	r1, r3
 81090c2:	6878      	ldr	r0, [r7, #4]
 81090c4:	f000 fa2a 	bl	810951c <SD_SendStatus>
 81090c8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 81090ca:	697b      	ldr	r3, [r7, #20]
 81090cc:	2b00      	cmp	r3, #0
 81090ce:	d005      	beq.n	81090dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81090d4:	697b      	ldr	r3, [r7, #20]
 81090d6:	431a      	orrs	r2, r3
 81090d8:	687b      	ldr	r3, [r7, #4]
 81090da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 81090dc:	68fb      	ldr	r3, [r7, #12]
 81090de:	0a5b      	lsrs	r3, r3, #9
 81090e0:	f003 030f 	and.w	r3, r3, #15
 81090e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 81090e6:	693b      	ldr	r3, [r7, #16]
}
 81090e8:	4618      	mov	r0, r3
 81090ea:	3718      	adds	r7, #24
 81090ec:	46bd      	mov	sp, r7
 81090ee:	bd80      	pop	{r7, pc}

081090f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 81090f0:	b580      	push	{r7, lr}
 81090f2:	b090      	sub	sp, #64	; 0x40
 81090f4:	af00      	add	r7, sp, #0
 81090f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 81090f8:	2301      	movs	r3, #1
 81090fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	681b      	ldr	r3, [r3, #0]
 8109100:	4618      	mov	r0, r3
 8109102:	f000 fe0c 	bl	8109d1e <SDMMC_GetPowerState>
 8109106:	4603      	mov	r3, r0
 8109108:	2b00      	cmp	r3, #0
 810910a:	d102      	bne.n	8109112 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810910c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8109110:	e0a5      	b.n	810925e <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109112:	687b      	ldr	r3, [r7, #4]
 8109114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109116:	2b03      	cmp	r3, #3
 8109118:	d02e      	beq.n	8109178 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810911a:	687b      	ldr	r3, [r7, #4]
 810911c:	681b      	ldr	r3, [r3, #0]
 810911e:	4618      	mov	r0, r3
 8109120:	f001 f857 	bl	810a1d2 <SDMMC_CmdSendCID>
 8109124:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8109126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109128:	2b00      	cmp	r3, #0
 810912a:	d001      	beq.n	8109130 <SD_InitCard+0x40>
    {
      return errorstate;
 810912c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810912e:	e096      	b.n	810925e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109130:	687b      	ldr	r3, [r7, #4]
 8109132:	681b      	ldr	r3, [r3, #0]
 8109134:	2100      	movs	r1, #0
 8109136:	4618      	mov	r0, r3
 8109138:	f000 fe37 	bl	8109daa <SDMMC_GetResponse>
 810913c:	4602      	mov	r2, r0
 810913e:	687b      	ldr	r3, [r7, #4]
 8109140:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	681b      	ldr	r3, [r3, #0]
 8109146:	2104      	movs	r1, #4
 8109148:	4618      	mov	r0, r3
 810914a:	f000 fe2e 	bl	8109daa <SDMMC_GetResponse>
 810914e:	4602      	mov	r2, r0
 8109150:	687b      	ldr	r3, [r7, #4]
 8109152:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	681b      	ldr	r3, [r3, #0]
 8109158:	2108      	movs	r1, #8
 810915a:	4618      	mov	r0, r3
 810915c:	f000 fe25 	bl	8109daa <SDMMC_GetResponse>
 8109160:	4602      	mov	r2, r0
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8109166:	687b      	ldr	r3, [r7, #4]
 8109168:	681b      	ldr	r3, [r3, #0]
 810916a:	210c      	movs	r1, #12
 810916c:	4618      	mov	r0, r3
 810916e:	f000 fe1c 	bl	8109daa <SDMMC_GetResponse>
 8109172:	4602      	mov	r2, r0
 8109174:	687b      	ldr	r3, [r7, #4]
 8109176:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109178:	687b      	ldr	r3, [r7, #4]
 810917a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810917c:	2b03      	cmp	r3, #3
 810917e:	d00d      	beq.n	810919c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8109180:	687b      	ldr	r3, [r7, #4]
 8109182:	681b      	ldr	r3, [r3, #0]
 8109184:	f107 020e 	add.w	r2, r7, #14
 8109188:	4611      	mov	r1, r2
 810918a:	4618      	mov	r0, r3
 810918c:	f001 f860 	bl	810a250 <SDMMC_CmdSetRelAdd>
 8109190:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8109192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109194:	2b00      	cmp	r3, #0
 8109196:	d001      	beq.n	810919c <SD_InitCard+0xac>
    {
      return errorstate;
 8109198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810919a:	e060      	b.n	810925e <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810919c:	687b      	ldr	r3, [r7, #4]
 810919e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81091a0:	2b03      	cmp	r3, #3
 81091a2:	d036      	beq.n	8109212 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 81091a4:	89fb      	ldrh	r3, [r7, #14]
 81091a6:	461a      	mov	r2, r3
 81091a8:	687b      	ldr	r3, [r7, #4]
 81091aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	681a      	ldr	r2, [r3, #0]
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81091b4:	041b      	lsls	r3, r3, #16
 81091b6:	4619      	mov	r1, r3
 81091b8:	4610      	mov	r0, r2
 81091ba:	f001 f829 	bl	810a210 <SDMMC_CmdSendCSD>
 81091be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 81091c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81091c2:	2b00      	cmp	r3, #0
 81091c4:	d001      	beq.n	81091ca <SD_InitCard+0xda>
    {
      return errorstate;
 81091c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81091c8:	e049      	b.n	810925e <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81091ca:	687b      	ldr	r3, [r7, #4]
 81091cc:	681b      	ldr	r3, [r3, #0]
 81091ce:	2100      	movs	r1, #0
 81091d0:	4618      	mov	r0, r3
 81091d2:	f000 fdea 	bl	8109daa <SDMMC_GetResponse>
 81091d6:	4602      	mov	r2, r0
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	681b      	ldr	r3, [r3, #0]
 81091e0:	2104      	movs	r1, #4
 81091e2:	4618      	mov	r0, r3
 81091e4:	f000 fde1 	bl	8109daa <SDMMC_GetResponse>
 81091e8:	4602      	mov	r2, r0
 81091ea:	687b      	ldr	r3, [r7, #4]
 81091ec:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 81091ee:	687b      	ldr	r3, [r7, #4]
 81091f0:	681b      	ldr	r3, [r3, #0]
 81091f2:	2108      	movs	r1, #8
 81091f4:	4618      	mov	r0, r3
 81091f6:	f000 fdd8 	bl	8109daa <SDMMC_GetResponse>
 81091fa:	4602      	mov	r2, r0
 81091fc:	687b      	ldr	r3, [r7, #4]
 81091fe:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8109200:	687b      	ldr	r3, [r7, #4]
 8109202:	681b      	ldr	r3, [r3, #0]
 8109204:	210c      	movs	r1, #12
 8109206:	4618      	mov	r0, r3
 8109208:	f000 fdcf 	bl	8109daa <SDMMC_GetResponse>
 810920c:	4602      	mov	r2, r0
 810920e:	687b      	ldr	r3, [r7, #4]
 8109210:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8109212:	687b      	ldr	r3, [r7, #4]
 8109214:	681b      	ldr	r3, [r3, #0]
 8109216:	2104      	movs	r1, #4
 8109218:	4618      	mov	r0, r3
 810921a:	f000 fdc6 	bl	8109daa <SDMMC_GetResponse>
 810921e:	4603      	mov	r3, r0
 8109220:	0d1a      	lsrs	r2, r3, #20
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8109226:	f107 0310 	add.w	r3, r7, #16
 810922a:	4619      	mov	r1, r3
 810922c:	6878      	ldr	r0, [r7, #4]
 810922e:	f7ff fba9 	bl	8108984 <HAL_SD_GetCardCSD>
 8109232:	4603      	mov	r3, r0
 8109234:	2b00      	cmp	r3, #0
 8109236:	d002      	beq.n	810923e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109238:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810923c:	e00f      	b.n	810925e <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810923e:	687b      	ldr	r3, [r7, #4]
 8109240:	681a      	ldr	r2, [r3, #0]
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109246:	041b      	lsls	r3, r3, #16
 8109248:	4619      	mov	r1, r3
 810924a:	4610      	mov	r0, r2
 810924c:	f000 fed8 	bl	810a000 <SDMMC_CmdSelDesel>
 8109250:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 8109252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109254:	2b00      	cmp	r3, #0
 8109256:	d001      	beq.n	810925c <SD_InitCard+0x16c>
  {
    return errorstate;
 8109258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810925a:	e000      	b.n	810925e <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810925c:	2300      	movs	r3, #0
}
 810925e:	4618      	mov	r0, r3
 8109260:	3740      	adds	r7, #64	; 0x40
 8109262:	46bd      	mov	sp, r7
 8109264:	bd80      	pop	{r7, pc}
	...

08109268 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8109268:	b580      	push	{r7, lr}
 810926a:	b086      	sub	sp, #24
 810926c:	af00      	add	r7, sp, #0
 810926e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109270:	2300      	movs	r3, #0
 8109272:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8109274:	2300      	movs	r3, #0
 8109276:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8109278:	2300      	movs	r3, #0
 810927a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810927c:	687b      	ldr	r3, [r7, #4]
 810927e:	681b      	ldr	r3, [r3, #0]
 8109280:	4618      	mov	r0, r3
 8109282:	f000 fee0 	bl	810a046 <SDMMC_CmdGoIdleState>
 8109286:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109288:	68fb      	ldr	r3, [r7, #12]
 810928a:	2b00      	cmp	r3, #0
 810928c:	d001      	beq.n	8109292 <SD_PowerON+0x2a>
  {
    return errorstate;
 810928e:	68fb      	ldr	r3, [r7, #12]
 8109290:	e06e      	b.n	8109370 <SD_PowerON+0x108>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8109292:	687b      	ldr	r3, [r7, #4]
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	4618      	mov	r0, r3
 8109298:	f000 fef3 	bl	810a082 <SDMMC_CmdOperCond>
 810929c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810929e:	68fb      	ldr	r3, [r7, #12]
 81092a0:	2b00      	cmp	r3, #0
 81092a2:	d00d      	beq.n	81092c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 81092a4:	687b      	ldr	r3, [r7, #4]
 81092a6:	2200      	movs	r2, #0
 81092a8:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 81092aa:	687b      	ldr	r3, [r7, #4]
 81092ac:	681b      	ldr	r3, [r3, #0]
 81092ae:	4618      	mov	r0, r3
 81092b0:	f000 fec9 	bl	810a046 <SDMMC_CmdGoIdleState>
 81092b4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81092b6:	68fb      	ldr	r3, [r7, #12]
 81092b8:	2b00      	cmp	r3, #0
 81092ba:	d004      	beq.n	81092c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 81092bc:	68fb      	ldr	r3, [r7, #12]
 81092be:	e057      	b.n	8109370 <SD_PowerON+0x108>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 81092c0:	687b      	ldr	r3, [r7, #4]
 81092c2:	2201      	movs	r2, #1
 81092c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 81092c6:	687b      	ldr	r3, [r7, #4]
 81092c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81092ca:	2b01      	cmp	r3, #1
 81092cc:	d137      	bne.n	810933e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 81092ce:	687b      	ldr	r3, [r7, #4]
 81092d0:	681b      	ldr	r3, [r3, #0]
 81092d2:	2100      	movs	r1, #0
 81092d4:	4618      	mov	r0, r3
 81092d6:	f000 fef4 	bl	810a0c2 <SDMMC_CmdAppCommand>
 81092da:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81092dc:	68fb      	ldr	r3, [r7, #12]
 81092de:	2b00      	cmp	r3, #0
 81092e0:	d02d      	beq.n	810933e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81092e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81092e6:	e043      	b.n	8109370 <SD_PowerON+0x108>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 81092e8:	687b      	ldr	r3, [r7, #4]
 81092ea:	681b      	ldr	r3, [r3, #0]
 81092ec:	2100      	movs	r1, #0
 81092ee:	4618      	mov	r0, r3
 81092f0:	f000 fee7 	bl	810a0c2 <SDMMC_CmdAppCommand>
 81092f4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 81092f6:	68fb      	ldr	r3, [r7, #12]
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	d001      	beq.n	8109300 <SD_PowerON+0x98>
    {
      return errorstate;
 81092fc:	68fb      	ldr	r3, [r7, #12]
 81092fe:	e037      	b.n	8109370 <SD_PowerON+0x108>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8109300:	687b      	ldr	r3, [r7, #4]
 8109302:	681b      	ldr	r3, [r3, #0]
 8109304:	491c      	ldr	r1, [pc, #112]	; (8109378 <SD_PowerON+0x110>)
 8109306:	4618      	mov	r0, r3
 8109308:	f000 fefe 	bl	810a108 <SDMMC_CmdAppOperCommand>
 810930c:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810930e:	68fb      	ldr	r3, [r7, #12]
 8109310:	2b00      	cmp	r3, #0
 8109312:	d002      	beq.n	810931a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109314:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8109318:	e02a      	b.n	8109370 <SD_PowerON+0x108>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810931a:	687b      	ldr	r3, [r7, #4]
 810931c:	681b      	ldr	r3, [r3, #0]
 810931e:	2100      	movs	r1, #0
 8109320:	4618      	mov	r0, r3
 8109322:	f000 fd42 	bl	8109daa <SDMMC_GetResponse>
 8109326:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8109328:	697b      	ldr	r3, [r7, #20]
 810932a:	0fdb      	lsrs	r3, r3, #31
 810932c:	2b01      	cmp	r3, #1
 810932e:	d101      	bne.n	8109334 <SD_PowerON+0xcc>
 8109330:	2301      	movs	r3, #1
 8109332:	e000      	b.n	8109336 <SD_PowerON+0xce>
 8109334:	2300      	movs	r3, #0
 8109336:	613b      	str	r3, [r7, #16]

    count++;
 8109338:	68bb      	ldr	r3, [r7, #8]
 810933a:	3301      	adds	r3, #1
 810933c:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810933e:	68bb      	ldr	r3, [r7, #8]
 8109340:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8109344:	4293      	cmp	r3, r2
 8109346:	d802      	bhi.n	810934e <SD_PowerON+0xe6>
 8109348:	693b      	ldr	r3, [r7, #16]
 810934a:	2b00      	cmp	r3, #0
 810934c:	d0cc      	beq.n	81092e8 <SD_PowerON+0x80>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810934e:	68bb      	ldr	r3, [r7, #8]
 8109350:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8109354:	4293      	cmp	r3, r2
 8109356:	d902      	bls.n	810935e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8109358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810935c:	e008      	b.n	8109370 <SD_PowerON+0x108>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 810935e:	697b      	ldr	r3, [r7, #20]
 8109360:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8109364:	2b00      	cmp	r3, #0
 8109366:	d002      	beq.n	810936e <SD_PowerON+0x106>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	2201      	movs	r2, #1
 810936c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810936e:	2300      	movs	r3, #0
}
 8109370:	4618      	mov	r0, r3
 8109372:	3718      	adds	r7, #24
 8109374:	46bd      	mov	sp, r7
 8109376:	bd80      	pop	{r7, pc}
 8109378:	c1100000 	.word	0xc1100000

0810937c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810937c:	b580      	push	{r7, lr}
 810937e:	b08c      	sub	sp, #48	; 0x30
 8109380:	af00      	add	r7, sp, #0
 8109382:	6078      	str	r0, [r7, #4]
 8109384:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109386:	f7f8 f837 	bl	81013f8 <HAL_GetTick>
 810938a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810938c:	683b      	ldr	r3, [r7, #0]
 810938e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109390:	687b      	ldr	r3, [r7, #4]
 8109392:	681b      	ldr	r3, [r3, #0]
 8109394:	2100      	movs	r1, #0
 8109396:	4618      	mov	r0, r3
 8109398:	f000 fd07 	bl	8109daa <SDMMC_GetResponse>
 810939c:	4603      	mov	r3, r0
 810939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81093a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81093a6:	d102      	bne.n	81093ae <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 81093a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81093ac:	e0b0      	b.n	8109510 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 81093ae:	687b      	ldr	r3, [r7, #4]
 81093b0:	681b      	ldr	r3, [r3, #0]
 81093b2:	2140      	movs	r1, #64	; 0x40
 81093b4:	4618      	mov	r0, r3
 81093b6:	f000 fd37 	bl	8109e28 <SDMMC_CmdBlockLength>
 81093ba:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81093bc:	6a3b      	ldr	r3, [r7, #32]
 81093be:	2b00      	cmp	r3, #0
 81093c0:	d005      	beq.n	81093ce <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81093c2:	687b      	ldr	r3, [r7, #4]
 81093c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 81093ca:	6a3b      	ldr	r3, [r7, #32]
 81093cc:	e0a0      	b.n	8109510 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	681a      	ldr	r2, [r3, #0]
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81093d6:	041b      	lsls	r3, r3, #16
 81093d8:	4619      	mov	r1, r3
 81093da:	4610      	mov	r0, r2
 81093dc:	f000 fe71 	bl	810a0c2 <SDMMC_CmdAppCommand>
 81093e0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81093e2:	6a3b      	ldr	r3, [r7, #32]
 81093e4:	2b00      	cmp	r3, #0
 81093e6:	d005      	beq.n	81093f4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 81093e8:	687b      	ldr	r3, [r7, #4]
 81093ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81093ec:	687b      	ldr	r3, [r7, #4]
 81093ee:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 81093f0:	6a3b      	ldr	r3, [r7, #32]
 81093f2:	e08d      	b.n	8109510 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81093f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81093f8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 81093fa:	2340      	movs	r3, #64	; 0x40
 81093fc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 81093fe:	2360      	movs	r3, #96	; 0x60
 8109400:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109402:	2302      	movs	r3, #2
 8109404:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109406:	2300      	movs	r3, #0
 8109408:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810940a:	2301      	movs	r3, #1
 810940c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810940e:	687b      	ldr	r3, [r7, #4]
 8109410:	681b      	ldr	r3, [r3, #0]
 8109412:	f107 0208 	add.w	r2, r7, #8
 8109416:	4611      	mov	r1, r2
 8109418:	4618      	mov	r0, r3
 810941a:	f000 fcd9 	bl	8109dd0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810941e:	687b      	ldr	r3, [r7, #4]
 8109420:	681b      	ldr	r3, [r3, #0]
 8109422:	4618      	mov	r0, r3
 8109424:	f000 ff59 	bl	810a2da <SDMMC_CmdStatusRegister>
 8109428:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810942a:	6a3b      	ldr	r3, [r7, #32]
 810942c:	2b00      	cmp	r3, #0
 810942e:	d02b      	beq.n	8109488 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109430:	687b      	ldr	r3, [r7, #4]
 8109432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109434:	687b      	ldr	r3, [r7, #4]
 8109436:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8109438:	6a3b      	ldr	r3, [r7, #32]
 810943a:	e069      	b.n	8109510 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	681b      	ldr	r3, [r3, #0]
 8109440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8109446:	2b00      	cmp	r3, #0
 8109448:	d013      	beq.n	8109472 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810944a:	2300      	movs	r3, #0
 810944c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810944e:	e00d      	b.n	810946c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109450:	687b      	ldr	r3, [r7, #4]
 8109452:	681b      	ldr	r3, [r3, #0]
 8109454:	4618      	mov	r0, r3
 8109456:	f000 fc33 	bl	8109cc0 <SDMMC_ReadFIFO>
 810945a:	4602      	mov	r2, r0
 810945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810945e:	601a      	str	r2, [r3, #0]
        pData++;
 8109460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109462:	3304      	adds	r3, #4
 8109464:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8109466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109468:	3301      	adds	r3, #1
 810946a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810946e:	2b07      	cmp	r3, #7
 8109470:	d9ee      	bls.n	8109450 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109472:	f7f7 ffc1 	bl	81013f8 <HAL_GetTick>
 8109476:	4602      	mov	r2, r0
 8109478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810947a:	1ad3      	subs	r3, r2, r3
 810947c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109480:	d102      	bne.n	8109488 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109486:	e043      	b.n	8109510 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8109488:	687b      	ldr	r3, [r7, #4]
 810948a:	681b      	ldr	r3, [r3, #0]
 810948c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810948e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8109492:	2b00      	cmp	r3, #0
 8109494:	d0d2      	beq.n	810943c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109496:	687b      	ldr	r3, [r7, #4]
 8109498:	681b      	ldr	r3, [r3, #0]
 810949a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810949c:	f003 0308 	and.w	r3, r3, #8
 81094a0:	2b00      	cmp	r3, #0
 81094a2:	d001      	beq.n	81094a8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 81094a4:	2308      	movs	r3, #8
 81094a6:	e033      	b.n	8109510 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81094a8:	687b      	ldr	r3, [r7, #4]
 81094aa:	681b      	ldr	r3, [r3, #0]
 81094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81094ae:	f003 0302 	and.w	r3, r3, #2
 81094b2:	2b00      	cmp	r3, #0
 81094b4:	d001      	beq.n	81094ba <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81094b6:	2302      	movs	r3, #2
 81094b8:	e02a      	b.n	8109510 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81094ba:	687b      	ldr	r3, [r7, #4]
 81094bc:	681b      	ldr	r3, [r3, #0]
 81094be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81094c0:	f003 0320 	and.w	r3, r3, #32
 81094c4:	2b00      	cmp	r3, #0
 81094c6:	d017      	beq.n	81094f8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 81094c8:	2320      	movs	r3, #32
 81094ca:	e021      	b.n	8109510 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	681b      	ldr	r3, [r3, #0]
 81094d0:	4618      	mov	r0, r3
 81094d2:	f000 fbf5 	bl	8109cc0 <SDMMC_ReadFIFO>
 81094d6:	4602      	mov	r2, r0
 81094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81094da:	601a      	str	r2, [r3, #0]
    pData++;
 81094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81094de:	3304      	adds	r3, #4
 81094e0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 81094e2:	f7f7 ff89 	bl	81013f8 <HAL_GetTick>
 81094e6:	4602      	mov	r2, r0
 81094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094ea:	1ad3      	subs	r3, r2, r3
 81094ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81094f0:	d102      	bne.n	81094f8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 81094f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 81094f6:	e00b      	b.n	8109510 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 81094f8:	687b      	ldr	r3, [r7, #4]
 81094fa:	681b      	ldr	r3, [r3, #0]
 81094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81094fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8109502:	2b00      	cmp	r3, #0
 8109504:	d1e2      	bne.n	81094cc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8109506:	687b      	ldr	r3, [r7, #4]
 8109508:	681b      	ldr	r3, [r3, #0]
 810950a:	4a03      	ldr	r2, [pc, #12]	; (8109518 <SD_SendSDStatus+0x19c>)
 810950c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 810950e:	2300      	movs	r3, #0
}
 8109510:	4618      	mov	r0, r3
 8109512:	3730      	adds	r7, #48	; 0x30
 8109514:	46bd      	mov	sp, r7
 8109516:	bd80      	pop	{r7, pc}
 8109518:	18000f3a 	.word	0x18000f3a

0810951c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810951c:	b580      	push	{r7, lr}
 810951e:	b084      	sub	sp, #16
 8109520:	af00      	add	r7, sp, #0
 8109522:	6078      	str	r0, [r7, #4]
 8109524:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8109526:	683b      	ldr	r3, [r7, #0]
 8109528:	2b00      	cmp	r3, #0
 810952a:	d102      	bne.n	8109532 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810952c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8109530:	e018      	b.n	8109564 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109532:	687b      	ldr	r3, [r7, #4]
 8109534:	681a      	ldr	r2, [r3, #0]
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810953a:	041b      	lsls	r3, r3, #16
 810953c:	4619      	mov	r1, r3
 810953e:	4610      	mov	r0, r2
 8109540:	f000 fea8 	bl	810a294 <SDMMC_CmdSendStatus>
 8109544:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109546:	68fb      	ldr	r3, [r7, #12]
 8109548:	2b00      	cmp	r3, #0
 810954a:	d001      	beq.n	8109550 <SD_SendStatus+0x34>
  {
    return errorstate;
 810954c:	68fb      	ldr	r3, [r7, #12]
 810954e:	e009      	b.n	8109564 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	681b      	ldr	r3, [r3, #0]
 8109554:	2100      	movs	r1, #0
 8109556:	4618      	mov	r0, r3
 8109558:	f000 fc27 	bl	8109daa <SDMMC_GetResponse>
 810955c:	4602      	mov	r2, r0
 810955e:	683b      	ldr	r3, [r7, #0]
 8109560:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8109562:	2300      	movs	r3, #0
}
 8109564:	4618      	mov	r0, r3
 8109566:	3710      	adds	r7, #16
 8109568:	46bd      	mov	sp, r7
 810956a:	bd80      	pop	{r7, pc}

0810956c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810956c:	b580      	push	{r7, lr}
 810956e:	b086      	sub	sp, #24
 8109570:	af00      	add	r7, sp, #0
 8109572:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109574:	2300      	movs	r3, #0
 8109576:	60fb      	str	r3, [r7, #12]
 8109578:	2300      	movs	r3, #0
 810957a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	2100      	movs	r1, #0
 8109582:	4618      	mov	r0, r3
 8109584:	f000 fc11 	bl	8109daa <SDMMC_GetResponse>
 8109588:	4603      	mov	r3, r0
 810958a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810958e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109592:	d102      	bne.n	810959a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109594:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109598:	e02f      	b.n	81095fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810959a:	f107 030c 	add.w	r3, r7, #12
 810959e:	4619      	mov	r1, r3
 81095a0:	6878      	ldr	r0, [r7, #4]
 81095a2:	f000 f879 	bl	8109698 <SD_FindSCR>
 81095a6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 81095a8:	697b      	ldr	r3, [r7, #20]
 81095aa:	2b00      	cmp	r3, #0
 81095ac:	d001      	beq.n	81095b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 81095ae:	697b      	ldr	r3, [r7, #20]
 81095b0:	e023      	b.n	81095fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 81095b2:	693b      	ldr	r3, [r7, #16]
 81095b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81095b8:	2b00      	cmp	r3, #0
 81095ba:	d01c      	beq.n	81095f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 81095bc:	687b      	ldr	r3, [r7, #4]
 81095be:	681a      	ldr	r2, [r3, #0]
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81095c4:	041b      	lsls	r3, r3, #16
 81095c6:	4619      	mov	r1, r3
 81095c8:	4610      	mov	r0, r2
 81095ca:	f000 fd7a 	bl	810a0c2 <SDMMC_CmdAppCommand>
 81095ce:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81095d0:	697b      	ldr	r3, [r7, #20]
 81095d2:	2b00      	cmp	r3, #0
 81095d4:	d001      	beq.n	81095da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 81095d6:	697b      	ldr	r3, [r7, #20]
 81095d8:	e00f      	b.n	81095fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 81095da:	687b      	ldr	r3, [r7, #4]
 81095dc:	681b      	ldr	r3, [r3, #0]
 81095de:	2102      	movs	r1, #2
 81095e0:	4618      	mov	r0, r3
 81095e2:	f000 fdb1 	bl	810a148 <SDMMC_CmdBusWidth>
 81095e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 81095e8:	697b      	ldr	r3, [r7, #20]
 81095ea:	2b00      	cmp	r3, #0
 81095ec:	d001      	beq.n	81095f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 81095ee:	697b      	ldr	r3, [r7, #20]
 81095f0:	e003      	b.n	81095fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 81095f2:	2300      	movs	r3, #0
 81095f4:	e001      	b.n	81095fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 81095f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 81095fa:	4618      	mov	r0, r3
 81095fc:	3718      	adds	r7, #24
 81095fe:	46bd      	mov	sp, r7
 8109600:	bd80      	pop	{r7, pc}

08109602 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8109602:	b580      	push	{r7, lr}
 8109604:	b086      	sub	sp, #24
 8109606:	af00      	add	r7, sp, #0
 8109608:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810960a:	2300      	movs	r3, #0
 810960c:	60fb      	str	r3, [r7, #12]
 810960e:	2300      	movs	r3, #0
 8109610:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	681b      	ldr	r3, [r3, #0]
 8109616:	2100      	movs	r1, #0
 8109618:	4618      	mov	r0, r3
 810961a:	f000 fbc6 	bl	8109daa <SDMMC_GetResponse>
 810961e:	4603      	mov	r3, r0
 8109620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109628:	d102      	bne.n	8109630 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810962a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810962e:	e02f      	b.n	8109690 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109630:	f107 030c 	add.w	r3, r7, #12
 8109634:	4619      	mov	r1, r3
 8109636:	6878      	ldr	r0, [r7, #4]
 8109638:	f000 f82e 	bl	8109698 <SD_FindSCR>
 810963c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810963e:	697b      	ldr	r3, [r7, #20]
 8109640:	2b00      	cmp	r3, #0
 8109642:	d001      	beq.n	8109648 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109644:	697b      	ldr	r3, [r7, #20]
 8109646:	e023      	b.n	8109690 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109648:	693b      	ldr	r3, [r7, #16]
 810964a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810964e:	2b00      	cmp	r3, #0
 8109650:	d01c      	beq.n	810968c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109652:	687b      	ldr	r3, [r7, #4]
 8109654:	681a      	ldr	r2, [r3, #0]
 8109656:	687b      	ldr	r3, [r7, #4]
 8109658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810965a:	041b      	lsls	r3, r3, #16
 810965c:	4619      	mov	r1, r3
 810965e:	4610      	mov	r0, r2
 8109660:	f000 fd2f 	bl	810a0c2 <SDMMC_CmdAppCommand>
 8109664:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109666:	697b      	ldr	r3, [r7, #20]
 8109668:	2b00      	cmp	r3, #0
 810966a:	d001      	beq.n	8109670 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810966c:	697b      	ldr	r3, [r7, #20]
 810966e:	e00f      	b.n	8109690 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	681b      	ldr	r3, [r3, #0]
 8109674:	2100      	movs	r1, #0
 8109676:	4618      	mov	r0, r3
 8109678:	f000 fd66 	bl	810a148 <SDMMC_CmdBusWidth>
 810967c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810967e:	697b      	ldr	r3, [r7, #20]
 8109680:	2b00      	cmp	r3, #0
 8109682:	d001      	beq.n	8109688 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8109684:	697b      	ldr	r3, [r7, #20]
 8109686:	e003      	b.n	8109690 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109688:	2300      	movs	r3, #0
 810968a:	e001      	b.n	8109690 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810968c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8109690:	4618      	mov	r0, r3
 8109692:	3718      	adds	r7, #24
 8109694:	46bd      	mov	sp, r7
 8109696:	bd80      	pop	{r7, pc}

08109698 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8109698:	b580      	push	{r7, lr}
 810969a:	b08e      	sub	sp, #56	; 0x38
 810969c:	af00      	add	r7, sp, #0
 810969e:	6078      	str	r0, [r7, #4]
 81096a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 81096a2:	f7f7 fea9 	bl	81013f8 <HAL_GetTick>
 81096a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 81096a8:	2300      	movs	r3, #0
 81096aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 81096ac:	2300      	movs	r3, #0
 81096ae:	60bb      	str	r3, [r7, #8]
 81096b0:	2300      	movs	r3, #0
 81096b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 81096b4:	683b      	ldr	r3, [r7, #0]
 81096b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 81096b8:	687b      	ldr	r3, [r7, #4]
 81096ba:	681b      	ldr	r3, [r3, #0]
 81096bc:	2108      	movs	r1, #8
 81096be:	4618      	mov	r0, r3
 81096c0:	f000 fbb2 	bl	8109e28 <SDMMC_CmdBlockLength>
 81096c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81096c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096c8:	2b00      	cmp	r3, #0
 81096ca:	d001      	beq.n	81096d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 81096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096ce:	e0ad      	b.n	810982c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	681a      	ldr	r2, [r3, #0]
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81096d8:	041b      	lsls	r3, r3, #16
 81096da:	4619      	mov	r1, r3
 81096dc:	4610      	mov	r0, r2
 81096de:	f000 fcf0 	bl	810a0c2 <SDMMC_CmdAppCommand>
 81096e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 81096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096e6:	2b00      	cmp	r3, #0
 81096e8:	d001      	beq.n	81096ee <SD_FindSCR+0x56>
  {
    return errorstate;
 81096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81096ec:	e09e      	b.n	810982c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 81096ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81096f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 81096f4:	2308      	movs	r3, #8
 81096f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 81096f8:	2330      	movs	r3, #48	; 0x30
 81096fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 81096fc:	2302      	movs	r3, #2
 81096fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109700:	2300      	movs	r3, #0
 8109702:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109704:	2301      	movs	r3, #1
 8109706:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109708:	687b      	ldr	r3, [r7, #4]
 810970a:	681b      	ldr	r3, [r3, #0]
 810970c:	f107 0210 	add.w	r2, r7, #16
 8109710:	4611      	mov	r1, r2
 8109712:	4618      	mov	r0, r3
 8109714:	f000 fb5c 	bl	8109dd0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8109718:	687b      	ldr	r3, [r7, #4]
 810971a:	681b      	ldr	r3, [r3, #0]
 810971c:	4618      	mov	r0, r3
 810971e:	f000 fd36 	bl	810a18e <SDMMC_CmdSendSCR>
 8109722:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109726:	2b00      	cmp	r3, #0
 8109728:	d027      	beq.n	810977a <SD_FindSCR+0xe2>
  {
    return errorstate;
 810972a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810972c:	e07e      	b.n	810982c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	681b      	ldr	r3, [r3, #0]
 8109732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8109738:	2b00      	cmp	r3, #0
 810973a:	d113      	bne.n	8109764 <SD_FindSCR+0xcc>
 810973c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810973e:	2b00      	cmp	r3, #0
 8109740:	d110      	bne.n	8109764 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	681b      	ldr	r3, [r3, #0]
 8109746:	4618      	mov	r0, r3
 8109748:	f000 faba 	bl	8109cc0 <SDMMC_ReadFIFO>
 810974c:	4603      	mov	r3, r0
 810974e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8109750:	687b      	ldr	r3, [r7, #4]
 8109752:	681b      	ldr	r3, [r3, #0]
 8109754:	4618      	mov	r0, r3
 8109756:	f000 fab3 	bl	8109cc0 <SDMMC_ReadFIFO>
 810975a:	4603      	mov	r3, r0
 810975c:	60fb      	str	r3, [r7, #12]
      index++;
 810975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109760:	3301      	adds	r3, #1
 8109762:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8109764:	f7f7 fe48 	bl	81013f8 <HAL_GetTick>
 8109768:	4602      	mov	r2, r0
 810976a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810976c:	1ad3      	subs	r3, r2, r3
 810976e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109772:	d102      	bne.n	810977a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8109778:	e058      	b.n	810982c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8109780:	f240 532a 	movw	r3, #1322	; 0x52a
 8109784:	4013      	ands	r3, r2
 8109786:	2b00      	cmp	r3, #0
 8109788:	d0d1      	beq.n	810972e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810978a:	687b      	ldr	r3, [r7, #4]
 810978c:	681b      	ldr	r3, [r3, #0]
 810978e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109790:	f003 0308 	and.w	r3, r3, #8
 8109794:	2b00      	cmp	r3, #0
 8109796:	d005      	beq.n	81097a4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8109798:	687b      	ldr	r3, [r7, #4]
 810979a:	681b      	ldr	r3, [r3, #0]
 810979c:	2208      	movs	r2, #8
 810979e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 81097a0:	2308      	movs	r3, #8
 81097a2:	e043      	b.n	810982c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 81097a4:	687b      	ldr	r3, [r7, #4]
 81097a6:	681b      	ldr	r3, [r3, #0]
 81097a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81097aa:	f003 0302 	and.w	r3, r3, #2
 81097ae:	2b00      	cmp	r3, #0
 81097b0:	d005      	beq.n	81097be <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 81097b2:	687b      	ldr	r3, [r7, #4]
 81097b4:	681b      	ldr	r3, [r3, #0]
 81097b6:	2202      	movs	r2, #2
 81097b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 81097ba:	2302      	movs	r3, #2
 81097bc:	e036      	b.n	810982c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 81097be:	687b      	ldr	r3, [r7, #4]
 81097c0:	681b      	ldr	r3, [r3, #0]
 81097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81097c4:	f003 0320 	and.w	r3, r3, #32
 81097c8:	2b00      	cmp	r3, #0
 81097ca:	d005      	beq.n	81097d8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 81097cc:	687b      	ldr	r3, [r7, #4]
 81097ce:	681b      	ldr	r3, [r3, #0]
 81097d0:	2220      	movs	r2, #32
 81097d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 81097d4:	2320      	movs	r3, #32
 81097d6:	e029      	b.n	810982c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	681b      	ldr	r3, [r3, #0]
 81097dc:	4a15      	ldr	r2, [pc, #84]	; (8109834 <SD_FindSCR+0x19c>)
 81097de:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81097e0:	68fb      	ldr	r3, [r7, #12]
 81097e2:	061a      	lsls	r2, r3, #24
 81097e4:	68fb      	ldr	r3, [r7, #12]
 81097e6:	021b      	lsls	r3, r3, #8
 81097e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81097ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	0a1b      	lsrs	r3, r3, #8
 81097f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81097f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 81097f8:	68fb      	ldr	r3, [r7, #12]
 81097fa:	0e1b      	lsrs	r3, r3, #24
 81097fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 81097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109800:	601a      	str	r2, [r3, #0]
    scr++;
 8109802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109804:	3304      	adds	r3, #4
 8109806:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8109808:	68bb      	ldr	r3, [r7, #8]
 810980a:	061a      	lsls	r2, r3, #24
 810980c:	68bb      	ldr	r3, [r7, #8]
 810980e:	021b      	lsls	r3, r3, #8
 8109810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8109814:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8109816:	68bb      	ldr	r3, [r7, #8]
 8109818:	0a1b      	lsrs	r3, r3, #8
 810981a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810981e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8109820:	68bb      	ldr	r3, [r7, #8]
 8109822:	0e1b      	lsrs	r3, r3, #24
 8109824:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8109826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109828:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810982a:	2300      	movs	r3, #0
}
 810982c:	4618      	mov	r0, r3
 810982e:	3738      	adds	r7, #56	; 0x38
 8109830:	46bd      	mov	sp, r7
 8109832:	bd80      	pop	{r7, pc}
 8109834:	18000f3a 	.word	0x18000f3a

08109838 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8109838:	b580      	push	{r7, lr}
 810983a:	b082      	sub	sp, #8
 810983c:	af00      	add	r7, sp, #0
 810983e:	6078      	str	r0, [r7, #4]
 8109840:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	2b00      	cmp	r3, #0
 8109846:	d101      	bne.n	810984c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8109848:	2301      	movs	r3, #1
 810984a:	e02b      	b.n	81098a4 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810984c:	687b      	ldr	r3, [r7, #4]
 810984e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8109852:	b2db      	uxtb	r3, r3
 8109854:	2b00      	cmp	r3, #0
 8109856:	d106      	bne.n	8109866 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8109858:	687b      	ldr	r3, [r7, #4]
 810985a:	2200      	movs	r2, #0
 810985c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8109860:	6878      	ldr	r0, [r7, #4]
 8109862:	f7f7 fc83 	bl	810116c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8109866:	687b      	ldr	r3, [r7, #4]
 8109868:	2202      	movs	r2, #2
 810986a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	681a      	ldr	r2, [r3, #0]
 8109872:	687b      	ldr	r3, [r7, #4]
 8109874:	3304      	adds	r3, #4
 8109876:	4619      	mov	r1, r3
 8109878:	4610      	mov	r0, r2
 810987a:	f000 f931 	bl	8109ae0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810987e:	687b      	ldr	r3, [r7, #4]
 8109880:	6818      	ldr	r0, [r3, #0]
 8109882:	687b      	ldr	r3, [r7, #4]
 8109884:	685b      	ldr	r3, [r3, #4]
 8109886:	461a      	mov	r2, r3
 8109888:	6839      	ldr	r1, [r7, #0]
 810988a:	f000 f986 	bl	8109b9a <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810988e:	4b07      	ldr	r3, [pc, #28]	; (81098ac <HAL_SDRAM_Init+0x74>)
 8109890:	681b      	ldr	r3, [r3, #0]
 8109892:	4a06      	ldr	r2, [pc, #24]	; (81098ac <HAL_SDRAM_Init+0x74>)
 8109894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8109898:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 810989a:	687b      	ldr	r3, [r7, #4]
 810989c:	2201      	movs	r2, #1
 810989e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 81098a2:	2300      	movs	r3, #0
}
 81098a4:	4618      	mov	r0, r3
 81098a6:	3708      	adds	r7, #8
 81098a8:	46bd      	mov	sp, r7
 81098aa:	bd80      	pop	{r7, pc}
 81098ac:	52004000 	.word	0x52004000

081098b0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 81098b0:	b480      	push	{r7}
 81098b2:	b087      	sub	sp, #28
 81098b4:	af00      	add	r7, sp, #0
 81098b6:	6078      	str	r0, [r7, #4]
 81098b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 81098ba:	683b      	ldr	r3, [r7, #0]
 81098bc:	681a      	ldr	r2, [r3, #0]
 81098be:	687b      	ldr	r3, [r7, #4]
 81098c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81098c4:	683a      	ldr	r2, [r7, #0]
 81098c6:	6812      	ldr	r2, [r2, #0]
 81098c8:	f023 0101 	bic.w	r1, r3, #1
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 81098d2:	683b      	ldr	r3, [r7, #0]
 81098d4:	689b      	ldr	r3, [r3, #8]
 81098d6:	2b08      	cmp	r3, #8
 81098d8:	d102      	bne.n	81098e0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 81098da:	2340      	movs	r3, #64	; 0x40
 81098dc:	617b      	str	r3, [r7, #20]
 81098de:	e001      	b.n	81098e4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 81098e0:	2300      	movs	r3, #0
 81098e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 81098e4:	683b      	ldr	r3, [r7, #0]
 81098e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 81098e8:	697b      	ldr	r3, [r7, #20]
 81098ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 81098ec:	683b      	ldr	r3, [r7, #0]
 81098ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 81098f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 81098f2:	683b      	ldr	r3, [r7, #0]
 81098f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 81098f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 81098f8:	683b      	ldr	r3, [r7, #0]
 81098fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 81098fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 81098fe:	683b      	ldr	r3, [r7, #0]
 8109900:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8109902:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8109904:	683b      	ldr	r3, [r7, #0]
 8109906:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8109908:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 810990a:	683b      	ldr	r3, [r7, #0]
 810990c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 810990e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8109910:	683b      	ldr	r3, [r7, #0]
 8109912:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8109914:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8109916:	683b      	ldr	r3, [r7, #0]
 8109918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 810991a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 810991c:	683b      	ldr	r3, [r7, #0]
 810991e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8109920:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8109922:	683b      	ldr	r3, [r7, #0]
 8109924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8109926:	4313      	orrs	r3, r2
 8109928:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 810992a:	683b      	ldr	r3, [r7, #0]
 810992c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810992e:	693a      	ldr	r2, [r7, #16]
 8109930:	4313      	orrs	r3, r2
 8109932:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8109934:	683b      	ldr	r3, [r7, #0]
 8109936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109938:	693a      	ldr	r2, [r7, #16]
 810993a:	4313      	orrs	r3, r2
 810993c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 810993e:	683b      	ldr	r3, [r7, #0]
 8109940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109942:	693a      	ldr	r2, [r7, #16]
 8109944:	4313      	orrs	r3, r2
 8109946:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8109948:	4b20      	ldr	r3, [pc, #128]	; (81099cc <FMC_NORSRAM_Init+0x11c>)
 810994a:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 810994c:	68fb      	ldr	r3, [r7, #12]
 810994e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8109952:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8109954:	68fb      	ldr	r3, [r7, #12]
 8109956:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810995a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 810995c:	68fb      	ldr	r3, [r7, #12]
 810995e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8109962:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8109964:	683b      	ldr	r3, [r7, #0]
 8109966:	681a      	ldr	r2, [r3, #0]
 8109968:	687b      	ldr	r3, [r7, #4]
 810996a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 810996e:	68fb      	ldr	r3, [r7, #12]
 8109970:	43db      	mvns	r3, r3
 8109972:	ea02 0103 	and.w	r1, r2, r3
 8109976:	683b      	ldr	r3, [r7, #0]
 8109978:	681a      	ldr	r2, [r3, #0]
 810997a:	693b      	ldr	r3, [r7, #16]
 810997c:	4319      	orrs	r1, r3
 810997e:	687b      	ldr	r3, [r7, #4]
 8109980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8109984:	683b      	ldr	r3, [r7, #0]
 8109986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810998c:	d10c      	bne.n	81099a8 <FMC_NORSRAM_Init+0xf8>
 810998e:	683b      	ldr	r3, [r7, #0]
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	2b00      	cmp	r3, #0
 8109994:	d008      	beq.n	81099a8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8109996:	687b      	ldr	r3, [r7, #4]
 8109998:	681b      	ldr	r3, [r3, #0]
 810999a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810999e:	683b      	ldr	r3, [r7, #0]
 81099a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81099a2:	431a      	orrs	r2, r3
 81099a4:	687b      	ldr	r3, [r7, #4]
 81099a6:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 81099a8:	683b      	ldr	r3, [r7, #0]
 81099aa:	681b      	ldr	r3, [r3, #0]
 81099ac:	2b00      	cmp	r3, #0
 81099ae:	d006      	beq.n	81099be <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 81099b0:	687b      	ldr	r3, [r7, #4]
 81099b2:	681a      	ldr	r2, [r3, #0]
 81099b4:	683b      	ldr	r3, [r7, #0]
 81099b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81099b8:	431a      	orrs	r2, r3
 81099ba:	687b      	ldr	r3, [r7, #4]
 81099bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 81099be:	2300      	movs	r3, #0
}
 81099c0:	4618      	mov	r0, r3
 81099c2:	371c      	adds	r7, #28
 81099c4:	46bd      	mov	sp, r7
 81099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099ca:	4770      	bx	lr
 81099cc:	0008fb7f 	.word	0x0008fb7f

081099d0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 81099d0:	b480      	push	{r7}
 81099d2:	b087      	sub	sp, #28
 81099d4:	af00      	add	r7, sp, #0
 81099d6:	60f8      	str	r0, [r7, #12]
 81099d8:	60b9      	str	r1, [r7, #8]
 81099da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 81099dc:	687b      	ldr	r3, [r7, #4]
 81099de:	1c5a      	adds	r2, r3, #1
 81099e0:	68fb      	ldr	r3, [r7, #12]
 81099e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81099e6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 81099ea:	68bb      	ldr	r3, [r7, #8]
 81099ec:	681a      	ldr	r2, [r3, #0]
 81099ee:	68bb      	ldr	r3, [r7, #8]
 81099f0:	685b      	ldr	r3, [r3, #4]
 81099f2:	011b      	lsls	r3, r3, #4
 81099f4:	431a      	orrs	r2, r3
 81099f6:	68bb      	ldr	r3, [r7, #8]
 81099f8:	689b      	ldr	r3, [r3, #8]
 81099fa:	021b      	lsls	r3, r3, #8
 81099fc:	431a      	orrs	r2, r3
 81099fe:	68bb      	ldr	r3, [r7, #8]
 8109a00:	68db      	ldr	r3, [r3, #12]
 8109a02:	041b      	lsls	r3, r3, #16
 8109a04:	431a      	orrs	r2, r3
 8109a06:	68bb      	ldr	r3, [r7, #8]
 8109a08:	691b      	ldr	r3, [r3, #16]
 8109a0a:	3b01      	subs	r3, #1
 8109a0c:	051b      	lsls	r3, r3, #20
 8109a0e:	431a      	orrs	r2, r3
 8109a10:	68bb      	ldr	r3, [r7, #8]
 8109a12:	695b      	ldr	r3, [r3, #20]
 8109a14:	3b02      	subs	r3, #2
 8109a16:	061b      	lsls	r3, r3, #24
 8109a18:	431a      	orrs	r2, r3
 8109a1a:	68bb      	ldr	r3, [r7, #8]
 8109a1c:	699b      	ldr	r3, [r3, #24]
 8109a1e:	4313      	orrs	r3, r2
 8109a20:	687a      	ldr	r2, [r7, #4]
 8109a22:	3201      	adds	r2, #1
 8109a24:	4319      	orrs	r1, r3
 8109a26:	68fb      	ldr	r3, [r7, #12]
 8109a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8109a2c:	68fb      	ldr	r3, [r7, #12]
 8109a2e:	681b      	ldr	r3, [r3, #0]
 8109a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8109a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109a38:	d113      	bne.n	8109a62 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8109a3a:	68fb      	ldr	r3, [r7, #12]
 8109a3c:	685b      	ldr	r3, [r3, #4]
 8109a3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8109a42:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8109a44:	68bb      	ldr	r3, [r7, #8]
 8109a46:	691b      	ldr	r3, [r3, #16]
 8109a48:	3b01      	subs	r3, #1
 8109a4a:	051b      	lsls	r3, r3, #20
 8109a4c:	697a      	ldr	r2, [r7, #20]
 8109a4e:	4313      	orrs	r3, r2
 8109a50:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8109a52:	68fb      	ldr	r3, [r7, #12]
 8109a54:	685b      	ldr	r3, [r3, #4]
 8109a56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8109a5a:	697b      	ldr	r3, [r7, #20]
 8109a5c:	431a      	orrs	r2, r3
 8109a5e:	68fb      	ldr	r3, [r7, #12]
 8109a60:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8109a62:	2300      	movs	r3, #0
}
 8109a64:	4618      	mov	r0, r3
 8109a66:	371c      	adds	r7, #28
 8109a68:	46bd      	mov	sp, r7
 8109a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a6e:	4770      	bx	lr

08109a70 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8109a70:	b480      	push	{r7}
 8109a72:	b085      	sub	sp, #20
 8109a74:	af00      	add	r7, sp, #0
 8109a76:	60f8      	str	r0, [r7, #12]
 8109a78:	60b9      	str	r1, [r7, #8]
 8109a7a:	607a      	str	r2, [r7, #4]
 8109a7c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8109a7e:	683b      	ldr	r3, [r7, #0]
 8109a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8109a84:	d11d      	bne.n	8109ac2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8109a86:	68fb      	ldr	r3, [r7, #12]
 8109a88:	687a      	ldr	r2, [r7, #4]
 8109a8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8109a8e:	4b13      	ldr	r3, [pc, #76]	; (8109adc <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8109a90:	4013      	ands	r3, r2
 8109a92:	68ba      	ldr	r2, [r7, #8]
 8109a94:	6811      	ldr	r1, [r2, #0]
 8109a96:	68ba      	ldr	r2, [r7, #8]
 8109a98:	6852      	ldr	r2, [r2, #4]
 8109a9a:	0112      	lsls	r2, r2, #4
 8109a9c:	4311      	orrs	r1, r2
 8109a9e:	68ba      	ldr	r2, [r7, #8]
 8109aa0:	6892      	ldr	r2, [r2, #8]
 8109aa2:	0212      	lsls	r2, r2, #8
 8109aa4:	4311      	orrs	r1, r2
 8109aa6:	68ba      	ldr	r2, [r7, #8]
 8109aa8:	6992      	ldr	r2, [r2, #24]
 8109aaa:	4311      	orrs	r1, r2
 8109aac:	68ba      	ldr	r2, [r7, #8]
 8109aae:	68d2      	ldr	r2, [r2, #12]
 8109ab0:	0412      	lsls	r2, r2, #16
 8109ab2:	430a      	orrs	r2, r1
 8109ab4:	ea43 0102 	orr.w	r1, r3, r2
 8109ab8:	68fb      	ldr	r3, [r7, #12]
 8109aba:	687a      	ldr	r2, [r7, #4]
 8109abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8109ac0:	e005      	b.n	8109ace <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8109ac2:	68fb      	ldr	r3, [r7, #12]
 8109ac4:	687a      	ldr	r2, [r7, #4]
 8109ac6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8109aca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8109ace:	2300      	movs	r3, #0
}
 8109ad0:	4618      	mov	r0, r3
 8109ad2:	3714      	adds	r7, #20
 8109ad4:	46bd      	mov	sp, r7
 8109ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ada:	4770      	bx	lr
 8109adc:	cff00000 	.word	0xcff00000

08109ae0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8109ae0:	b480      	push	{r7}
 8109ae2:	b083      	sub	sp, #12
 8109ae4:	af00      	add	r7, sp, #0
 8109ae6:	6078      	str	r0, [r7, #4]
 8109ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8109aea:	683b      	ldr	r3, [r7, #0]
 8109aec:	681b      	ldr	r3, [r3, #0]
 8109aee:	2b00      	cmp	r3, #0
 8109af0:	d123      	bne.n	8109b3a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	681b      	ldr	r3, [r3, #0]
 8109af6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8109afa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8109afe:	683a      	ldr	r2, [r7, #0]
 8109b00:	6851      	ldr	r1, [r2, #4]
 8109b02:	683a      	ldr	r2, [r7, #0]
 8109b04:	6892      	ldr	r2, [r2, #8]
 8109b06:	4311      	orrs	r1, r2
 8109b08:	683a      	ldr	r2, [r7, #0]
 8109b0a:	68d2      	ldr	r2, [r2, #12]
 8109b0c:	4311      	orrs	r1, r2
 8109b0e:	683a      	ldr	r2, [r7, #0]
 8109b10:	6912      	ldr	r2, [r2, #16]
 8109b12:	4311      	orrs	r1, r2
 8109b14:	683a      	ldr	r2, [r7, #0]
 8109b16:	6952      	ldr	r2, [r2, #20]
 8109b18:	4311      	orrs	r1, r2
 8109b1a:	683a      	ldr	r2, [r7, #0]
 8109b1c:	6992      	ldr	r2, [r2, #24]
 8109b1e:	4311      	orrs	r1, r2
 8109b20:	683a      	ldr	r2, [r7, #0]
 8109b22:	69d2      	ldr	r2, [r2, #28]
 8109b24:	4311      	orrs	r1, r2
 8109b26:	683a      	ldr	r2, [r7, #0]
 8109b28:	6a12      	ldr	r2, [r2, #32]
 8109b2a:	4311      	orrs	r1, r2
 8109b2c:	683a      	ldr	r2, [r7, #0]
 8109b2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8109b30:	430a      	orrs	r2, r1
 8109b32:	431a      	orrs	r2, r3
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	601a      	str	r2, [r3, #0]
 8109b38:	e028      	b.n	8109b8c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8109b42:	683b      	ldr	r3, [r7, #0]
 8109b44:	69d9      	ldr	r1, [r3, #28]
 8109b46:	683b      	ldr	r3, [r7, #0]
 8109b48:	6a1b      	ldr	r3, [r3, #32]
 8109b4a:	4319      	orrs	r1, r3
 8109b4c:	683b      	ldr	r3, [r7, #0]
 8109b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b50:	430b      	orrs	r3, r1
 8109b52:	431a      	orrs	r2, r3
 8109b54:	687b      	ldr	r3, [r7, #4]
 8109b56:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8109b58:	687b      	ldr	r3, [r7, #4]
 8109b5a:	685b      	ldr	r3, [r3, #4]
 8109b5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8109b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8109b64:	683a      	ldr	r2, [r7, #0]
 8109b66:	6851      	ldr	r1, [r2, #4]
 8109b68:	683a      	ldr	r2, [r7, #0]
 8109b6a:	6892      	ldr	r2, [r2, #8]
 8109b6c:	4311      	orrs	r1, r2
 8109b6e:	683a      	ldr	r2, [r7, #0]
 8109b70:	68d2      	ldr	r2, [r2, #12]
 8109b72:	4311      	orrs	r1, r2
 8109b74:	683a      	ldr	r2, [r7, #0]
 8109b76:	6912      	ldr	r2, [r2, #16]
 8109b78:	4311      	orrs	r1, r2
 8109b7a:	683a      	ldr	r2, [r7, #0]
 8109b7c:	6952      	ldr	r2, [r2, #20]
 8109b7e:	4311      	orrs	r1, r2
 8109b80:	683a      	ldr	r2, [r7, #0]
 8109b82:	6992      	ldr	r2, [r2, #24]
 8109b84:	430a      	orrs	r2, r1
 8109b86:	431a      	orrs	r2, r3
 8109b88:	687b      	ldr	r3, [r7, #4]
 8109b8a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8109b8c:	2300      	movs	r3, #0
}
 8109b8e:	4618      	mov	r0, r3
 8109b90:	370c      	adds	r7, #12
 8109b92:	46bd      	mov	sp, r7
 8109b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b98:	4770      	bx	lr

08109b9a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8109b9a:	b480      	push	{r7}
 8109b9c:	b085      	sub	sp, #20
 8109b9e:	af00      	add	r7, sp, #0
 8109ba0:	60f8      	str	r0, [r7, #12]
 8109ba2:	60b9      	str	r1, [r7, #8]
 8109ba4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8109ba6:	687b      	ldr	r3, [r7, #4]
 8109ba8:	2b00      	cmp	r3, #0
 8109baa:	d128      	bne.n	8109bfe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8109bac:	68fb      	ldr	r3, [r7, #12]
 8109bae:	689b      	ldr	r3, [r3, #8]
 8109bb0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8109bb4:	68bb      	ldr	r3, [r7, #8]
 8109bb6:	681b      	ldr	r3, [r3, #0]
 8109bb8:	1e59      	subs	r1, r3, #1
 8109bba:	68bb      	ldr	r3, [r7, #8]
 8109bbc:	685b      	ldr	r3, [r3, #4]
 8109bbe:	3b01      	subs	r3, #1
 8109bc0:	011b      	lsls	r3, r3, #4
 8109bc2:	4319      	orrs	r1, r3
 8109bc4:	68bb      	ldr	r3, [r7, #8]
 8109bc6:	689b      	ldr	r3, [r3, #8]
 8109bc8:	3b01      	subs	r3, #1
 8109bca:	021b      	lsls	r3, r3, #8
 8109bcc:	4319      	orrs	r1, r3
 8109bce:	68bb      	ldr	r3, [r7, #8]
 8109bd0:	68db      	ldr	r3, [r3, #12]
 8109bd2:	3b01      	subs	r3, #1
 8109bd4:	031b      	lsls	r3, r3, #12
 8109bd6:	4319      	orrs	r1, r3
 8109bd8:	68bb      	ldr	r3, [r7, #8]
 8109bda:	691b      	ldr	r3, [r3, #16]
 8109bdc:	3b01      	subs	r3, #1
 8109bde:	041b      	lsls	r3, r3, #16
 8109be0:	4319      	orrs	r1, r3
 8109be2:	68bb      	ldr	r3, [r7, #8]
 8109be4:	695b      	ldr	r3, [r3, #20]
 8109be6:	3b01      	subs	r3, #1
 8109be8:	051b      	lsls	r3, r3, #20
 8109bea:	4319      	orrs	r1, r3
 8109bec:	68bb      	ldr	r3, [r7, #8]
 8109bee:	699b      	ldr	r3, [r3, #24]
 8109bf0:	3b01      	subs	r3, #1
 8109bf2:	061b      	lsls	r3, r3, #24
 8109bf4:	430b      	orrs	r3, r1
 8109bf6:	431a      	orrs	r2, r3
 8109bf8:	68fb      	ldr	r3, [r7, #12]
 8109bfa:	609a      	str	r2, [r3, #8]
 8109bfc:	e02f      	b.n	8109c5e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8109bfe:	68fb      	ldr	r3, [r7, #12]
 8109c00:	689b      	ldr	r3, [r3, #8]
 8109c02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8109c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8109c0a:	68ba      	ldr	r2, [r7, #8]
 8109c0c:	68d2      	ldr	r2, [r2, #12]
 8109c0e:	3a01      	subs	r2, #1
 8109c10:	0311      	lsls	r1, r2, #12
 8109c12:	68ba      	ldr	r2, [r7, #8]
 8109c14:	6952      	ldr	r2, [r2, #20]
 8109c16:	3a01      	subs	r2, #1
 8109c18:	0512      	lsls	r2, r2, #20
 8109c1a:	430a      	orrs	r2, r1
 8109c1c:	431a      	orrs	r2, r3
 8109c1e:	68fb      	ldr	r3, [r7, #12]
 8109c20:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8109c22:	68fb      	ldr	r3, [r7, #12]
 8109c24:	68db      	ldr	r3, [r3, #12]
 8109c26:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8109c2a:	68bb      	ldr	r3, [r7, #8]
 8109c2c:	681b      	ldr	r3, [r3, #0]
 8109c2e:	1e59      	subs	r1, r3, #1
 8109c30:	68bb      	ldr	r3, [r7, #8]
 8109c32:	685b      	ldr	r3, [r3, #4]
 8109c34:	3b01      	subs	r3, #1
 8109c36:	011b      	lsls	r3, r3, #4
 8109c38:	4319      	orrs	r1, r3
 8109c3a:	68bb      	ldr	r3, [r7, #8]
 8109c3c:	689b      	ldr	r3, [r3, #8]
 8109c3e:	3b01      	subs	r3, #1
 8109c40:	021b      	lsls	r3, r3, #8
 8109c42:	4319      	orrs	r1, r3
 8109c44:	68bb      	ldr	r3, [r7, #8]
 8109c46:	691b      	ldr	r3, [r3, #16]
 8109c48:	3b01      	subs	r3, #1
 8109c4a:	041b      	lsls	r3, r3, #16
 8109c4c:	4319      	orrs	r1, r3
 8109c4e:	68bb      	ldr	r3, [r7, #8]
 8109c50:	699b      	ldr	r3, [r3, #24]
 8109c52:	3b01      	subs	r3, #1
 8109c54:	061b      	lsls	r3, r3, #24
 8109c56:	430b      	orrs	r3, r1
 8109c58:	431a      	orrs	r2, r3
 8109c5a:	68fb      	ldr	r3, [r7, #12]
 8109c5c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8109c5e:	2300      	movs	r3, #0
}
 8109c60:	4618      	mov	r0, r3
 8109c62:	3714      	adds	r7, #20
 8109c64:	46bd      	mov	sp, r7
 8109c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c6a:	4770      	bx	lr

08109c6c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8109c6c:	b084      	sub	sp, #16
 8109c6e:	b480      	push	{r7}
 8109c70:	b085      	sub	sp, #20
 8109c72:	af00      	add	r7, sp, #0
 8109c74:	6078      	str	r0, [r7, #4]
 8109c76:	f107 001c 	add.w	r0, r7, #28
 8109c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8109c7e:	2300      	movs	r3, #0
 8109c80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8109c82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8109c84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8109c86:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8109c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8109c8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8109c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8109c8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8109c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8109c92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8109c94:	68fa      	ldr	r2, [r7, #12]
 8109c96:	4313      	orrs	r3, r2
 8109c98:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	685a      	ldr	r2, [r3, #4]
 8109c9e:	4b07      	ldr	r3, [pc, #28]	; (8109cbc <SDMMC_Init+0x50>)
 8109ca0:	4013      	ands	r3, r2
 8109ca2:	68fa      	ldr	r2, [r7, #12]
 8109ca4:	431a      	orrs	r2, r3
 8109ca6:	687b      	ldr	r3, [r7, #4]
 8109ca8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8109caa:	2300      	movs	r3, #0
}
 8109cac:	4618      	mov	r0, r3
 8109cae:	3714      	adds	r7, #20
 8109cb0:	46bd      	mov	sp, r7
 8109cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cb6:	b004      	add	sp, #16
 8109cb8:	4770      	bx	lr
 8109cba:	bf00      	nop
 8109cbc:	ffc02c00 	.word	0xffc02c00

08109cc0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8109cc0:	b480      	push	{r7}
 8109cc2:	b083      	sub	sp, #12
 8109cc4:	af00      	add	r7, sp, #0
 8109cc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8109cc8:	687b      	ldr	r3, [r7, #4]
 8109cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8109cce:	4618      	mov	r0, r3
 8109cd0:	370c      	adds	r7, #12
 8109cd2:	46bd      	mov	sp, r7
 8109cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cd8:	4770      	bx	lr

08109cda <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8109cda:	b480      	push	{r7}
 8109cdc:	b083      	sub	sp, #12
 8109cde:	af00      	add	r7, sp, #0
 8109ce0:	6078      	str	r0, [r7, #4]
 8109ce2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8109ce4:	683b      	ldr	r3, [r7, #0]
 8109ce6:	681a      	ldr	r2, [r3, #0]
 8109ce8:	687b      	ldr	r3, [r7, #4]
 8109cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8109cee:	2300      	movs	r3, #0
}
 8109cf0:	4618      	mov	r0, r3
 8109cf2:	370c      	adds	r7, #12
 8109cf4:	46bd      	mov	sp, r7
 8109cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cfa:	4770      	bx	lr

08109cfc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8109cfc:	b480      	push	{r7}
 8109cfe:	b083      	sub	sp, #12
 8109d00:	af00      	add	r7, sp, #0
 8109d02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8109d04:	687b      	ldr	r3, [r7, #4]
 8109d06:	681b      	ldr	r3, [r3, #0]
 8109d08:	f043 0203 	orr.w	r2, r3, #3
 8109d0c:	687b      	ldr	r3, [r7, #4]
 8109d0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8109d10:	2300      	movs	r3, #0
}
 8109d12:	4618      	mov	r0, r3
 8109d14:	370c      	adds	r7, #12
 8109d16:	46bd      	mov	sp, r7
 8109d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d1c:	4770      	bx	lr

08109d1e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8109d1e:	b480      	push	{r7}
 8109d20:	b083      	sub	sp, #12
 8109d22:	af00      	add	r7, sp, #0
 8109d24:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8109d26:	687b      	ldr	r3, [r7, #4]
 8109d28:	681b      	ldr	r3, [r3, #0]
 8109d2a:	f003 0303 	and.w	r3, r3, #3
}
 8109d2e:	4618      	mov	r0, r3
 8109d30:	370c      	adds	r7, #12
 8109d32:	46bd      	mov	sp, r7
 8109d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d38:	4770      	bx	lr
	...

08109d3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8109d3c:	b480      	push	{r7}
 8109d3e:	b085      	sub	sp, #20
 8109d40:	af00      	add	r7, sp, #0
 8109d42:	6078      	str	r0, [r7, #4]
 8109d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109d46:	2300      	movs	r3, #0
 8109d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8109d4a:	683b      	ldr	r3, [r7, #0]
 8109d4c:	681a      	ldr	r2, [r3, #0]
 8109d4e:	687b      	ldr	r3, [r7, #4]
 8109d50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109d52:	683b      	ldr	r3, [r7, #0]
 8109d54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8109d56:	683b      	ldr	r3, [r7, #0]
 8109d58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109d5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8109d5c:	683b      	ldr	r3, [r7, #0]
 8109d5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8109d60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8109d62:	683b      	ldr	r3, [r7, #0]
 8109d64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8109d66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109d68:	68fa      	ldr	r2, [r7, #12]
 8109d6a:	4313      	orrs	r3, r2
 8109d6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8109d6e:	687b      	ldr	r3, [r7, #4]
 8109d70:	68da      	ldr	r2, [r3, #12]
 8109d72:	4b06      	ldr	r3, [pc, #24]	; (8109d8c <SDMMC_SendCommand+0x50>)
 8109d74:	4013      	ands	r3, r2
 8109d76:	68fa      	ldr	r2, [r7, #12]
 8109d78:	431a      	orrs	r2, r3
 8109d7a:	687b      	ldr	r3, [r7, #4]
 8109d7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8109d7e:	2300      	movs	r3, #0
}
 8109d80:	4618      	mov	r0, r3
 8109d82:	3714      	adds	r7, #20
 8109d84:	46bd      	mov	sp, r7
 8109d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d8a:	4770      	bx	lr
 8109d8c:	fffee0c0 	.word	0xfffee0c0

08109d90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8109d90:	b480      	push	{r7}
 8109d92:	b083      	sub	sp, #12
 8109d94:	af00      	add	r7, sp, #0
 8109d96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8109d98:	687b      	ldr	r3, [r7, #4]
 8109d9a:	691b      	ldr	r3, [r3, #16]
 8109d9c:	b2db      	uxtb	r3, r3
}
 8109d9e:	4618      	mov	r0, r3
 8109da0:	370c      	adds	r7, #12
 8109da2:	46bd      	mov	sp, r7
 8109da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109da8:	4770      	bx	lr

08109daa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8109daa:	b480      	push	{r7}
 8109dac:	b085      	sub	sp, #20
 8109dae:	af00      	add	r7, sp, #0
 8109db0:	6078      	str	r0, [r7, #4]
 8109db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8109db4:	687b      	ldr	r3, [r7, #4]
 8109db6:	3314      	adds	r3, #20
 8109db8:	461a      	mov	r2, r3
 8109dba:	683b      	ldr	r3, [r7, #0]
 8109dbc:	4413      	add	r3, r2
 8109dbe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8109dc0:	68fb      	ldr	r3, [r7, #12]
 8109dc2:	681b      	ldr	r3, [r3, #0]
}
 8109dc4:	4618      	mov	r0, r3
 8109dc6:	3714      	adds	r7, #20
 8109dc8:	46bd      	mov	sp, r7
 8109dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109dce:	4770      	bx	lr

08109dd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8109dd0:	b480      	push	{r7}
 8109dd2:	b085      	sub	sp, #20
 8109dd4:	af00      	add	r7, sp, #0
 8109dd6:	6078      	str	r0, [r7, #4]
 8109dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109dda:	2300      	movs	r3, #0
 8109ddc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8109dde:	683b      	ldr	r3, [r7, #0]
 8109de0:	681a      	ldr	r2, [r3, #0]
 8109de2:	687b      	ldr	r3, [r7, #4]
 8109de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8109de6:	683b      	ldr	r3, [r7, #0]
 8109de8:	685a      	ldr	r2, [r3, #4]
 8109dea:	687b      	ldr	r3, [r7, #4]
 8109dec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109dee:	683b      	ldr	r3, [r7, #0]
 8109df0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8109df2:	683b      	ldr	r3, [r7, #0]
 8109df4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109df6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8109df8:	683b      	ldr	r3, [r7, #0]
 8109dfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8109dfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8109dfe:	683b      	ldr	r3, [r7, #0]
 8109e00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8109e02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e04:	68fa      	ldr	r2, [r7, #12]
 8109e06:	4313      	orrs	r3, r2
 8109e08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8109e0a:	687b      	ldr	r3, [r7, #4]
 8109e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109e0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8109e12:	68fb      	ldr	r3, [r7, #12]
 8109e14:	431a      	orrs	r2, r3
 8109e16:	687b      	ldr	r3, [r7, #4]
 8109e18:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8109e1a:	2300      	movs	r3, #0

}
 8109e1c:	4618      	mov	r0, r3
 8109e1e:	3714      	adds	r7, #20
 8109e20:	46bd      	mov	sp, r7
 8109e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e26:	4770      	bx	lr

08109e28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8109e28:	b580      	push	{r7, lr}
 8109e2a:	b088      	sub	sp, #32
 8109e2c:	af00      	add	r7, sp, #0
 8109e2e:	6078      	str	r0, [r7, #4]
 8109e30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8109e32:	683b      	ldr	r3, [r7, #0]
 8109e34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8109e36:	2310      	movs	r3, #16
 8109e38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109e3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109e40:	2300      	movs	r3, #0
 8109e42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8109e48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109e4a:	f107 0308 	add.w	r3, r7, #8
 8109e4e:	4619      	mov	r1, r3
 8109e50:	6878      	ldr	r0, [r7, #4]
 8109e52:	f7ff ff73 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8109e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8109e5a:	2110      	movs	r1, #16
 8109e5c:	6878      	ldr	r0, [r7, #4]
 8109e5e:	f000 fa5f 	bl	810a320 <SDMMC_GetCmdResp1>
 8109e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109e64:	69fb      	ldr	r3, [r7, #28]
}
 8109e66:	4618      	mov	r0, r3
 8109e68:	3720      	adds	r7, #32
 8109e6a:	46bd      	mov	sp, r7
 8109e6c:	bd80      	pop	{r7, pc}

08109e6e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8109e6e:	b580      	push	{r7, lr}
 8109e70:	b088      	sub	sp, #32
 8109e72:	af00      	add	r7, sp, #0
 8109e74:	6078      	str	r0, [r7, #4]
 8109e76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8109e78:	683b      	ldr	r3, [r7, #0]
 8109e7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8109e7c:	2311      	movs	r3, #17
 8109e7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109e84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109e86:	2300      	movs	r3, #0
 8109e88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8109e8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109e90:	f107 0308 	add.w	r3, r7, #8
 8109e94:	4619      	mov	r1, r3
 8109e96:	6878      	ldr	r0, [r7, #4]
 8109e98:	f7ff ff50 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8109e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8109ea0:	2111      	movs	r1, #17
 8109ea2:	6878      	ldr	r0, [r7, #4]
 8109ea4:	f000 fa3c 	bl	810a320 <SDMMC_GetCmdResp1>
 8109ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109eaa:	69fb      	ldr	r3, [r7, #28]
}
 8109eac:	4618      	mov	r0, r3
 8109eae:	3720      	adds	r7, #32
 8109eb0:	46bd      	mov	sp, r7
 8109eb2:	bd80      	pop	{r7, pc}

08109eb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8109eb4:	b580      	push	{r7, lr}
 8109eb6:	b088      	sub	sp, #32
 8109eb8:	af00      	add	r7, sp, #0
 8109eba:	6078      	str	r0, [r7, #4]
 8109ebc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8109ebe:	683b      	ldr	r3, [r7, #0]
 8109ec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8109ec2:	2312      	movs	r3, #18
 8109ec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109eca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109ecc:	2300      	movs	r3, #0
 8109ece:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8109ed4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109ed6:	f107 0308 	add.w	r3, r7, #8
 8109eda:	4619      	mov	r1, r3
 8109edc:	6878      	ldr	r0, [r7, #4]
 8109ede:	f7ff ff2d 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8109ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8109ee6:	2112      	movs	r1, #18
 8109ee8:	6878      	ldr	r0, [r7, #4]
 8109eea:	f000 fa19 	bl	810a320 <SDMMC_GetCmdResp1>
 8109eee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109ef0:	69fb      	ldr	r3, [r7, #28]
}
 8109ef2:	4618      	mov	r0, r3
 8109ef4:	3720      	adds	r7, #32
 8109ef6:	46bd      	mov	sp, r7
 8109ef8:	bd80      	pop	{r7, pc}

08109efa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8109efa:	b580      	push	{r7, lr}
 8109efc:	b088      	sub	sp, #32
 8109efe:	af00      	add	r7, sp, #0
 8109f00:	6078      	str	r0, [r7, #4]
 8109f02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8109f04:	683b      	ldr	r3, [r7, #0]
 8109f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8109f08:	2318      	movs	r3, #24
 8109f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109f10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f12:	2300      	movs	r3, #0
 8109f14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8109f1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109f1c:	f107 0308 	add.w	r3, r7, #8
 8109f20:	4619      	mov	r1, r3
 8109f22:	6878      	ldr	r0, [r7, #4]
 8109f24:	f7ff ff0a 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8109f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8109f2c:	2118      	movs	r1, #24
 8109f2e:	6878      	ldr	r0, [r7, #4]
 8109f30:	f000 f9f6 	bl	810a320 <SDMMC_GetCmdResp1>
 8109f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109f36:	69fb      	ldr	r3, [r7, #28]
}
 8109f38:	4618      	mov	r0, r3
 8109f3a:	3720      	adds	r7, #32
 8109f3c:	46bd      	mov	sp, r7
 8109f3e:	bd80      	pop	{r7, pc}

08109f40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8109f40:	b580      	push	{r7, lr}
 8109f42:	b088      	sub	sp, #32
 8109f44:	af00      	add	r7, sp, #0
 8109f46:	6078      	str	r0, [r7, #4]
 8109f48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8109f4a:	683b      	ldr	r3, [r7, #0]
 8109f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8109f4e:	2319      	movs	r3, #25
 8109f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f58:	2300      	movs	r3, #0
 8109f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8109f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109f62:	f107 0308 	add.w	r3, r7, #8
 8109f66:	4619      	mov	r1, r3
 8109f68:	6878      	ldr	r0, [r7, #4]
 8109f6a:	f7ff fee7 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8109f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8109f72:	2119      	movs	r1, #25
 8109f74:	6878      	ldr	r0, [r7, #4]
 8109f76:	f000 f9d3 	bl	810a320 <SDMMC_GetCmdResp1>
 8109f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109f7c:	69fb      	ldr	r3, [r7, #28]
}
 8109f7e:	4618      	mov	r0, r3
 8109f80:	3720      	adds	r7, #32
 8109f82:	46bd      	mov	sp, r7
 8109f84:	bd80      	pop	{r7, pc}
	...

08109f88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8109f88:	b580      	push	{r7, lr}
 8109f8a:	b088      	sub	sp, #32
 8109f8c:	af00      	add	r7, sp, #0
 8109f8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8109f90:	2300      	movs	r3, #0
 8109f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8109f94:	230c      	movs	r3, #12
 8109f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109f9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f9e:	2300      	movs	r3, #0
 8109fa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8109fa6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8109fa8:	687b      	ldr	r3, [r7, #4]
 8109faa:	68db      	ldr	r3, [r3, #12]
 8109fac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8109fb0:	687b      	ldr	r3, [r7, #4]
 8109fb2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8109fb4:	687b      	ldr	r3, [r7, #4]
 8109fb6:	68db      	ldr	r3, [r3, #12]
 8109fb8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8109fbc:	687b      	ldr	r3, [r7, #4]
 8109fbe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109fc0:	f107 0308 	add.w	r3, r7, #8
 8109fc4:	4619      	mov	r1, r3
 8109fc6:	6878      	ldr	r0, [r7, #4]
 8109fc8:	f7ff feb8 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8109fcc:	4a0b      	ldr	r2, [pc, #44]	; (8109ffc <SDMMC_CmdStopTransfer+0x74>)
 8109fce:	210c      	movs	r1, #12
 8109fd0:	6878      	ldr	r0, [r7, #4]
 8109fd2:	f000 f9a5 	bl	810a320 <SDMMC_GetCmdResp1>
 8109fd6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8109fd8:	687b      	ldr	r3, [r7, #4]
 8109fda:	68db      	ldr	r3, [r3, #12]
 8109fdc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8109fe0:	687b      	ldr	r3, [r7, #4]
 8109fe2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8109fe4:	69fb      	ldr	r3, [r7, #28]
 8109fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8109fea:	d101      	bne.n	8109ff0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8109fec:	2300      	movs	r3, #0
 8109fee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8109ff0:	69fb      	ldr	r3, [r7, #28]
}
 8109ff2:	4618      	mov	r0, r3
 8109ff4:	3720      	adds	r7, #32
 8109ff6:	46bd      	mov	sp, r7
 8109ff8:	bd80      	pop	{r7, pc}
 8109ffa:	bf00      	nop
 8109ffc:	05f5e100 	.word	0x05f5e100

0810a000 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810a000:	b580      	push	{r7, lr}
 810a002:	b088      	sub	sp, #32
 810a004:	af00      	add	r7, sp, #0
 810a006:	6078      	str	r0, [r7, #4]
 810a008:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810a00a:	683b      	ldr	r3, [r7, #0]
 810a00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810a00e:	2307      	movs	r3, #7
 810a010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a012:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a018:	2300      	movs	r3, #0
 810a01a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a01c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a020:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a022:	f107 0308 	add.w	r3, r7, #8
 810a026:	4619      	mov	r1, r3
 810a028:	6878      	ldr	r0, [r7, #4]
 810a02a:	f7ff fe87 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810a02e:	f241 3288 	movw	r2, #5000	; 0x1388
 810a032:	2107      	movs	r1, #7
 810a034:	6878      	ldr	r0, [r7, #4]
 810a036:	f000 f973 	bl	810a320 <SDMMC_GetCmdResp1>
 810a03a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a03c:	69fb      	ldr	r3, [r7, #28]
}
 810a03e:	4618      	mov	r0, r3
 810a040:	3720      	adds	r7, #32
 810a042:	46bd      	mov	sp, r7
 810a044:	bd80      	pop	{r7, pc}

0810a046 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810a046:	b580      	push	{r7, lr}
 810a048:	b088      	sub	sp, #32
 810a04a:	af00      	add	r7, sp, #0
 810a04c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810a04e:	2300      	movs	r3, #0
 810a050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810a052:	2300      	movs	r3, #0
 810a054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810a056:	2300      	movs	r3, #0
 810a058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a05a:	2300      	movs	r3, #0
 810a05c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a05e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a064:	f107 0308 	add.w	r3, r7, #8
 810a068:	4619      	mov	r1, r3
 810a06a:	6878      	ldr	r0, [r7, #4]
 810a06c:	f7ff fe66 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810a070:	6878      	ldr	r0, [r7, #4]
 810a072:	f000 fb97 	bl	810a7a4 <SDMMC_GetCmdError>
 810a076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a078:	69fb      	ldr	r3, [r7, #28]
}
 810a07a:	4618      	mov	r0, r3
 810a07c:	3720      	adds	r7, #32
 810a07e:	46bd      	mov	sp, r7
 810a080:	bd80      	pop	{r7, pc}

0810a082 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810a082:	b580      	push	{r7, lr}
 810a084:	b088      	sub	sp, #32
 810a086:	af00      	add	r7, sp, #0
 810a088:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810a08a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 810a08e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810a090:	2308      	movs	r3, #8
 810a092:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a094:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a09a:	2300      	movs	r3, #0
 810a09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a09e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a0a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a0a4:	f107 0308 	add.w	r3, r7, #8
 810a0a8:	4619      	mov	r1, r3
 810a0aa:	6878      	ldr	r0, [r7, #4]
 810a0ac:	f7ff fe46 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810a0b0:	6878      	ldr	r0, [r7, #4]
 810a0b2:	f000 fb29 	bl	810a708 <SDMMC_GetCmdResp7>
 810a0b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a0b8:	69fb      	ldr	r3, [r7, #28]
}
 810a0ba:	4618      	mov	r0, r3
 810a0bc:	3720      	adds	r7, #32
 810a0be:	46bd      	mov	sp, r7
 810a0c0:	bd80      	pop	{r7, pc}

0810a0c2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a0c2:	b580      	push	{r7, lr}
 810a0c4:	b088      	sub	sp, #32
 810a0c6:	af00      	add	r7, sp, #0
 810a0c8:	6078      	str	r0, [r7, #4]
 810a0ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810a0cc:	683b      	ldr	r3, [r7, #0]
 810a0ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810a0d0:	2337      	movs	r3, #55	; 0x37
 810a0d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a0d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a0da:	2300      	movs	r3, #0
 810a0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a0de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a0e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a0e4:	f107 0308 	add.w	r3, r7, #8
 810a0e8:	4619      	mov	r1, r3
 810a0ea:	6878      	ldr	r0, [r7, #4]
 810a0ec:	f7ff fe26 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810a0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 810a0f4:	2137      	movs	r1, #55	; 0x37
 810a0f6:	6878      	ldr	r0, [r7, #4]
 810a0f8:	f000 f912 	bl	810a320 <SDMMC_GetCmdResp1>
 810a0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a0fe:	69fb      	ldr	r3, [r7, #28]
}
 810a100:	4618      	mov	r0, r3
 810a102:	3720      	adds	r7, #32
 810a104:	46bd      	mov	sp, r7
 810a106:	bd80      	pop	{r7, pc}

0810a108 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a108:	b580      	push	{r7, lr}
 810a10a:	b088      	sub	sp, #32
 810a10c:	af00      	add	r7, sp, #0
 810a10e:	6078      	str	r0, [r7, #4]
 810a110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810a112:	683b      	ldr	r3, [r7, #0]
 810a114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810a116:	2329      	movs	r3, #41	; 0x29
 810a118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a11a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a120:	2300      	movs	r3, #0
 810a122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a128:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a12a:	f107 0308 	add.w	r3, r7, #8
 810a12e:	4619      	mov	r1, r3
 810a130:	6878      	ldr	r0, [r7, #4]
 810a132:	f7ff fe03 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810a136:	6878      	ldr	r0, [r7, #4]
 810a138:	f000 fa2e 	bl	810a598 <SDMMC_GetCmdResp3>
 810a13c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a13e:	69fb      	ldr	r3, [r7, #28]
}
 810a140:	4618      	mov	r0, r3
 810a142:	3720      	adds	r7, #32
 810a144:	46bd      	mov	sp, r7
 810a146:	bd80      	pop	{r7, pc}

0810a148 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810a148:	b580      	push	{r7, lr}
 810a14a:	b088      	sub	sp, #32
 810a14c:	af00      	add	r7, sp, #0
 810a14e:	6078      	str	r0, [r7, #4]
 810a150:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810a152:	683b      	ldr	r3, [r7, #0]
 810a154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810a156:	2306      	movs	r3, #6
 810a158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a15a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a160:	2300      	movs	r3, #0
 810a162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a16a:	f107 0308 	add.w	r3, r7, #8
 810a16e:	4619      	mov	r1, r3
 810a170:	6878      	ldr	r0, [r7, #4]
 810a172:	f7ff fde3 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810a176:	f241 3288 	movw	r2, #5000	; 0x1388
 810a17a:	2106      	movs	r1, #6
 810a17c:	6878      	ldr	r0, [r7, #4]
 810a17e:	f000 f8cf 	bl	810a320 <SDMMC_GetCmdResp1>
 810a182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a184:	69fb      	ldr	r3, [r7, #28]
}
 810a186:	4618      	mov	r0, r3
 810a188:	3720      	adds	r7, #32
 810a18a:	46bd      	mov	sp, r7
 810a18c:	bd80      	pop	{r7, pc}

0810a18e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810a18e:	b580      	push	{r7, lr}
 810a190:	b088      	sub	sp, #32
 810a192:	af00      	add	r7, sp, #0
 810a194:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810a196:	2300      	movs	r3, #0
 810a198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810a19a:	2333      	movs	r3, #51	; 0x33
 810a19c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a19e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a1a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a1a4:	2300      	movs	r3, #0
 810a1a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a1a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a1ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a1ae:	f107 0308 	add.w	r3, r7, #8
 810a1b2:	4619      	mov	r1, r3
 810a1b4:	6878      	ldr	r0, [r7, #4]
 810a1b6:	f7ff fdc1 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810a1ba:	f241 3288 	movw	r2, #5000	; 0x1388
 810a1be:	2133      	movs	r1, #51	; 0x33
 810a1c0:	6878      	ldr	r0, [r7, #4]
 810a1c2:	f000 f8ad 	bl	810a320 <SDMMC_GetCmdResp1>
 810a1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a1c8:	69fb      	ldr	r3, [r7, #28]
}
 810a1ca:	4618      	mov	r0, r3
 810a1cc:	3720      	adds	r7, #32
 810a1ce:	46bd      	mov	sp, r7
 810a1d0:	bd80      	pop	{r7, pc}

0810a1d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810a1d2:	b580      	push	{r7, lr}
 810a1d4:	b088      	sub	sp, #32
 810a1d6:	af00      	add	r7, sp, #0
 810a1d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810a1da:	2300      	movs	r3, #0
 810a1dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810a1de:	2302      	movs	r3, #2
 810a1e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810a1e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 810a1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a1e8:	2300      	movs	r3, #0
 810a1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a1ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a1f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a1f2:	f107 0308 	add.w	r3, r7, #8
 810a1f6:	4619      	mov	r1, r3
 810a1f8:	6878      	ldr	r0, [r7, #4]
 810a1fa:	f7ff fd9f 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810a1fe:	6878      	ldr	r0, [r7, #4]
 810a200:	f000 f980 	bl	810a504 <SDMMC_GetCmdResp2>
 810a204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a206:	69fb      	ldr	r3, [r7, #28]
}
 810a208:	4618      	mov	r0, r3
 810a20a:	3720      	adds	r7, #32
 810a20c:	46bd      	mov	sp, r7
 810a20e:	bd80      	pop	{r7, pc}

0810a210 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a210:	b580      	push	{r7, lr}
 810a212:	b088      	sub	sp, #32
 810a214:	af00      	add	r7, sp, #0
 810a216:	6078      	str	r0, [r7, #4]
 810a218:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810a21a:	683b      	ldr	r3, [r7, #0]
 810a21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810a21e:	2309      	movs	r3, #9
 810a220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810a222:	f44f 7340 	mov.w	r3, #768	; 0x300
 810a226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a228:	2300      	movs	r3, #0
 810a22a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a230:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a232:	f107 0308 	add.w	r3, r7, #8
 810a236:	4619      	mov	r1, r3
 810a238:	6878      	ldr	r0, [r7, #4]
 810a23a:	f7ff fd7f 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810a23e:	6878      	ldr	r0, [r7, #4]
 810a240:	f000 f960 	bl	810a504 <SDMMC_GetCmdResp2>
 810a244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a246:	69fb      	ldr	r3, [r7, #28]
}
 810a248:	4618      	mov	r0, r3
 810a24a:	3720      	adds	r7, #32
 810a24c:	46bd      	mov	sp, r7
 810a24e:	bd80      	pop	{r7, pc}

0810a250 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810a250:	b580      	push	{r7, lr}
 810a252:	b088      	sub	sp, #32
 810a254:	af00      	add	r7, sp, #0
 810a256:	6078      	str	r0, [r7, #4]
 810a258:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810a25a:	2300      	movs	r3, #0
 810a25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810a25e:	2303      	movs	r3, #3
 810a260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a262:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a268:	2300      	movs	r3, #0
 810a26a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a26c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a270:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a272:	f107 0308 	add.w	r3, r7, #8
 810a276:	4619      	mov	r1, r3
 810a278:	6878      	ldr	r0, [r7, #4]
 810a27a:	f7ff fd5f 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810a27e:	683a      	ldr	r2, [r7, #0]
 810a280:	2103      	movs	r1, #3
 810a282:	6878      	ldr	r0, [r7, #4]
 810a284:	f000 f9c8 	bl	810a618 <SDMMC_GetCmdResp6>
 810a288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a28a:	69fb      	ldr	r3, [r7, #28]
}
 810a28c:	4618      	mov	r0, r3
 810a28e:	3720      	adds	r7, #32
 810a290:	46bd      	mov	sp, r7
 810a292:	bd80      	pop	{r7, pc}

0810a294 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a294:	b580      	push	{r7, lr}
 810a296:	b088      	sub	sp, #32
 810a298:	af00      	add	r7, sp, #0
 810a29a:	6078      	str	r0, [r7, #4]
 810a29c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810a29e:	683b      	ldr	r3, [r7, #0]
 810a2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810a2a2:	230d      	movs	r3, #13
 810a2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a2a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a2aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a2ac:	2300      	movs	r3, #0
 810a2ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a2b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a2b6:	f107 0308 	add.w	r3, r7, #8
 810a2ba:	4619      	mov	r1, r3
 810a2bc:	6878      	ldr	r0, [r7, #4]
 810a2be:	f7ff fd3d 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810a2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 810a2c6:	210d      	movs	r1, #13
 810a2c8:	6878      	ldr	r0, [r7, #4]
 810a2ca:	f000 f829 	bl	810a320 <SDMMC_GetCmdResp1>
 810a2ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a2d0:	69fb      	ldr	r3, [r7, #28]
}
 810a2d2:	4618      	mov	r0, r3
 810a2d4:	3720      	adds	r7, #32
 810a2d6:	46bd      	mov	sp, r7
 810a2d8:	bd80      	pop	{r7, pc}

0810a2da <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810a2da:	b580      	push	{r7, lr}
 810a2dc:	b088      	sub	sp, #32
 810a2de:	af00      	add	r7, sp, #0
 810a2e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810a2e2:	2300      	movs	r3, #0
 810a2e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810a2e6:	230d      	movs	r3, #13
 810a2e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a2ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a2ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a2f0:	2300      	movs	r3, #0
 810a2f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a2f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a2f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a2fa:	f107 0308 	add.w	r3, r7, #8
 810a2fe:	4619      	mov	r1, r3
 810a300:	6878      	ldr	r0, [r7, #4]
 810a302:	f7ff fd1b 	bl	8109d3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810a306:	f241 3288 	movw	r2, #5000	; 0x1388
 810a30a:	210d      	movs	r1, #13
 810a30c:	6878      	ldr	r0, [r7, #4]
 810a30e:	f000 f807 	bl	810a320 <SDMMC_GetCmdResp1>
 810a312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a314:	69fb      	ldr	r3, [r7, #28]
}
 810a316:	4618      	mov	r0, r3
 810a318:	3720      	adds	r7, #32
 810a31a:	46bd      	mov	sp, r7
 810a31c:	bd80      	pop	{r7, pc}
	...

0810a320 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810a320:	b580      	push	{r7, lr}
 810a322:	b088      	sub	sp, #32
 810a324:	af00      	add	r7, sp, #0
 810a326:	60f8      	str	r0, [r7, #12]
 810a328:	460b      	mov	r3, r1
 810a32a:	607a      	str	r2, [r7, #4]
 810a32c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810a32e:	4b70      	ldr	r3, [pc, #448]	; (810a4f0 <SDMMC_GetCmdResp1+0x1d0>)
 810a330:	681b      	ldr	r3, [r3, #0]
 810a332:	4a70      	ldr	r2, [pc, #448]	; (810a4f4 <SDMMC_GetCmdResp1+0x1d4>)
 810a334:	fba2 2303 	umull	r2, r3, r2, r3
 810a338:	0a5a      	lsrs	r2, r3, #9
 810a33a:	687b      	ldr	r3, [r7, #4]
 810a33c:	fb02 f303 	mul.w	r3, r2, r3
 810a340:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810a342:	69fb      	ldr	r3, [r7, #28]
 810a344:	1e5a      	subs	r2, r3, #1
 810a346:	61fa      	str	r2, [r7, #28]
 810a348:	2b00      	cmp	r3, #0
 810a34a:	d102      	bne.n	810a352 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a34c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a350:	e0c9      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810a352:	68fb      	ldr	r3, [r7, #12]
 810a354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a356:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810a358:	69ba      	ldr	r2, [r7, #24]
 810a35a:	4b67      	ldr	r3, [pc, #412]	; (810a4f8 <SDMMC_GetCmdResp1+0x1d8>)
 810a35c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a35e:	2b00      	cmp	r3, #0
 810a360:	d0ef      	beq.n	810a342 <SDMMC_GetCmdResp1+0x22>
 810a362:	69bb      	ldr	r3, [r7, #24]
 810a364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810a368:	2b00      	cmp	r3, #0
 810a36a:	d1ea      	bne.n	810a342 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a36c:	68fb      	ldr	r3, [r7, #12]
 810a36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a370:	f003 0304 	and.w	r3, r3, #4
 810a374:	2b00      	cmp	r3, #0
 810a376:	d004      	beq.n	810a382 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a378:	68fb      	ldr	r3, [r7, #12]
 810a37a:	2204      	movs	r2, #4
 810a37c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a37e:	2304      	movs	r3, #4
 810a380:	e0b1      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a382:	68fb      	ldr	r3, [r7, #12]
 810a384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a386:	f003 0301 	and.w	r3, r3, #1
 810a38a:	2b00      	cmp	r3, #0
 810a38c:	d004      	beq.n	810a398 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a38e:	68fb      	ldr	r3, [r7, #12]
 810a390:	2201      	movs	r2, #1
 810a392:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a394:	2301      	movs	r3, #1
 810a396:	e0a6      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a398:	68fb      	ldr	r3, [r7, #12]
 810a39a:	4a58      	ldr	r2, [pc, #352]	; (810a4fc <SDMMC_GetCmdResp1+0x1dc>)
 810a39c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810a39e:	68f8      	ldr	r0, [r7, #12]
 810a3a0:	f7ff fcf6 	bl	8109d90 <SDMMC_GetCommandResponse>
 810a3a4:	4603      	mov	r3, r0
 810a3a6:	461a      	mov	r2, r3
 810a3a8:	7afb      	ldrb	r3, [r7, #11]
 810a3aa:	4293      	cmp	r3, r2
 810a3ac:	d001      	beq.n	810a3b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a3ae:	2301      	movs	r3, #1
 810a3b0:	e099      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810a3b2:	2100      	movs	r1, #0
 810a3b4:	68f8      	ldr	r0, [r7, #12]
 810a3b6:	f7ff fcf8 	bl	8109daa <SDMMC_GetResponse>
 810a3ba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810a3bc:	697a      	ldr	r2, [r7, #20]
 810a3be:	4b50      	ldr	r3, [pc, #320]	; (810a500 <SDMMC_GetCmdResp1+0x1e0>)
 810a3c0:	4013      	ands	r3, r2
 810a3c2:	2b00      	cmp	r3, #0
 810a3c4:	d101      	bne.n	810a3ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810a3c6:	2300      	movs	r3, #0
 810a3c8:	e08d      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810a3ca:	697b      	ldr	r3, [r7, #20]
 810a3cc:	2b00      	cmp	r3, #0
 810a3ce:	da02      	bge.n	810a3d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810a3d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810a3d4:	e087      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810a3d6:	697b      	ldr	r3, [r7, #20]
 810a3d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810a3dc:	2b00      	cmp	r3, #0
 810a3de:	d001      	beq.n	810a3e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810a3e0:	2340      	movs	r3, #64	; 0x40
 810a3e2:	e080      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810a3e4:	697b      	ldr	r3, [r7, #20]
 810a3e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810a3ea:	2b00      	cmp	r3, #0
 810a3ec:	d001      	beq.n	810a3f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810a3ee:	2380      	movs	r3, #128	; 0x80
 810a3f0:	e079      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810a3f2:	697b      	ldr	r3, [r7, #20]
 810a3f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a3f8:	2b00      	cmp	r3, #0
 810a3fa:	d002      	beq.n	810a402 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810a3fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 810a400:	e071      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810a402:	697b      	ldr	r3, [r7, #20]
 810a404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810a408:	2b00      	cmp	r3, #0
 810a40a:	d002      	beq.n	810a412 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810a40c:	f44f 7300 	mov.w	r3, #512	; 0x200
 810a410:	e069      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810a412:	697b      	ldr	r3, [r7, #20]
 810a414:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 810a418:	2b00      	cmp	r3, #0
 810a41a:	d002      	beq.n	810a422 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810a41c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a420:	e061      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810a422:	697b      	ldr	r3, [r7, #20]
 810a424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810a428:	2b00      	cmp	r3, #0
 810a42a:	d002      	beq.n	810a432 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810a42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810a430:	e059      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810a432:	697b      	ldr	r3, [r7, #20]
 810a434:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810a438:	2b00      	cmp	r3, #0
 810a43a:	d002      	beq.n	810a442 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810a43c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a440:	e051      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810a442:	697b      	ldr	r3, [r7, #20]
 810a444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810a448:	2b00      	cmp	r3, #0
 810a44a:	d002      	beq.n	810a452 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810a44c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810a450:	e049      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810a452:	697b      	ldr	r3, [r7, #20]
 810a454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810a458:	2b00      	cmp	r3, #0
 810a45a:	d002      	beq.n	810a462 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810a45c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810a460:	e041      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810a462:	697b      	ldr	r3, [r7, #20]
 810a464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a468:	2b00      	cmp	r3, #0
 810a46a:	d002      	beq.n	810a472 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810a46c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a470:	e039      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810a472:	697b      	ldr	r3, [r7, #20]
 810a474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810a478:	2b00      	cmp	r3, #0
 810a47a:	d002      	beq.n	810a482 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810a47c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810a480:	e031      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810a482:	697b      	ldr	r3, [r7, #20]
 810a484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a488:	2b00      	cmp	r3, #0
 810a48a:	d002      	beq.n	810a492 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810a48c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810a490:	e029      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810a492:	697b      	ldr	r3, [r7, #20]
 810a494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810a498:	2b00      	cmp	r3, #0
 810a49a:	d002      	beq.n	810a4a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810a49c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810a4a0:	e021      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810a4a2:	697b      	ldr	r3, [r7, #20]
 810a4a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810a4a8:	2b00      	cmp	r3, #0
 810a4aa:	d002      	beq.n	810a4b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810a4ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 810a4b0:	e019      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810a4b2:	697b      	ldr	r3, [r7, #20]
 810a4b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810a4b8:	2b00      	cmp	r3, #0
 810a4ba:	d002      	beq.n	810a4c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810a4bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 810a4c0:	e011      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810a4c2:	697b      	ldr	r3, [r7, #20]
 810a4c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810a4c8:	2b00      	cmp	r3, #0
 810a4ca:	d002      	beq.n	810a4d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810a4cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 810a4d0:	e009      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810a4d2:	697b      	ldr	r3, [r7, #20]
 810a4d4:	f003 0308 	and.w	r3, r3, #8
 810a4d8:	2b00      	cmp	r3, #0
 810a4da:	d002      	beq.n	810a4e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810a4dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 810a4e0:	e001      	b.n	810a4e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810a4e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810a4e6:	4618      	mov	r0, r3
 810a4e8:	3720      	adds	r7, #32
 810a4ea:	46bd      	mov	sp, r7
 810a4ec:	bd80      	pop	{r7, pc}
 810a4ee:	bf00      	nop
 810a4f0:	10000000 	.word	0x10000000
 810a4f4:	10624dd3 	.word	0x10624dd3
 810a4f8:	00200045 	.word	0x00200045
 810a4fc:	002000c5 	.word	0x002000c5
 810a500:	fdffe008 	.word	0xfdffe008

0810a504 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810a504:	b480      	push	{r7}
 810a506:	b085      	sub	sp, #20
 810a508:	af00      	add	r7, sp, #0
 810a50a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a50c:	4b1f      	ldr	r3, [pc, #124]	; (810a58c <SDMMC_GetCmdResp2+0x88>)
 810a50e:	681b      	ldr	r3, [r3, #0]
 810a510:	4a1f      	ldr	r2, [pc, #124]	; (810a590 <SDMMC_GetCmdResp2+0x8c>)
 810a512:	fba2 2303 	umull	r2, r3, r2, r3
 810a516:	0a5b      	lsrs	r3, r3, #9
 810a518:	f241 3288 	movw	r2, #5000	; 0x1388
 810a51c:	fb02 f303 	mul.w	r3, r2, r3
 810a520:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a522:	68fb      	ldr	r3, [r7, #12]
 810a524:	1e5a      	subs	r2, r3, #1
 810a526:	60fa      	str	r2, [r7, #12]
 810a528:	2b00      	cmp	r3, #0
 810a52a:	d102      	bne.n	810a532 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a52c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a530:	e026      	b.n	810a580 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810a532:	687b      	ldr	r3, [r7, #4]
 810a534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a536:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a538:	68bb      	ldr	r3, [r7, #8]
 810a53a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a53e:	2b00      	cmp	r3, #0
 810a540:	d0ef      	beq.n	810a522 <SDMMC_GetCmdResp2+0x1e>
 810a542:	68bb      	ldr	r3, [r7, #8]
 810a544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a548:	2b00      	cmp	r3, #0
 810a54a:	d1ea      	bne.n	810a522 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a54c:	687b      	ldr	r3, [r7, #4]
 810a54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a550:	f003 0304 	and.w	r3, r3, #4
 810a554:	2b00      	cmp	r3, #0
 810a556:	d004      	beq.n	810a562 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a558:	687b      	ldr	r3, [r7, #4]
 810a55a:	2204      	movs	r2, #4
 810a55c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a55e:	2304      	movs	r3, #4
 810a560:	e00e      	b.n	810a580 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a566:	f003 0301 	and.w	r3, r3, #1
 810a56a:	2b00      	cmp	r3, #0
 810a56c:	d004      	beq.n	810a578 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a56e:	687b      	ldr	r3, [r7, #4]
 810a570:	2201      	movs	r2, #1
 810a572:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a574:	2301      	movs	r3, #1
 810a576:	e003      	b.n	810a580 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a578:	687b      	ldr	r3, [r7, #4]
 810a57a:	4a06      	ldr	r2, [pc, #24]	; (810a594 <SDMMC_GetCmdResp2+0x90>)
 810a57c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810a57e:	2300      	movs	r3, #0
}
 810a580:	4618      	mov	r0, r3
 810a582:	3714      	adds	r7, #20
 810a584:	46bd      	mov	sp, r7
 810a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a58a:	4770      	bx	lr
 810a58c:	10000000 	.word	0x10000000
 810a590:	10624dd3 	.word	0x10624dd3
 810a594:	002000c5 	.word	0x002000c5

0810a598 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810a598:	b480      	push	{r7}
 810a59a:	b085      	sub	sp, #20
 810a59c:	af00      	add	r7, sp, #0
 810a59e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a5a0:	4b1a      	ldr	r3, [pc, #104]	; (810a60c <SDMMC_GetCmdResp3+0x74>)
 810a5a2:	681b      	ldr	r3, [r3, #0]
 810a5a4:	4a1a      	ldr	r2, [pc, #104]	; (810a610 <SDMMC_GetCmdResp3+0x78>)
 810a5a6:	fba2 2303 	umull	r2, r3, r2, r3
 810a5aa:	0a5b      	lsrs	r3, r3, #9
 810a5ac:	f241 3288 	movw	r2, #5000	; 0x1388
 810a5b0:	fb02 f303 	mul.w	r3, r2, r3
 810a5b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a5b6:	68fb      	ldr	r3, [r7, #12]
 810a5b8:	1e5a      	subs	r2, r3, #1
 810a5ba:	60fa      	str	r2, [r7, #12]
 810a5bc:	2b00      	cmp	r3, #0
 810a5be:	d102      	bne.n	810a5c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a5c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a5c4:	e01b      	b.n	810a5fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810a5c6:	687b      	ldr	r3, [r7, #4]
 810a5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a5ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a5cc:	68bb      	ldr	r3, [r7, #8]
 810a5ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a5d2:	2b00      	cmp	r3, #0
 810a5d4:	d0ef      	beq.n	810a5b6 <SDMMC_GetCmdResp3+0x1e>
 810a5d6:	68bb      	ldr	r3, [r7, #8]
 810a5d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a5dc:	2b00      	cmp	r3, #0
 810a5de:	d1ea      	bne.n	810a5b6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a5e0:	687b      	ldr	r3, [r7, #4]
 810a5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a5e4:	f003 0304 	and.w	r3, r3, #4
 810a5e8:	2b00      	cmp	r3, #0
 810a5ea:	d004      	beq.n	810a5f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a5ec:	687b      	ldr	r3, [r7, #4]
 810a5ee:	2204      	movs	r2, #4
 810a5f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a5f2:	2304      	movs	r3, #4
 810a5f4:	e003      	b.n	810a5fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a5f6:	687b      	ldr	r3, [r7, #4]
 810a5f8:	4a06      	ldr	r2, [pc, #24]	; (810a614 <SDMMC_GetCmdResp3+0x7c>)
 810a5fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810a5fc:	2300      	movs	r3, #0
}
 810a5fe:	4618      	mov	r0, r3
 810a600:	3714      	adds	r7, #20
 810a602:	46bd      	mov	sp, r7
 810a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a608:	4770      	bx	lr
 810a60a:	bf00      	nop
 810a60c:	10000000 	.word	0x10000000
 810a610:	10624dd3 	.word	0x10624dd3
 810a614:	002000c5 	.word	0x002000c5

0810a618 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810a618:	b580      	push	{r7, lr}
 810a61a:	b088      	sub	sp, #32
 810a61c:	af00      	add	r7, sp, #0
 810a61e:	60f8      	str	r0, [r7, #12]
 810a620:	460b      	mov	r3, r1
 810a622:	607a      	str	r2, [r7, #4]
 810a624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a626:	4b35      	ldr	r3, [pc, #212]	; (810a6fc <SDMMC_GetCmdResp6+0xe4>)
 810a628:	681b      	ldr	r3, [r3, #0]
 810a62a:	4a35      	ldr	r2, [pc, #212]	; (810a700 <SDMMC_GetCmdResp6+0xe8>)
 810a62c:	fba2 2303 	umull	r2, r3, r2, r3
 810a630:	0a5b      	lsrs	r3, r3, #9
 810a632:	f241 3288 	movw	r2, #5000	; 0x1388
 810a636:	fb02 f303 	mul.w	r3, r2, r3
 810a63a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810a63c:	69fb      	ldr	r3, [r7, #28]
 810a63e:	1e5a      	subs	r2, r3, #1
 810a640:	61fa      	str	r2, [r7, #28]
 810a642:	2b00      	cmp	r3, #0
 810a644:	d102      	bne.n	810a64c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a646:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a64a:	e052      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810a64c:	68fb      	ldr	r3, [r7, #12]
 810a64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a650:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a652:	69bb      	ldr	r3, [r7, #24]
 810a654:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a658:	2b00      	cmp	r3, #0
 810a65a:	d0ef      	beq.n	810a63c <SDMMC_GetCmdResp6+0x24>
 810a65c:	69bb      	ldr	r3, [r7, #24]
 810a65e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a662:	2b00      	cmp	r3, #0
 810a664:	d1ea      	bne.n	810a63c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a666:	68fb      	ldr	r3, [r7, #12]
 810a668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a66a:	f003 0304 	and.w	r3, r3, #4
 810a66e:	2b00      	cmp	r3, #0
 810a670:	d004      	beq.n	810a67c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a672:	68fb      	ldr	r3, [r7, #12]
 810a674:	2204      	movs	r2, #4
 810a676:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a678:	2304      	movs	r3, #4
 810a67a:	e03a      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a67c:	68fb      	ldr	r3, [r7, #12]
 810a67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a680:	f003 0301 	and.w	r3, r3, #1
 810a684:	2b00      	cmp	r3, #0
 810a686:	d004      	beq.n	810a692 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a688:	68fb      	ldr	r3, [r7, #12]
 810a68a:	2201      	movs	r2, #1
 810a68c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a68e:	2301      	movs	r3, #1
 810a690:	e02f      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810a692:	68f8      	ldr	r0, [r7, #12]
 810a694:	f7ff fb7c 	bl	8109d90 <SDMMC_GetCommandResponse>
 810a698:	4603      	mov	r3, r0
 810a69a:	461a      	mov	r2, r3
 810a69c:	7afb      	ldrb	r3, [r7, #11]
 810a69e:	4293      	cmp	r3, r2
 810a6a0:	d001      	beq.n	810a6a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a6a2:	2301      	movs	r3, #1
 810a6a4:	e025      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a6a6:	68fb      	ldr	r3, [r7, #12]
 810a6a8:	4a16      	ldr	r2, [pc, #88]	; (810a704 <SDMMC_GetCmdResp6+0xec>)
 810a6aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810a6ac:	2100      	movs	r1, #0
 810a6ae:	68f8      	ldr	r0, [r7, #12]
 810a6b0:	f7ff fb7b 	bl	8109daa <SDMMC_GetResponse>
 810a6b4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810a6b6:	697b      	ldr	r3, [r7, #20]
 810a6b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810a6bc:	2b00      	cmp	r3, #0
 810a6be:	d106      	bne.n	810a6ce <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810a6c0:	697b      	ldr	r3, [r7, #20]
 810a6c2:	0c1b      	lsrs	r3, r3, #16
 810a6c4:	b29a      	uxth	r2, r3
 810a6c6:	687b      	ldr	r3, [r7, #4]
 810a6c8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810a6ca:	2300      	movs	r3, #0
 810a6cc:	e011      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810a6ce:	697b      	ldr	r3, [r7, #20]
 810a6d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810a6d4:	2b00      	cmp	r3, #0
 810a6d6:	d002      	beq.n	810a6de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810a6d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810a6dc:	e009      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810a6de:	697b      	ldr	r3, [r7, #20]
 810a6e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810a6e4:	2b00      	cmp	r3, #0
 810a6e6:	d002      	beq.n	810a6ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810a6e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810a6ec:	e001      	b.n	810a6f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810a6ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 810a6f2:	4618      	mov	r0, r3
 810a6f4:	3720      	adds	r7, #32
 810a6f6:	46bd      	mov	sp, r7
 810a6f8:	bd80      	pop	{r7, pc}
 810a6fa:	bf00      	nop
 810a6fc:	10000000 	.word	0x10000000
 810a700:	10624dd3 	.word	0x10624dd3
 810a704:	002000c5 	.word	0x002000c5

0810a708 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810a708:	b480      	push	{r7}
 810a70a:	b085      	sub	sp, #20
 810a70c:	af00      	add	r7, sp, #0
 810a70e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a710:	4b22      	ldr	r3, [pc, #136]	; (810a79c <SDMMC_GetCmdResp7+0x94>)
 810a712:	681b      	ldr	r3, [r3, #0]
 810a714:	4a22      	ldr	r2, [pc, #136]	; (810a7a0 <SDMMC_GetCmdResp7+0x98>)
 810a716:	fba2 2303 	umull	r2, r3, r2, r3
 810a71a:	0a5b      	lsrs	r3, r3, #9
 810a71c:	f241 3288 	movw	r2, #5000	; 0x1388
 810a720:	fb02 f303 	mul.w	r3, r2, r3
 810a724:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a726:	68fb      	ldr	r3, [r7, #12]
 810a728:	1e5a      	subs	r2, r3, #1
 810a72a:	60fa      	str	r2, [r7, #12]
 810a72c:	2b00      	cmp	r3, #0
 810a72e:	d102      	bne.n	810a736 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a734:	e02c      	b.n	810a790 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810a736:	687b      	ldr	r3, [r7, #4]
 810a738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a73a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a73c:	68bb      	ldr	r3, [r7, #8]
 810a73e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a742:	2b00      	cmp	r3, #0
 810a744:	d0ef      	beq.n	810a726 <SDMMC_GetCmdResp7+0x1e>
 810a746:	68bb      	ldr	r3, [r7, #8]
 810a748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a74c:	2b00      	cmp	r3, #0
 810a74e:	d1ea      	bne.n	810a726 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a750:	687b      	ldr	r3, [r7, #4]
 810a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a754:	f003 0304 	and.w	r3, r3, #4
 810a758:	2b00      	cmp	r3, #0
 810a75a:	d004      	beq.n	810a766 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a75c:	687b      	ldr	r3, [r7, #4]
 810a75e:	2204      	movs	r2, #4
 810a760:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a762:	2304      	movs	r3, #4
 810a764:	e014      	b.n	810a790 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a76a:	f003 0301 	and.w	r3, r3, #1
 810a76e:	2b00      	cmp	r3, #0
 810a770:	d004      	beq.n	810a77c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a772:	687b      	ldr	r3, [r7, #4]
 810a774:	2201      	movs	r2, #1
 810a776:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a778:	2301      	movs	r3, #1
 810a77a:	e009      	b.n	810a790 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810a77c:	687b      	ldr	r3, [r7, #4]
 810a77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a784:	2b00      	cmp	r3, #0
 810a786:	d002      	beq.n	810a78e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810a788:	687b      	ldr	r3, [r7, #4]
 810a78a:	2240      	movs	r2, #64	; 0x40
 810a78c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 810a78e:	2300      	movs	r3, #0

}
 810a790:	4618      	mov	r0, r3
 810a792:	3714      	adds	r7, #20
 810a794:	46bd      	mov	sp, r7
 810a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a79a:	4770      	bx	lr
 810a79c:	10000000 	.word	0x10000000
 810a7a0:	10624dd3 	.word	0x10624dd3

0810a7a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810a7a4:	b480      	push	{r7}
 810a7a6:	b085      	sub	sp, #20
 810a7a8:	af00      	add	r7, sp, #0
 810a7aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a7ac:	4b11      	ldr	r3, [pc, #68]	; (810a7f4 <SDMMC_GetCmdError+0x50>)
 810a7ae:	681b      	ldr	r3, [r3, #0]
 810a7b0:	4a11      	ldr	r2, [pc, #68]	; (810a7f8 <SDMMC_GetCmdError+0x54>)
 810a7b2:	fba2 2303 	umull	r2, r3, r2, r3
 810a7b6:	0a5b      	lsrs	r3, r3, #9
 810a7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 810a7bc:	fb02 f303 	mul.w	r3, r2, r3
 810a7c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a7c2:	68fb      	ldr	r3, [r7, #12]
 810a7c4:	1e5a      	subs	r2, r3, #1
 810a7c6:	60fa      	str	r2, [r7, #12]
 810a7c8:	2b00      	cmp	r3, #0
 810a7ca:	d102      	bne.n	810a7d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a7cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810a7d0:	e009      	b.n	810a7e6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810a7d2:	687b      	ldr	r3, [r7, #4]
 810a7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a7d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a7da:	2b00      	cmp	r3, #0
 810a7dc:	d0f1      	beq.n	810a7c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a7de:	687b      	ldr	r3, [r7, #4]
 810a7e0:	4a06      	ldr	r2, [pc, #24]	; (810a7fc <SDMMC_GetCmdError+0x58>)
 810a7e2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 810a7e4:	2300      	movs	r3, #0
}
 810a7e6:	4618      	mov	r0, r3
 810a7e8:	3714      	adds	r7, #20
 810a7ea:	46bd      	mov	sp, r7
 810a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7f0:	4770      	bx	lr
 810a7f2:	bf00      	nop
 810a7f4:	10000000 	.word	0x10000000
 810a7f8:	10624dd3 	.word	0x10624dd3
 810a7fc:	002000c5 	.word	0x002000c5

0810a800 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810a800:	b084      	sub	sp, #16
 810a802:	b580      	push	{r7, lr}
 810a804:	b084      	sub	sp, #16
 810a806:	af00      	add	r7, sp, #0
 810a808:	6078      	str	r0, [r7, #4]
 810a80a:	f107 001c 	add.w	r0, r7, #28
 810a80e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810a812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a814:	2b01      	cmp	r3, #1
 810a816:	d122      	bne.n	810a85e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810a818:	687b      	ldr	r3, [r7, #4]
 810a81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a81c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810a824:	687b      	ldr	r3, [r7, #4]
 810a826:	68db      	ldr	r3, [r3, #12]
 810a828:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810a82c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810a830:	687a      	ldr	r2, [r7, #4]
 810a832:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810a834:	687b      	ldr	r3, [r7, #4]
 810a836:	68db      	ldr	r3, [r3, #12]
 810a838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a842:	2b01      	cmp	r3, #1
 810a844:	d105      	bne.n	810a852 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810a846:	687b      	ldr	r3, [r7, #4]
 810a848:	68db      	ldr	r3, [r3, #12]
 810a84a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810a852:	6878      	ldr	r0, [r7, #4]
 810a854:	f000 f98e 	bl	810ab74 <USB_CoreReset>
 810a858:	4603      	mov	r3, r0
 810a85a:	73fb      	strb	r3, [r7, #15]
 810a85c:	e01a      	b.n	810a894 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810a85e:	687b      	ldr	r3, [r7, #4]
 810a860:	68db      	ldr	r3, [r3, #12]
 810a862:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810a866:	687b      	ldr	r3, [r7, #4]
 810a868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810a86a:	6878      	ldr	r0, [r7, #4]
 810a86c:	f000 f982 	bl	810ab74 <USB_CoreReset>
 810a870:	4603      	mov	r3, r0
 810a872:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810a874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810a876:	2b00      	cmp	r3, #0
 810a878:	d106      	bne.n	810a888 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810a87a:	687b      	ldr	r3, [r7, #4]
 810a87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a87e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810a882:	687b      	ldr	r3, [r7, #4]
 810a884:	639a      	str	r2, [r3, #56]	; 0x38
 810a886:	e005      	b.n	810a894 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810a888:	687b      	ldr	r3, [r7, #4]
 810a88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a88c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810a890:	687b      	ldr	r3, [r7, #4]
 810a892:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a896:	2b01      	cmp	r3, #1
 810a898:	d118      	bne.n	810a8cc <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810a89a:	687b      	ldr	r3, [r7, #4]
 810a89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a89e:	b29a      	uxth	r2, r3
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810a8a4:	687b      	ldr	r3, [r7, #4]
 810a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a8a8:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 810a8ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a8b0:	687a      	ldr	r2, [r7, #4]
 810a8b2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810a8b4:	687b      	ldr	r3, [r7, #4]
 810a8b6:	689b      	ldr	r3, [r3, #8]
 810a8b8:	f043 0206 	orr.w	r2, r3, #6
 810a8bc:	687b      	ldr	r3, [r7, #4]
 810a8be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810a8c0:	687b      	ldr	r3, [r7, #4]
 810a8c2:	689b      	ldr	r3, [r3, #8]
 810a8c4:	f043 0220 	orr.w	r2, r3, #32
 810a8c8:	687b      	ldr	r3, [r7, #4]
 810a8ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810a8cc:	7bfb      	ldrb	r3, [r7, #15]
}
 810a8ce:	4618      	mov	r0, r3
 810a8d0:	3710      	adds	r7, #16
 810a8d2:	46bd      	mov	sp, r7
 810a8d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810a8d8:	b004      	add	sp, #16
 810a8da:	4770      	bx	lr

0810a8dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810a8dc:	b480      	push	{r7}
 810a8de:	b083      	sub	sp, #12
 810a8e0:	af00      	add	r7, sp, #0
 810a8e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 810a8e4:	687b      	ldr	r3, [r7, #4]
 810a8e6:	689b      	ldr	r3, [r3, #8]
 810a8e8:	f043 0201 	orr.w	r2, r3, #1
 810a8ec:	687b      	ldr	r3, [r7, #4]
 810a8ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810a8f0:	2300      	movs	r3, #0
}
 810a8f2:	4618      	mov	r0, r3
 810a8f4:	370c      	adds	r7, #12
 810a8f6:	46bd      	mov	sp, r7
 810a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a8fc:	4770      	bx	lr

0810a8fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810a8fe:	b480      	push	{r7}
 810a900:	b083      	sub	sp, #12
 810a902:	af00      	add	r7, sp, #0
 810a904:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810a906:	687b      	ldr	r3, [r7, #4]
 810a908:	689b      	ldr	r3, [r3, #8]
 810a90a:	f023 0201 	bic.w	r2, r3, #1
 810a90e:	687b      	ldr	r3, [r7, #4]
 810a910:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810a912:	2300      	movs	r3, #0
}
 810a914:	4618      	mov	r0, r3
 810a916:	370c      	adds	r7, #12
 810a918:	46bd      	mov	sp, r7
 810a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a91e:	4770      	bx	lr

0810a920 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810a920:	b580      	push	{r7, lr}
 810a922:	b082      	sub	sp, #8
 810a924:	af00      	add	r7, sp, #0
 810a926:	6078      	str	r0, [r7, #4]
 810a928:	460b      	mov	r3, r1
 810a92a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810a92c:	687b      	ldr	r3, [r7, #4]
 810a92e:	68db      	ldr	r3, [r3, #12]
 810a930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 810a934:	687b      	ldr	r3, [r7, #4]
 810a936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810a938:	78fb      	ldrb	r3, [r7, #3]
 810a93a:	2b01      	cmp	r3, #1
 810a93c:	d106      	bne.n	810a94c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810a93e:	687b      	ldr	r3, [r7, #4]
 810a940:	68db      	ldr	r3, [r3, #12]
 810a942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810a946:	687b      	ldr	r3, [r7, #4]
 810a948:	60da      	str	r2, [r3, #12]
 810a94a:	e00b      	b.n	810a964 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 810a94c:	78fb      	ldrb	r3, [r7, #3]
 810a94e:	2b00      	cmp	r3, #0
 810a950:	d106      	bne.n	810a960 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810a952:	687b      	ldr	r3, [r7, #4]
 810a954:	68db      	ldr	r3, [r3, #12]
 810a956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810a95a:	687b      	ldr	r3, [r7, #4]
 810a95c:	60da      	str	r2, [r3, #12]
 810a95e:	e001      	b.n	810a964 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 810a960:	2301      	movs	r3, #1
 810a962:	e003      	b.n	810a96c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 810a964:	2032      	movs	r0, #50	; 0x32
 810a966:	f7f6 fd53 	bl	8101410 <HAL_Delay>

  return HAL_OK;
 810a96a:	2300      	movs	r3, #0
}
 810a96c:	4618      	mov	r0, r3
 810a96e:	3708      	adds	r7, #8
 810a970:	46bd      	mov	sp, r7
 810a972:	bd80      	pop	{r7, pc}

0810a974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810a974:	b480      	push	{r7}
 810a976:	b085      	sub	sp, #20
 810a978:	af00      	add	r7, sp, #0
 810a97a:	6078      	str	r0, [r7, #4]
 810a97c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 810a97e:	2300      	movs	r3, #0
 810a980:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810a982:	683b      	ldr	r3, [r7, #0]
 810a984:	019b      	lsls	r3, r3, #6
 810a986:	f043 0220 	orr.w	r2, r3, #32
 810a98a:	687b      	ldr	r3, [r7, #4]
 810a98c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810a98e:	68fb      	ldr	r3, [r7, #12]
 810a990:	3301      	adds	r3, #1
 810a992:	60fb      	str	r3, [r7, #12]
 810a994:	68fb      	ldr	r3, [r7, #12]
 810a996:	4a09      	ldr	r2, [pc, #36]	; (810a9bc <USB_FlushTxFifo+0x48>)
 810a998:	4293      	cmp	r3, r2
 810a99a:	d901      	bls.n	810a9a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 810a99c:	2303      	movs	r3, #3
 810a99e:	e006      	b.n	810a9ae <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810a9a0:	687b      	ldr	r3, [r7, #4]
 810a9a2:	691b      	ldr	r3, [r3, #16]
 810a9a4:	f003 0320 	and.w	r3, r3, #32
 810a9a8:	2b20      	cmp	r3, #32
 810a9aa:	d0f0      	beq.n	810a98e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 810a9ac:	2300      	movs	r3, #0
}
 810a9ae:	4618      	mov	r0, r3
 810a9b0:	3714      	adds	r7, #20
 810a9b2:	46bd      	mov	sp, r7
 810a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9b8:	4770      	bx	lr
 810a9ba:	bf00      	nop
 810a9bc:	00030d40 	.word	0x00030d40

0810a9c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810a9c0:	b480      	push	{r7}
 810a9c2:	b085      	sub	sp, #20
 810a9c4:	af00      	add	r7, sp, #0
 810a9c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 810a9c8:	2300      	movs	r3, #0
 810a9ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810a9cc:	687b      	ldr	r3, [r7, #4]
 810a9ce:	2210      	movs	r2, #16
 810a9d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810a9d2:	68fb      	ldr	r3, [r7, #12]
 810a9d4:	3301      	adds	r3, #1
 810a9d6:	60fb      	str	r3, [r7, #12]
 810a9d8:	68fb      	ldr	r3, [r7, #12]
 810a9da:	4a09      	ldr	r2, [pc, #36]	; (810aa00 <USB_FlushRxFifo+0x40>)
 810a9dc:	4293      	cmp	r3, r2
 810a9de:	d901      	bls.n	810a9e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 810a9e0:	2303      	movs	r3, #3
 810a9e2:	e006      	b.n	810a9f2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	691b      	ldr	r3, [r3, #16]
 810a9e8:	f003 0310 	and.w	r3, r3, #16
 810a9ec:	2b10      	cmp	r3, #16
 810a9ee:	d0f0      	beq.n	810a9d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 810a9f0:	2300      	movs	r3, #0
}
 810a9f2:	4618      	mov	r0, r3
 810a9f4:	3714      	adds	r7, #20
 810a9f6:	46bd      	mov	sp, r7
 810a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a9fc:	4770      	bx	lr
 810a9fe:	bf00      	nop
 810aa00:	00030d40 	.word	0x00030d40

0810aa04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 810aa04:	b480      	push	{r7}
 810aa06:	b089      	sub	sp, #36	; 0x24
 810aa08:	af00      	add	r7, sp, #0
 810aa0a:	60f8      	str	r0, [r7, #12]
 810aa0c:	60b9      	str	r1, [r7, #8]
 810aa0e:	4611      	mov	r1, r2
 810aa10:	461a      	mov	r2, r3
 810aa12:	460b      	mov	r3, r1
 810aa14:	71fb      	strb	r3, [r7, #7]
 810aa16:	4613      	mov	r3, r2
 810aa18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810aa1a:	68fb      	ldr	r3, [r7, #12]
 810aa1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 810aa1e:	68bb      	ldr	r3, [r7, #8]
 810aa20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 810aa22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 810aa26:	2b00      	cmp	r3, #0
 810aa28:	d123      	bne.n	810aa72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 810aa2a:	88bb      	ldrh	r3, [r7, #4]
 810aa2c:	3303      	adds	r3, #3
 810aa2e:	089b      	lsrs	r3, r3, #2
 810aa30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 810aa32:	2300      	movs	r3, #0
 810aa34:	61bb      	str	r3, [r7, #24]
 810aa36:	e018      	b.n	810aa6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 810aa38:	79fb      	ldrb	r3, [r7, #7]
 810aa3a:	031a      	lsls	r2, r3, #12
 810aa3c:	697b      	ldr	r3, [r7, #20]
 810aa3e:	4413      	add	r3, r2
 810aa40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810aa44:	461a      	mov	r2, r3
 810aa46:	69fb      	ldr	r3, [r7, #28]
 810aa48:	681b      	ldr	r3, [r3, #0]
 810aa4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 810aa4c:	69fb      	ldr	r3, [r7, #28]
 810aa4e:	3301      	adds	r3, #1
 810aa50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810aa52:	69fb      	ldr	r3, [r7, #28]
 810aa54:	3301      	adds	r3, #1
 810aa56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810aa58:	69fb      	ldr	r3, [r7, #28]
 810aa5a:	3301      	adds	r3, #1
 810aa5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810aa5e:	69fb      	ldr	r3, [r7, #28]
 810aa60:	3301      	adds	r3, #1
 810aa62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 810aa64:	69bb      	ldr	r3, [r7, #24]
 810aa66:	3301      	adds	r3, #1
 810aa68:	61bb      	str	r3, [r7, #24]
 810aa6a:	69ba      	ldr	r2, [r7, #24]
 810aa6c:	693b      	ldr	r3, [r7, #16]
 810aa6e:	429a      	cmp	r2, r3
 810aa70:	d3e2      	bcc.n	810aa38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 810aa72:	2300      	movs	r3, #0
}
 810aa74:	4618      	mov	r0, r3
 810aa76:	3724      	adds	r7, #36	; 0x24
 810aa78:	46bd      	mov	sp, r7
 810aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa7e:	4770      	bx	lr

0810aa80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 810aa80:	b480      	push	{r7}
 810aa82:	b08b      	sub	sp, #44	; 0x2c
 810aa84:	af00      	add	r7, sp, #0
 810aa86:	60f8      	str	r0, [r7, #12]
 810aa88:	60b9      	str	r1, [r7, #8]
 810aa8a:	4613      	mov	r3, r2
 810aa8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810aa8e:	68fb      	ldr	r3, [r7, #12]
 810aa90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 810aa92:	68bb      	ldr	r3, [r7, #8]
 810aa94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 810aa96:	88fb      	ldrh	r3, [r7, #6]
 810aa98:	089b      	lsrs	r3, r3, #2
 810aa9a:	b29b      	uxth	r3, r3
 810aa9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 810aa9e:	88fb      	ldrh	r3, [r7, #6]
 810aaa0:	f003 0303 	and.w	r3, r3, #3
 810aaa4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 810aaa6:	2300      	movs	r3, #0
 810aaa8:	623b      	str	r3, [r7, #32]
 810aaaa:	e014      	b.n	810aad6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 810aaac:	69bb      	ldr	r3, [r7, #24]
 810aaae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810aab2:	681a      	ldr	r2, [r3, #0]
 810aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aab6:	601a      	str	r2, [r3, #0]
    pDest++;
 810aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aaba:	3301      	adds	r3, #1
 810aabc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 810aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aac0:	3301      	adds	r3, #1
 810aac2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 810aac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aac6:	3301      	adds	r3, #1
 810aac8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 810aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aacc:	3301      	adds	r3, #1
 810aace:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 810aad0:	6a3b      	ldr	r3, [r7, #32]
 810aad2:	3301      	adds	r3, #1
 810aad4:	623b      	str	r3, [r7, #32]
 810aad6:	6a3a      	ldr	r2, [r7, #32]
 810aad8:	697b      	ldr	r3, [r7, #20]
 810aada:	429a      	cmp	r2, r3
 810aadc:	d3e6      	bcc.n	810aaac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 810aade:	8bfb      	ldrh	r3, [r7, #30]
 810aae0:	2b00      	cmp	r3, #0
 810aae2:	d01e      	beq.n	810ab22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 810aae4:	2300      	movs	r3, #0
 810aae6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 810aae8:	69bb      	ldr	r3, [r7, #24]
 810aaea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810aaee:	461a      	mov	r2, r3
 810aaf0:	f107 0310 	add.w	r3, r7, #16
 810aaf4:	6812      	ldr	r2, [r2, #0]
 810aaf6:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 810aaf8:	693a      	ldr	r2, [r7, #16]
 810aafa:	6a3b      	ldr	r3, [r7, #32]
 810aafc:	b2db      	uxtb	r3, r3
 810aafe:	00db      	lsls	r3, r3, #3
 810ab00:	fa22 f303 	lsr.w	r3, r2, r3
 810ab04:	b2da      	uxtb	r2, r3
 810ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ab08:	701a      	strb	r2, [r3, #0]
      i++;
 810ab0a:	6a3b      	ldr	r3, [r7, #32]
 810ab0c:	3301      	adds	r3, #1
 810ab0e:	623b      	str	r3, [r7, #32]
      pDest++;
 810ab10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ab12:	3301      	adds	r3, #1
 810ab14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 810ab16:	8bfb      	ldrh	r3, [r7, #30]
 810ab18:	3b01      	subs	r3, #1
 810ab1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 810ab1c:	8bfb      	ldrh	r3, [r7, #30]
 810ab1e:	2b00      	cmp	r3, #0
 810ab20:	d1ea      	bne.n	810aaf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 810ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810ab24:	4618      	mov	r0, r3
 810ab26:	372c      	adds	r7, #44	; 0x2c
 810ab28:	46bd      	mov	sp, r7
 810ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab2e:	4770      	bx	lr

0810ab30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 810ab30:	b480      	push	{r7}
 810ab32:	b085      	sub	sp, #20
 810ab34:	af00      	add	r7, sp, #0
 810ab36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 810ab38:	687b      	ldr	r3, [r7, #4]
 810ab3a:	695b      	ldr	r3, [r3, #20]
 810ab3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 810ab3e:	687b      	ldr	r3, [r7, #4]
 810ab40:	699b      	ldr	r3, [r3, #24]
 810ab42:	68fa      	ldr	r2, [r7, #12]
 810ab44:	4013      	ands	r3, r2
 810ab46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 810ab48:	68fb      	ldr	r3, [r7, #12]
}
 810ab4a:	4618      	mov	r0, r3
 810ab4c:	3714      	adds	r7, #20
 810ab4e:	46bd      	mov	sp, r7
 810ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab54:	4770      	bx	lr

0810ab56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 810ab56:	b480      	push	{r7}
 810ab58:	b083      	sub	sp, #12
 810ab5a:	af00      	add	r7, sp, #0
 810ab5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810ab5e:	687b      	ldr	r3, [r7, #4]
 810ab60:	695b      	ldr	r3, [r3, #20]
 810ab62:	f003 0301 	and.w	r3, r3, #1
}
 810ab66:	4618      	mov	r0, r3
 810ab68:	370c      	adds	r7, #12
 810ab6a:	46bd      	mov	sp, r7
 810ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab70:	4770      	bx	lr
	...

0810ab74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810ab74:	b480      	push	{r7}
 810ab76:	b085      	sub	sp, #20
 810ab78:	af00      	add	r7, sp, #0
 810ab7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 810ab7c:	2300      	movs	r3, #0
 810ab7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 810ab80:	68fb      	ldr	r3, [r7, #12]
 810ab82:	3301      	adds	r3, #1
 810ab84:	60fb      	str	r3, [r7, #12]
 810ab86:	68fb      	ldr	r3, [r7, #12]
 810ab88:	4a13      	ldr	r2, [pc, #76]	; (810abd8 <USB_CoreReset+0x64>)
 810ab8a:	4293      	cmp	r3, r2
 810ab8c:	d901      	bls.n	810ab92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810ab8e:	2303      	movs	r3, #3
 810ab90:	e01b      	b.n	810abca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	691b      	ldr	r3, [r3, #16]
 810ab96:	2b00      	cmp	r3, #0
 810ab98:	daf2      	bge.n	810ab80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810ab9a:	2300      	movs	r3, #0
 810ab9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	691b      	ldr	r3, [r3, #16]
 810aba2:	f043 0201 	orr.w	r2, r3, #1
 810aba6:	687b      	ldr	r3, [r7, #4]
 810aba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 810abaa:	68fb      	ldr	r3, [r7, #12]
 810abac:	3301      	adds	r3, #1
 810abae:	60fb      	str	r3, [r7, #12]
 810abb0:	68fb      	ldr	r3, [r7, #12]
 810abb2:	4a09      	ldr	r2, [pc, #36]	; (810abd8 <USB_CoreReset+0x64>)
 810abb4:	4293      	cmp	r3, r2
 810abb6:	d901      	bls.n	810abbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810abb8:	2303      	movs	r3, #3
 810abba:	e006      	b.n	810abca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810abbc:	687b      	ldr	r3, [r7, #4]
 810abbe:	691b      	ldr	r3, [r3, #16]
 810abc0:	f003 0301 	and.w	r3, r3, #1
 810abc4:	2b01      	cmp	r3, #1
 810abc6:	d0f0      	beq.n	810abaa <USB_CoreReset+0x36>

  return HAL_OK;
 810abc8:	2300      	movs	r3, #0
}
 810abca:	4618      	mov	r0, r3
 810abcc:	3714      	adds	r7, #20
 810abce:	46bd      	mov	sp, r7
 810abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abd4:	4770      	bx	lr
 810abd6:	bf00      	nop
 810abd8:	00030d40 	.word	0x00030d40

0810abdc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810abdc:	b084      	sub	sp, #16
 810abde:	b580      	push	{r7, lr}
 810abe0:	b084      	sub	sp, #16
 810abe2:	af00      	add	r7, sp, #0
 810abe4:	6078      	str	r0, [r7, #4]
 810abe6:	f107 001c 	add.w	r0, r7, #28
 810abea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 810abee:	687b      	ldr	r3, [r7, #4]
 810abf0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810abf2:	68bb      	ldr	r3, [r7, #8]
 810abf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810abf8:	461a      	mov	r2, r3
 810abfa:	2300      	movs	r3, #0
 810abfc:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 810abfe:	687b      	ldr	r3, [r7, #4]
 810ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ac02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 810ac06:	687b      	ldr	r3, [r7, #4]
 810ac08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 810ac0a:	687b      	ldr	r3, [r7, #4]
 810ac0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ac0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 810ac12:	687b      	ldr	r3, [r7, #4]
 810ac14:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 810ac16:	687b      	ldr	r3, [r7, #4]
 810ac18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ac1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810ac1e:	2b00      	cmp	r3, #0
 810ac20:	d018      	beq.n	810ac54 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 810ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac24:	2b01      	cmp	r3, #1
 810ac26:	d10a      	bne.n	810ac3e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 810ac28:	68bb      	ldr	r3, [r7, #8]
 810ac2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ac2e:	681b      	ldr	r3, [r3, #0]
 810ac30:	68ba      	ldr	r2, [r7, #8]
 810ac32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810ac36:	f043 0304 	orr.w	r3, r3, #4
 810ac3a:	6013      	str	r3, [r2, #0]
 810ac3c:	e014      	b.n	810ac68 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 810ac3e:	68bb      	ldr	r3, [r7, #8]
 810ac40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ac44:	681b      	ldr	r3, [r3, #0]
 810ac46:	68ba      	ldr	r2, [r7, #8]
 810ac48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810ac4c:	f023 0304 	bic.w	r3, r3, #4
 810ac50:	6013      	str	r3, [r2, #0]
 810ac52:	e009      	b.n	810ac68 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 810ac54:	68bb      	ldr	r3, [r7, #8]
 810ac56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ac5a:	681b      	ldr	r3, [r3, #0]
 810ac5c:	68ba      	ldr	r2, [r7, #8]
 810ac5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810ac62:	f023 0304 	bic.w	r3, r3, #4
 810ac66:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 810ac68:	2110      	movs	r1, #16
 810ac6a:	6878      	ldr	r0, [r7, #4]
 810ac6c:	f7ff fe82 	bl	810a974 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 810ac70:	6878      	ldr	r0, [r7, #4]
 810ac72:	f7ff fea5 	bl	810a9c0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 810ac76:	2300      	movs	r3, #0
 810ac78:	60fb      	str	r3, [r7, #12]
 810ac7a:	e015      	b.n	810aca8 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 810ac7c:	68fb      	ldr	r3, [r7, #12]
 810ac7e:	015a      	lsls	r2, r3, #5
 810ac80:	68bb      	ldr	r3, [r7, #8]
 810ac82:	4413      	add	r3, r2
 810ac84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810ac88:	461a      	mov	r2, r3
 810ac8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810ac8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 810ac90:	68fb      	ldr	r3, [r7, #12]
 810ac92:	015a      	lsls	r2, r3, #5
 810ac94:	68bb      	ldr	r3, [r7, #8]
 810ac96:	4413      	add	r3, r2
 810ac98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810ac9c:	461a      	mov	r2, r3
 810ac9e:	2300      	movs	r3, #0
 810aca0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 810aca2:	68fb      	ldr	r3, [r7, #12]
 810aca4:	3301      	adds	r3, #1
 810aca6:	60fb      	str	r3, [r7, #12]
 810aca8:	6a3b      	ldr	r3, [r7, #32]
 810acaa:	68fa      	ldr	r2, [r7, #12]
 810acac:	429a      	cmp	r2, r3
 810acae:	d3e5      	bcc.n	810ac7c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 810acb0:	2101      	movs	r1, #1
 810acb2:	6878      	ldr	r0, [r7, #4]
 810acb4:	f000 f882 	bl	810adbc <USB_DriveVbus>

  HAL_Delay(200U);
 810acb8:	20c8      	movs	r0, #200	; 0xc8
 810acba:	f7f6 fba9 	bl	8101410 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810acbe:	687b      	ldr	r3, [r7, #4]
 810acc0:	2200      	movs	r2, #0
 810acc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 810acc4:	687b      	ldr	r3, [r7, #4]
 810acc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810acca:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 810accc:	687b      	ldr	r3, [r7, #4]
 810acce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810acd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810acd4:	2b00      	cmp	r3, #0
 810acd6:	d00b      	beq.n	810acf0 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 810acd8:	687b      	ldr	r3, [r7, #4]
 810acda:	f44f 7200 	mov.w	r2, #512	; 0x200
 810acde:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 810ace0:	687b      	ldr	r3, [r7, #4]
 810ace2:	4a14      	ldr	r2, [pc, #80]	; (810ad34 <USB_HostInit+0x158>)
 810ace4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	4a13      	ldr	r2, [pc, #76]	; (810ad38 <USB_HostInit+0x15c>)
 810acea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 810acee:	e009      	b.n	810ad04 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 810acf0:	687b      	ldr	r3, [r7, #4]
 810acf2:	2280      	movs	r2, #128	; 0x80
 810acf4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 810acf6:	687b      	ldr	r3, [r7, #4]
 810acf8:	4a10      	ldr	r2, [pc, #64]	; (810ad3c <USB_HostInit+0x160>)
 810acfa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 810acfc:	687b      	ldr	r3, [r7, #4]
 810acfe:	4a10      	ldr	r2, [pc, #64]	; (810ad40 <USB_HostInit+0x164>)
 810ad00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad06:	2b00      	cmp	r3, #0
 810ad08:	d105      	bne.n	810ad16 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ad0a:	687b      	ldr	r3, [r7, #4]
 810ad0c:	699b      	ldr	r3, [r3, #24]
 810ad0e:	f043 0210 	orr.w	r2, r3, #16
 810ad12:	687b      	ldr	r3, [r7, #4]
 810ad14:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 810ad16:	687b      	ldr	r3, [r7, #4]
 810ad18:	699a      	ldr	r2, [r3, #24]
 810ad1a:	4b0a      	ldr	r3, [pc, #40]	; (810ad44 <USB_HostInit+0x168>)
 810ad1c:	4313      	orrs	r3, r2
 810ad1e:	687a      	ldr	r2, [r7, #4]
 810ad20:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 810ad22:	2300      	movs	r3, #0
}
 810ad24:	4618      	mov	r0, r3
 810ad26:	3710      	adds	r7, #16
 810ad28:	46bd      	mov	sp, r7
 810ad2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810ad2e:	b004      	add	sp, #16
 810ad30:	4770      	bx	lr
 810ad32:	bf00      	nop
 810ad34:	01000200 	.word	0x01000200
 810ad38:	00e00300 	.word	0x00e00300
 810ad3c:	00600080 	.word	0x00600080
 810ad40:	004000e0 	.word	0x004000e0
 810ad44:	a3200008 	.word	0xa3200008

0810ad48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 810ad48:	b480      	push	{r7}
 810ad4a:	b085      	sub	sp, #20
 810ad4c:	af00      	add	r7, sp, #0
 810ad4e:	6078      	str	r0, [r7, #4]
 810ad50:	460b      	mov	r3, r1
 810ad52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 810ad58:	68fb      	ldr	r3, [r7, #12]
 810ad5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ad5e:	681b      	ldr	r3, [r3, #0]
 810ad60:	68fa      	ldr	r2, [r7, #12]
 810ad62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 810ad66:	f023 0303 	bic.w	r3, r3, #3
 810ad6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 810ad6c:	68fb      	ldr	r3, [r7, #12]
 810ad6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ad72:	681a      	ldr	r2, [r3, #0]
 810ad74:	78fb      	ldrb	r3, [r7, #3]
 810ad76:	f003 0303 	and.w	r3, r3, #3
 810ad7a:	68f9      	ldr	r1, [r7, #12]
 810ad7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 810ad80:	4313      	orrs	r3, r2
 810ad82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 810ad84:	78fb      	ldrb	r3, [r7, #3]
 810ad86:	2b01      	cmp	r3, #1
 810ad88:	d107      	bne.n	810ad9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 810ad8a:	68fb      	ldr	r3, [r7, #12]
 810ad8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ad90:	461a      	mov	r2, r3
 810ad92:	f64b 3380 	movw	r3, #48000	; 0xbb80
 810ad96:	6053      	str	r3, [r2, #4]
 810ad98:	e009      	b.n	810adae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 810ad9a:	78fb      	ldrb	r3, [r7, #3]
 810ad9c:	2b02      	cmp	r3, #2
 810ad9e:	d106      	bne.n	810adae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 810ada0:	68fb      	ldr	r3, [r7, #12]
 810ada2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ada6:	461a      	mov	r2, r3
 810ada8:	f241 7370 	movw	r3, #6000	; 0x1770
 810adac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 810adae:	2300      	movs	r3, #0
}
 810adb0:	4618      	mov	r0, r3
 810adb2:	3714      	adds	r7, #20
 810adb4:	46bd      	mov	sp, r7
 810adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810adba:	4770      	bx	lr

0810adbc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 810adbc:	b480      	push	{r7}
 810adbe:	b085      	sub	sp, #20
 810adc0:	af00      	add	r7, sp, #0
 810adc2:	6078      	str	r0, [r7, #4]
 810adc4:	460b      	mov	r3, r1
 810adc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810adc8:	687b      	ldr	r3, [r7, #4]
 810adca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 810adcc:	2300      	movs	r3, #0
 810adce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 810add0:	68fb      	ldr	r3, [r7, #12]
 810add2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 810add6:	681b      	ldr	r3, [r3, #0]
 810add8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 810adda:	68bb      	ldr	r3, [r7, #8]
 810addc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 810ade0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 810ade2:	68bb      	ldr	r3, [r7, #8]
 810ade4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810ade8:	2b00      	cmp	r3, #0
 810adea:	d109      	bne.n	810ae00 <USB_DriveVbus+0x44>
 810adec:	78fb      	ldrb	r3, [r7, #3]
 810adee:	2b01      	cmp	r3, #1
 810adf0:	d106      	bne.n	810ae00 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 810adf2:	68bb      	ldr	r3, [r7, #8]
 810adf4:	68fa      	ldr	r2, [r7, #12]
 810adf6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 810adfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 810adfe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 810ae00:	68bb      	ldr	r3, [r7, #8]
 810ae02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810ae06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810ae0a:	d109      	bne.n	810ae20 <USB_DriveVbus+0x64>
 810ae0c:	78fb      	ldrb	r3, [r7, #3]
 810ae0e:	2b00      	cmp	r3, #0
 810ae10:	d106      	bne.n	810ae20 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 810ae12:	68bb      	ldr	r3, [r7, #8]
 810ae14:	68fa      	ldr	r2, [r7, #12]
 810ae16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 810ae1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810ae1e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 810ae20:	2300      	movs	r3, #0
}
 810ae22:	4618      	mov	r0, r3
 810ae24:	3714      	adds	r7, #20
 810ae26:	46bd      	mov	sp, r7
 810ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae2c:	4770      	bx	lr

0810ae2e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 810ae2e:	b480      	push	{r7}
 810ae30:	b085      	sub	sp, #20
 810ae32:	af00      	add	r7, sp, #0
 810ae34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ae36:	687b      	ldr	r3, [r7, #4]
 810ae38:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 810ae3a:	2300      	movs	r3, #0
 810ae3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 810ae3e:	68fb      	ldr	r3, [r7, #12]
 810ae40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 810ae44:	681b      	ldr	r3, [r3, #0]
 810ae46:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 810ae48:	68bb      	ldr	r3, [r7, #8]
 810ae4a:	0c5b      	lsrs	r3, r3, #17
 810ae4c:	f003 0303 	and.w	r3, r3, #3
}
 810ae50:	4618      	mov	r0, r3
 810ae52:	3714      	adds	r7, #20
 810ae54:	46bd      	mov	sp, r7
 810ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae5a:	4770      	bx	lr

0810ae5c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 810ae5c:	b480      	push	{r7}
 810ae5e:	b085      	sub	sp, #20
 810ae60:	af00      	add	r7, sp, #0
 810ae62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ae64:	687b      	ldr	r3, [r7, #4]
 810ae66:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 810ae68:	68fb      	ldr	r3, [r7, #12]
 810ae6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810ae6e:	689b      	ldr	r3, [r3, #8]
 810ae70:	b29b      	uxth	r3, r3
}
 810ae72:	4618      	mov	r0, r3
 810ae74:	3714      	adds	r7, #20
 810ae76:	46bd      	mov	sp, r7
 810ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae7c:	4770      	bx	lr
	...

0810ae80 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 810ae80:	b580      	push	{r7, lr}
 810ae82:	b088      	sub	sp, #32
 810ae84:	af00      	add	r7, sp, #0
 810ae86:	6078      	str	r0, [r7, #4]
 810ae88:	4608      	mov	r0, r1
 810ae8a:	4611      	mov	r1, r2
 810ae8c:	461a      	mov	r2, r3
 810ae8e:	4603      	mov	r3, r0
 810ae90:	70fb      	strb	r3, [r7, #3]
 810ae92:	460b      	mov	r3, r1
 810ae94:	70bb      	strb	r3, [r7, #2]
 810ae96:	4613      	mov	r3, r2
 810ae98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 810ae9a:	2300      	movs	r3, #0
 810ae9c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ae9e:	687b      	ldr	r3, [r7, #4]
 810aea0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 810aea2:	78fb      	ldrb	r3, [r7, #3]
 810aea4:	015a      	lsls	r2, r3, #5
 810aea6:	693b      	ldr	r3, [r7, #16]
 810aea8:	4413      	add	r3, r2
 810aeaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810aeae:	461a      	mov	r2, r3
 810aeb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810aeb4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 810aeb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 810aeba:	2b03      	cmp	r3, #3
 810aebc:	d87e      	bhi.n	810afbc <USB_HC_Init+0x13c>
 810aebe:	a201      	add	r2, pc, #4	; (adr r2, 810aec4 <USB_HC_Init+0x44>)
 810aec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aec4:	0810aed5 	.word	0x0810aed5
 810aec8:	0810af7f 	.word	0x0810af7f
 810aecc:	0810aed5 	.word	0x0810aed5
 810aed0:	0810af41 	.word	0x0810af41
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 810aed4:	78fb      	ldrb	r3, [r7, #3]
 810aed6:	015a      	lsls	r2, r3, #5
 810aed8:	693b      	ldr	r3, [r7, #16]
 810aeda:	4413      	add	r3, r2
 810aedc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810aee0:	461a      	mov	r2, r3
 810aee2:	f240 439d 	movw	r3, #1181	; 0x49d
 810aee6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 810aee8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 810aeec:	2b00      	cmp	r3, #0
 810aeee:	da10      	bge.n	810af12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 810aef0:	78fb      	ldrb	r3, [r7, #3]
 810aef2:	015a      	lsls	r2, r3, #5
 810aef4:	693b      	ldr	r3, [r7, #16]
 810aef6:	4413      	add	r3, r2
 810aef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810aefc:	68db      	ldr	r3, [r3, #12]
 810aefe:	78fa      	ldrb	r2, [r7, #3]
 810af00:	0151      	lsls	r1, r2, #5
 810af02:	693a      	ldr	r2, [r7, #16]
 810af04:	440a      	add	r2, r1
 810af06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810af0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810af0e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 810af10:	e057      	b.n	810afc2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 810af12:	687b      	ldr	r3, [r7, #4]
 810af14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810af16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810af1a:	2b00      	cmp	r3, #0
 810af1c:	d051      	beq.n	810afc2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 810af1e:	78fb      	ldrb	r3, [r7, #3]
 810af20:	015a      	lsls	r2, r3, #5
 810af22:	693b      	ldr	r3, [r7, #16]
 810af24:	4413      	add	r3, r2
 810af26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810af2a:	68db      	ldr	r3, [r3, #12]
 810af2c:	78fa      	ldrb	r2, [r7, #3]
 810af2e:	0151      	lsls	r1, r2, #5
 810af30:	693a      	ldr	r2, [r7, #16]
 810af32:	440a      	add	r2, r1
 810af34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810af38:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 810af3c:	60d3      	str	r3, [r2, #12]
      break;
 810af3e:	e040      	b.n	810afc2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 810af40:	78fb      	ldrb	r3, [r7, #3]
 810af42:	015a      	lsls	r2, r3, #5
 810af44:	693b      	ldr	r3, [r7, #16]
 810af46:	4413      	add	r3, r2
 810af48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810af4c:	461a      	mov	r2, r3
 810af4e:	f240 639d 	movw	r3, #1693	; 0x69d
 810af52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 810af54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 810af58:	2b00      	cmp	r3, #0
 810af5a:	da34      	bge.n	810afc6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 810af5c:	78fb      	ldrb	r3, [r7, #3]
 810af5e:	015a      	lsls	r2, r3, #5
 810af60:	693b      	ldr	r3, [r7, #16]
 810af62:	4413      	add	r3, r2
 810af64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810af68:	68db      	ldr	r3, [r3, #12]
 810af6a:	78fa      	ldrb	r2, [r7, #3]
 810af6c:	0151      	lsls	r1, r2, #5
 810af6e:	693a      	ldr	r2, [r7, #16]
 810af70:	440a      	add	r2, r1
 810af72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810af76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810af7a:	60d3      	str	r3, [r2, #12]
      }

      break;
 810af7c:	e023      	b.n	810afc6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 810af7e:	78fb      	ldrb	r3, [r7, #3]
 810af80:	015a      	lsls	r2, r3, #5
 810af82:	693b      	ldr	r3, [r7, #16]
 810af84:	4413      	add	r3, r2
 810af86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810af8a:	461a      	mov	r2, r3
 810af8c:	f240 2325 	movw	r3, #549	; 0x225
 810af90:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 810af92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 810af96:	2b00      	cmp	r3, #0
 810af98:	da17      	bge.n	810afca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 810af9a:	78fb      	ldrb	r3, [r7, #3]
 810af9c:	015a      	lsls	r2, r3, #5
 810af9e:	693b      	ldr	r3, [r7, #16]
 810afa0:	4413      	add	r3, r2
 810afa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810afa6:	68db      	ldr	r3, [r3, #12]
 810afa8:	78fa      	ldrb	r2, [r7, #3]
 810afaa:	0151      	lsls	r1, r2, #5
 810afac:	693a      	ldr	r2, [r7, #16]
 810afae:	440a      	add	r2, r1
 810afb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810afb4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 810afb8:	60d3      	str	r3, [r2, #12]
      }
      break;
 810afba:	e006      	b.n	810afca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 810afbc:	2301      	movs	r3, #1
 810afbe:	77fb      	strb	r3, [r7, #31]
      break;
 810afc0:	e004      	b.n	810afcc <USB_HC_Init+0x14c>
      break;
 810afc2:	bf00      	nop
 810afc4:	e002      	b.n	810afcc <USB_HC_Init+0x14c>
      break;
 810afc6:	bf00      	nop
 810afc8:	e000      	b.n	810afcc <USB_HC_Init+0x14c>
      break;
 810afca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 810afcc:	693b      	ldr	r3, [r7, #16]
 810afce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810afd2:	699a      	ldr	r2, [r3, #24]
 810afd4:	78fb      	ldrb	r3, [r7, #3]
 810afd6:	f003 030f 	and.w	r3, r3, #15
 810afda:	2101      	movs	r1, #1
 810afdc:	fa01 f303 	lsl.w	r3, r1, r3
 810afe0:	6939      	ldr	r1, [r7, #16]
 810afe2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 810afe6:	4313      	orrs	r3, r2
 810afe8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 810afea:	687b      	ldr	r3, [r7, #4]
 810afec:	699b      	ldr	r3, [r3, #24]
 810afee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 810aff2:	687b      	ldr	r3, [r7, #4]
 810aff4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 810aff6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 810affa:	2b00      	cmp	r3, #0
 810affc:	da03      	bge.n	810b006 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 810affe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810b002:	61bb      	str	r3, [r7, #24]
 810b004:	e001      	b.n	810b00a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 810b006:	2300      	movs	r3, #0
 810b008:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 810b00a:	6878      	ldr	r0, [r7, #4]
 810b00c:	f7ff ff0f 	bl	810ae2e <USB_GetHostSpeed>
 810b010:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 810b012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 810b016:	2b02      	cmp	r3, #2
 810b018:	d106      	bne.n	810b028 <USB_HC_Init+0x1a8>
 810b01a:	68fb      	ldr	r3, [r7, #12]
 810b01c:	2b02      	cmp	r3, #2
 810b01e:	d003      	beq.n	810b028 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 810b020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810b024:	617b      	str	r3, [r7, #20]
 810b026:	e001      	b.n	810b02c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 810b028:	2300      	movs	r3, #0
 810b02a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 810b02c:	787b      	ldrb	r3, [r7, #1]
 810b02e:	059b      	lsls	r3, r3, #22
 810b030:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 810b034:	78bb      	ldrb	r3, [r7, #2]
 810b036:	02db      	lsls	r3, r3, #11
 810b038:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 810b03c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 810b03e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 810b042:	049b      	lsls	r3, r3, #18
 810b044:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 810b048:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 810b04a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 810b04c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 810b050:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 810b052:	69bb      	ldr	r3, [r7, #24]
 810b054:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 810b056:	78fb      	ldrb	r3, [r7, #3]
 810b058:	0159      	lsls	r1, r3, #5
 810b05a:	693b      	ldr	r3, [r7, #16]
 810b05c:	440b      	add	r3, r1
 810b05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b062:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 810b064:	697b      	ldr	r3, [r7, #20]
 810b066:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 810b068:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 810b06a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 810b06e:	2b03      	cmp	r3, #3
 810b070:	d10f      	bne.n	810b092 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 810b072:	78fb      	ldrb	r3, [r7, #3]
 810b074:	015a      	lsls	r2, r3, #5
 810b076:	693b      	ldr	r3, [r7, #16]
 810b078:	4413      	add	r3, r2
 810b07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b07e:	681b      	ldr	r3, [r3, #0]
 810b080:	78fa      	ldrb	r2, [r7, #3]
 810b082:	0151      	lsls	r1, r2, #5
 810b084:	693a      	ldr	r2, [r7, #16]
 810b086:	440a      	add	r2, r1
 810b088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b08c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 810b090:	6013      	str	r3, [r2, #0]
  }

  return ret;
 810b092:	7ffb      	ldrb	r3, [r7, #31]
}
 810b094:	4618      	mov	r0, r3
 810b096:	3720      	adds	r7, #32
 810b098:	46bd      	mov	sp, r7
 810b09a:	bd80      	pop	{r7, pc}

0810b09c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 810b09c:	b580      	push	{r7, lr}
 810b09e:	b08c      	sub	sp, #48	; 0x30
 810b0a0:	af02      	add	r7, sp, #8
 810b0a2:	60f8      	str	r0, [r7, #12]
 810b0a4:	60b9      	str	r1, [r7, #8]
 810b0a6:	4613      	mov	r3, r2
 810b0a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b0aa:	68fb      	ldr	r3, [r7, #12]
 810b0ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 810b0ae:	68bb      	ldr	r3, [r7, #8]
 810b0b0:	785b      	ldrb	r3, [r3, #1]
 810b0b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 810b0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 810b0b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 810b0ba:	68fb      	ldr	r3, [r7, #12]
 810b0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810b0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b0c2:	2b00      	cmp	r3, #0
 810b0c4:	d02d      	beq.n	810b122 <USB_HC_StartXfer+0x86>
 810b0c6:	68bb      	ldr	r3, [r7, #8]
 810b0c8:	791b      	ldrb	r3, [r3, #4]
 810b0ca:	2b00      	cmp	r3, #0
 810b0cc:	d129      	bne.n	810b122 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 810b0ce:	79fb      	ldrb	r3, [r7, #7]
 810b0d0:	2b01      	cmp	r3, #1
 810b0d2:	d117      	bne.n	810b104 <USB_HC_StartXfer+0x68>
 810b0d4:	68bb      	ldr	r3, [r7, #8]
 810b0d6:	79db      	ldrb	r3, [r3, #7]
 810b0d8:	2b00      	cmp	r3, #0
 810b0da:	d003      	beq.n	810b0e4 <USB_HC_StartXfer+0x48>
 810b0dc:	68bb      	ldr	r3, [r7, #8]
 810b0de:	79db      	ldrb	r3, [r3, #7]
 810b0e0:	2b02      	cmp	r3, #2
 810b0e2:	d10f      	bne.n	810b104 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 810b0e4:	69fb      	ldr	r3, [r7, #28]
 810b0e6:	015a      	lsls	r2, r3, #5
 810b0e8:	6a3b      	ldr	r3, [r7, #32]
 810b0ea:	4413      	add	r3, r2
 810b0ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b0f0:	68db      	ldr	r3, [r3, #12]
 810b0f2:	69fa      	ldr	r2, [r7, #28]
 810b0f4:	0151      	lsls	r1, r2, #5
 810b0f6:	6a3a      	ldr	r2, [r7, #32]
 810b0f8:	440a      	add	r2, r1
 810b0fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b102:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 810b104:	79fb      	ldrb	r3, [r7, #7]
 810b106:	2b00      	cmp	r3, #0
 810b108:	d10b      	bne.n	810b122 <USB_HC_StartXfer+0x86>
 810b10a:	68bb      	ldr	r3, [r7, #8]
 810b10c:	795b      	ldrb	r3, [r3, #5]
 810b10e:	2b01      	cmp	r3, #1
 810b110:	d107      	bne.n	810b122 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 810b112:	68bb      	ldr	r3, [r7, #8]
 810b114:	785b      	ldrb	r3, [r3, #1]
 810b116:	4619      	mov	r1, r3
 810b118:	68f8      	ldr	r0, [r7, #12]
 810b11a:	f000 fa2f 	bl	810b57c <USB_DoPing>
      return HAL_OK;
 810b11e:	2300      	movs	r3, #0
 810b120:	e0f8      	b.n	810b314 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 810b122:	68bb      	ldr	r3, [r7, #8]
 810b124:	695b      	ldr	r3, [r3, #20]
 810b126:	2b00      	cmp	r3, #0
 810b128:	d018      	beq.n	810b15c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 810b12a:	68bb      	ldr	r3, [r7, #8]
 810b12c:	695b      	ldr	r3, [r3, #20]
 810b12e:	68ba      	ldr	r2, [r7, #8]
 810b130:	8912      	ldrh	r2, [r2, #8]
 810b132:	4413      	add	r3, r2
 810b134:	3b01      	subs	r3, #1
 810b136:	68ba      	ldr	r2, [r7, #8]
 810b138:	8912      	ldrh	r2, [r2, #8]
 810b13a:	fbb3 f3f2 	udiv	r3, r3, r2
 810b13e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 810b140:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810b142:	8b7b      	ldrh	r3, [r7, #26]
 810b144:	429a      	cmp	r2, r3
 810b146:	d90b      	bls.n	810b160 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 810b148:	8b7b      	ldrh	r3, [r7, #26]
 810b14a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 810b14c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810b14e:	68ba      	ldr	r2, [r7, #8]
 810b150:	8912      	ldrh	r2, [r2, #8]
 810b152:	fb02 f203 	mul.w	r2, r2, r3
 810b156:	68bb      	ldr	r3, [r7, #8]
 810b158:	611a      	str	r2, [r3, #16]
 810b15a:	e001      	b.n	810b160 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 810b15c:	2301      	movs	r3, #1
 810b15e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 810b160:	68bb      	ldr	r3, [r7, #8]
 810b162:	78db      	ldrb	r3, [r3, #3]
 810b164:	2b00      	cmp	r3, #0
 810b166:	d007      	beq.n	810b178 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 810b168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810b16a:	68ba      	ldr	r2, [r7, #8]
 810b16c:	8912      	ldrh	r2, [r2, #8]
 810b16e:	fb02 f203 	mul.w	r2, r2, r3
 810b172:	68bb      	ldr	r3, [r7, #8]
 810b174:	611a      	str	r2, [r3, #16]
 810b176:	e003      	b.n	810b180 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 810b178:	68bb      	ldr	r3, [r7, #8]
 810b17a:	695a      	ldr	r2, [r3, #20]
 810b17c:	68bb      	ldr	r3, [r7, #8]
 810b17e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 810b180:	68bb      	ldr	r3, [r7, #8]
 810b182:	691b      	ldr	r3, [r3, #16]
 810b184:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 810b188:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810b18a:	04d9      	lsls	r1, r3, #19
 810b18c:	4b63      	ldr	r3, [pc, #396]	; (810b31c <USB_HC_StartXfer+0x280>)
 810b18e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 810b190:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 810b192:	68bb      	ldr	r3, [r7, #8]
 810b194:	7a9b      	ldrb	r3, [r3, #10]
 810b196:	075b      	lsls	r3, r3, #29
 810b198:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 810b19c:	69f9      	ldr	r1, [r7, #28]
 810b19e:	0148      	lsls	r0, r1, #5
 810b1a0:	6a39      	ldr	r1, [r7, #32]
 810b1a2:	4401      	add	r1, r0
 810b1a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 810b1a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 810b1aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 810b1ac:	79fb      	ldrb	r3, [r7, #7]
 810b1ae:	2b00      	cmp	r3, #0
 810b1b0:	d009      	beq.n	810b1c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 810b1b2:	68bb      	ldr	r3, [r7, #8]
 810b1b4:	68d9      	ldr	r1, [r3, #12]
 810b1b6:	69fb      	ldr	r3, [r7, #28]
 810b1b8:	015a      	lsls	r2, r3, #5
 810b1ba:	6a3b      	ldr	r3, [r7, #32]
 810b1bc:	4413      	add	r3, r2
 810b1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b1c2:	460a      	mov	r2, r1
 810b1c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 810b1c6:	6a3b      	ldr	r3, [r7, #32]
 810b1c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810b1cc:	689b      	ldr	r3, [r3, #8]
 810b1ce:	f003 0301 	and.w	r3, r3, #1
 810b1d2:	2b00      	cmp	r3, #0
 810b1d4:	bf0c      	ite	eq
 810b1d6:	2301      	moveq	r3, #1
 810b1d8:	2300      	movne	r3, #0
 810b1da:	b2db      	uxtb	r3, r3
 810b1dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 810b1de:	69fb      	ldr	r3, [r7, #28]
 810b1e0:	015a      	lsls	r2, r3, #5
 810b1e2:	6a3b      	ldr	r3, [r7, #32]
 810b1e4:	4413      	add	r3, r2
 810b1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b1ea:	681b      	ldr	r3, [r3, #0]
 810b1ec:	69fa      	ldr	r2, [r7, #28]
 810b1ee:	0151      	lsls	r1, r2, #5
 810b1f0:	6a3a      	ldr	r2, [r7, #32]
 810b1f2:	440a      	add	r2, r1
 810b1f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b1f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810b1fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 810b1fe:	69fb      	ldr	r3, [r7, #28]
 810b200:	015a      	lsls	r2, r3, #5
 810b202:	6a3b      	ldr	r3, [r7, #32]
 810b204:	4413      	add	r3, r2
 810b206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b20a:	681a      	ldr	r2, [r3, #0]
 810b20c:	7e7b      	ldrb	r3, [r7, #25]
 810b20e:	075b      	lsls	r3, r3, #29
 810b210:	69f9      	ldr	r1, [r7, #28]
 810b212:	0148      	lsls	r0, r1, #5
 810b214:	6a39      	ldr	r1, [r7, #32]
 810b216:	4401      	add	r1, r0
 810b218:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 810b21c:	4313      	orrs	r3, r2
 810b21e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 810b220:	69fb      	ldr	r3, [r7, #28]
 810b222:	015a      	lsls	r2, r3, #5
 810b224:	6a3b      	ldr	r3, [r7, #32]
 810b226:	4413      	add	r3, r2
 810b228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b22c:	681b      	ldr	r3, [r3, #0]
 810b22e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 810b230:	693b      	ldr	r3, [r7, #16]
 810b232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 810b236:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 810b238:	68bb      	ldr	r3, [r7, #8]
 810b23a:	78db      	ldrb	r3, [r3, #3]
 810b23c:	2b00      	cmp	r3, #0
 810b23e:	d004      	beq.n	810b24a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 810b240:	693b      	ldr	r3, [r7, #16]
 810b242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810b246:	613b      	str	r3, [r7, #16]
 810b248:	e003      	b.n	810b252 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 810b24a:	693b      	ldr	r3, [r7, #16]
 810b24c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b250:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 810b252:	693b      	ldr	r3, [r7, #16]
 810b254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b258:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 810b25a:	69fb      	ldr	r3, [r7, #28]
 810b25c:	015a      	lsls	r2, r3, #5
 810b25e:	6a3b      	ldr	r3, [r7, #32]
 810b260:	4413      	add	r3, r2
 810b262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b266:	461a      	mov	r2, r3
 810b268:	693b      	ldr	r3, [r7, #16]
 810b26a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 810b26c:	79fb      	ldrb	r3, [r7, #7]
 810b26e:	2b00      	cmp	r3, #0
 810b270:	d001      	beq.n	810b276 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 810b272:	2300      	movs	r3, #0
 810b274:	e04e      	b.n	810b314 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 810b276:	68bb      	ldr	r3, [r7, #8]
 810b278:	78db      	ldrb	r3, [r3, #3]
 810b27a:	2b00      	cmp	r3, #0
 810b27c:	d149      	bne.n	810b312 <USB_HC_StartXfer+0x276>
 810b27e:	68bb      	ldr	r3, [r7, #8]
 810b280:	695b      	ldr	r3, [r3, #20]
 810b282:	2b00      	cmp	r3, #0
 810b284:	d045      	beq.n	810b312 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 810b286:	68bb      	ldr	r3, [r7, #8]
 810b288:	79db      	ldrb	r3, [r3, #7]
 810b28a:	2b03      	cmp	r3, #3
 810b28c:	d830      	bhi.n	810b2f0 <USB_HC_StartXfer+0x254>
 810b28e:	a201      	add	r2, pc, #4	; (adr r2, 810b294 <USB_HC_StartXfer+0x1f8>)
 810b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b294:	0810b2a5 	.word	0x0810b2a5
 810b298:	0810b2c9 	.word	0x0810b2c9
 810b29c:	0810b2a5 	.word	0x0810b2a5
 810b2a0:	0810b2c9 	.word	0x0810b2c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 810b2a4:	68bb      	ldr	r3, [r7, #8]
 810b2a6:	695b      	ldr	r3, [r3, #20]
 810b2a8:	3303      	adds	r3, #3
 810b2aa:	089b      	lsrs	r3, r3, #2
 810b2ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 810b2ae:	8afa      	ldrh	r2, [r7, #22]
 810b2b0:	68fb      	ldr	r3, [r7, #12]
 810b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b2b4:	b29b      	uxth	r3, r3
 810b2b6:	429a      	cmp	r2, r3
 810b2b8:	d91c      	bls.n	810b2f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 810b2ba:	68fb      	ldr	r3, [r7, #12]
 810b2bc:	699b      	ldr	r3, [r3, #24]
 810b2be:	f043 0220 	orr.w	r2, r3, #32
 810b2c2:	68fb      	ldr	r3, [r7, #12]
 810b2c4:	619a      	str	r2, [r3, #24]
        }
        break;
 810b2c6:	e015      	b.n	810b2f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 810b2c8:	68bb      	ldr	r3, [r7, #8]
 810b2ca:	695b      	ldr	r3, [r3, #20]
 810b2cc:	3303      	adds	r3, #3
 810b2ce:	089b      	lsrs	r3, r3, #2
 810b2d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 810b2d2:	8afa      	ldrh	r2, [r7, #22]
 810b2d4:	6a3b      	ldr	r3, [r7, #32]
 810b2d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810b2da:	691b      	ldr	r3, [r3, #16]
 810b2dc:	b29b      	uxth	r3, r3
 810b2de:	429a      	cmp	r2, r3
 810b2e0:	d90a      	bls.n	810b2f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 810b2e2:	68fb      	ldr	r3, [r7, #12]
 810b2e4:	699b      	ldr	r3, [r3, #24]
 810b2e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 810b2ea:	68fb      	ldr	r3, [r7, #12]
 810b2ec:	619a      	str	r2, [r3, #24]
        }
        break;
 810b2ee:	e003      	b.n	810b2f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 810b2f0:	bf00      	nop
 810b2f2:	e002      	b.n	810b2fa <USB_HC_StartXfer+0x25e>
        break;
 810b2f4:	bf00      	nop
 810b2f6:	e000      	b.n	810b2fa <USB_HC_StartXfer+0x25e>
        break;
 810b2f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 810b2fa:	68bb      	ldr	r3, [r7, #8]
 810b2fc:	68d9      	ldr	r1, [r3, #12]
 810b2fe:	68bb      	ldr	r3, [r7, #8]
 810b300:	785a      	ldrb	r2, [r3, #1]
 810b302:	68bb      	ldr	r3, [r7, #8]
 810b304:	695b      	ldr	r3, [r3, #20]
 810b306:	b29b      	uxth	r3, r3
 810b308:	2000      	movs	r0, #0
 810b30a:	9000      	str	r0, [sp, #0]
 810b30c:	68f8      	ldr	r0, [r7, #12]
 810b30e:	f7ff fb79 	bl	810aa04 <USB_WritePacket>
  }

  return HAL_OK;
 810b312:	2300      	movs	r3, #0
}
 810b314:	4618      	mov	r0, r3
 810b316:	3728      	adds	r7, #40	; 0x28
 810b318:	46bd      	mov	sp, r7
 810b31a:	bd80      	pop	{r7, pc}
 810b31c:	1ff80000 	.word	0x1ff80000

0810b320 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 810b320:	b480      	push	{r7}
 810b322:	b085      	sub	sp, #20
 810b324:	af00      	add	r7, sp, #0
 810b326:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b328:	687b      	ldr	r3, [r7, #4]
 810b32a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 810b32c:	68fb      	ldr	r3, [r7, #12]
 810b32e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810b332:	695b      	ldr	r3, [r3, #20]
 810b334:	b29b      	uxth	r3, r3
}
 810b336:	4618      	mov	r0, r3
 810b338:	3714      	adds	r7, #20
 810b33a:	46bd      	mov	sp, r7
 810b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b340:	4770      	bx	lr

0810b342 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 810b342:	b480      	push	{r7}
 810b344:	b089      	sub	sp, #36	; 0x24
 810b346:	af00      	add	r7, sp, #0
 810b348:	6078      	str	r0, [r7, #4]
 810b34a:	460b      	mov	r3, r1
 810b34c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b34e:	687b      	ldr	r3, [r7, #4]
 810b350:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 810b352:	78fb      	ldrb	r3, [r7, #3]
 810b354:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 810b356:	2300      	movs	r3, #0
 810b358:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 810b35a:	697b      	ldr	r3, [r7, #20]
 810b35c:	015a      	lsls	r2, r3, #5
 810b35e:	69bb      	ldr	r3, [r7, #24]
 810b360:	4413      	add	r3, r2
 810b362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b366:	681b      	ldr	r3, [r3, #0]
 810b368:	0c9b      	lsrs	r3, r3, #18
 810b36a:	f003 0303 	and.w	r3, r3, #3
 810b36e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 810b370:	697b      	ldr	r3, [r7, #20]
 810b372:	015a      	lsls	r2, r3, #5
 810b374:	69bb      	ldr	r3, [r7, #24]
 810b376:	4413      	add	r3, r2
 810b378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b37c:	681b      	ldr	r3, [r3, #0]
 810b37e:	0fdb      	lsrs	r3, r3, #31
 810b380:	f003 0301 	and.w	r3, r3, #1
 810b384:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 810b386:	687b      	ldr	r3, [r7, #4]
 810b388:	689b      	ldr	r3, [r3, #8]
 810b38a:	f003 0320 	and.w	r3, r3, #32
 810b38e:	2b20      	cmp	r3, #32
 810b390:	d104      	bne.n	810b39c <USB_HC_Halt+0x5a>
 810b392:	68fb      	ldr	r3, [r7, #12]
 810b394:	2b00      	cmp	r3, #0
 810b396:	d101      	bne.n	810b39c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 810b398:	2300      	movs	r3, #0
 810b39a:	e0e8      	b.n	810b56e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 810b39c:	693b      	ldr	r3, [r7, #16]
 810b39e:	2b00      	cmp	r3, #0
 810b3a0:	d002      	beq.n	810b3a8 <USB_HC_Halt+0x66>
 810b3a2:	693b      	ldr	r3, [r7, #16]
 810b3a4:	2b02      	cmp	r3, #2
 810b3a6:	d173      	bne.n	810b490 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 810b3a8:	697b      	ldr	r3, [r7, #20]
 810b3aa:	015a      	lsls	r2, r3, #5
 810b3ac:	69bb      	ldr	r3, [r7, #24]
 810b3ae:	4413      	add	r3, r2
 810b3b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b3b4:	681b      	ldr	r3, [r3, #0]
 810b3b6:	697a      	ldr	r2, [r7, #20]
 810b3b8:	0151      	lsls	r1, r2, #5
 810b3ba:	69ba      	ldr	r2, [r7, #24]
 810b3bc:	440a      	add	r2, r1
 810b3be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b3c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810b3c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 810b3c8:	687b      	ldr	r3, [r7, #4]
 810b3ca:	689b      	ldr	r3, [r3, #8]
 810b3cc:	f003 0320 	and.w	r3, r3, #32
 810b3d0:	2b00      	cmp	r3, #0
 810b3d2:	f040 80cb 	bne.w	810b56c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 810b3d6:	687b      	ldr	r3, [r7, #4]
 810b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b3da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810b3de:	2b00      	cmp	r3, #0
 810b3e0:	d143      	bne.n	810b46a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 810b3e2:	697b      	ldr	r3, [r7, #20]
 810b3e4:	015a      	lsls	r2, r3, #5
 810b3e6:	69bb      	ldr	r3, [r7, #24]
 810b3e8:	4413      	add	r3, r2
 810b3ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b3ee:	681b      	ldr	r3, [r3, #0]
 810b3f0:	697a      	ldr	r2, [r7, #20]
 810b3f2:	0151      	lsls	r1, r2, #5
 810b3f4:	69ba      	ldr	r2, [r7, #24]
 810b3f6:	440a      	add	r2, r1
 810b3f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b3fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b400:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 810b402:	697b      	ldr	r3, [r7, #20]
 810b404:	015a      	lsls	r2, r3, #5
 810b406:	69bb      	ldr	r3, [r7, #24]
 810b408:	4413      	add	r3, r2
 810b40a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b40e:	681b      	ldr	r3, [r3, #0]
 810b410:	697a      	ldr	r2, [r7, #20]
 810b412:	0151      	lsls	r1, r2, #5
 810b414:	69ba      	ldr	r2, [r7, #24]
 810b416:	440a      	add	r2, r1
 810b418:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b41c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b420:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 810b422:	697b      	ldr	r3, [r7, #20]
 810b424:	015a      	lsls	r2, r3, #5
 810b426:	69bb      	ldr	r3, [r7, #24]
 810b428:	4413      	add	r3, r2
 810b42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b42e:	681b      	ldr	r3, [r3, #0]
 810b430:	697a      	ldr	r2, [r7, #20]
 810b432:	0151      	lsls	r1, r2, #5
 810b434:	69ba      	ldr	r2, [r7, #24]
 810b436:	440a      	add	r2, r1
 810b438:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b43c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b440:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 810b442:	69fb      	ldr	r3, [r7, #28]
 810b444:	3301      	adds	r3, #1
 810b446:	61fb      	str	r3, [r7, #28]
 810b448:	69fb      	ldr	r3, [r7, #28]
 810b44a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810b44e:	d81d      	bhi.n	810b48c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 810b450:	697b      	ldr	r3, [r7, #20]
 810b452:	015a      	lsls	r2, r3, #5
 810b454:	69bb      	ldr	r3, [r7, #24]
 810b456:	4413      	add	r3, r2
 810b458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b45c:	681b      	ldr	r3, [r3, #0]
 810b45e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b466:	d0ec      	beq.n	810b442 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 810b468:	e080      	b.n	810b56c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 810b46a:	697b      	ldr	r3, [r7, #20]
 810b46c:	015a      	lsls	r2, r3, #5
 810b46e:	69bb      	ldr	r3, [r7, #24]
 810b470:	4413      	add	r3, r2
 810b472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b476:	681b      	ldr	r3, [r3, #0]
 810b478:	697a      	ldr	r2, [r7, #20]
 810b47a:	0151      	lsls	r1, r2, #5
 810b47c:	69ba      	ldr	r2, [r7, #24]
 810b47e:	440a      	add	r2, r1
 810b480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b484:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b488:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 810b48a:	e06f      	b.n	810b56c <USB_HC_Halt+0x22a>
            break;
 810b48c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 810b48e:	e06d      	b.n	810b56c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 810b490:	697b      	ldr	r3, [r7, #20]
 810b492:	015a      	lsls	r2, r3, #5
 810b494:	69bb      	ldr	r3, [r7, #24]
 810b496:	4413      	add	r3, r2
 810b498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b49c:	681b      	ldr	r3, [r3, #0]
 810b49e:	697a      	ldr	r2, [r7, #20]
 810b4a0:	0151      	lsls	r1, r2, #5
 810b4a2:	69ba      	ldr	r2, [r7, #24]
 810b4a4:	440a      	add	r2, r1
 810b4a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b4aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810b4ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 810b4b0:	69bb      	ldr	r3, [r7, #24]
 810b4b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810b4b6:	691b      	ldr	r3, [r3, #16]
 810b4b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810b4bc:	2b00      	cmp	r3, #0
 810b4be:	d143      	bne.n	810b548 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 810b4c0:	697b      	ldr	r3, [r7, #20]
 810b4c2:	015a      	lsls	r2, r3, #5
 810b4c4:	69bb      	ldr	r3, [r7, #24]
 810b4c6:	4413      	add	r3, r2
 810b4c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b4cc:	681b      	ldr	r3, [r3, #0]
 810b4ce:	697a      	ldr	r2, [r7, #20]
 810b4d0:	0151      	lsls	r1, r2, #5
 810b4d2:	69ba      	ldr	r2, [r7, #24]
 810b4d4:	440a      	add	r2, r1
 810b4d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b4da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b4de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 810b4e0:	697b      	ldr	r3, [r7, #20]
 810b4e2:	015a      	lsls	r2, r3, #5
 810b4e4:	69bb      	ldr	r3, [r7, #24]
 810b4e6:	4413      	add	r3, r2
 810b4e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b4ec:	681b      	ldr	r3, [r3, #0]
 810b4ee:	697a      	ldr	r2, [r7, #20]
 810b4f0:	0151      	lsls	r1, r2, #5
 810b4f2:	69ba      	ldr	r2, [r7, #24]
 810b4f4:	440a      	add	r2, r1
 810b4f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b4fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b4fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 810b500:	697b      	ldr	r3, [r7, #20]
 810b502:	015a      	lsls	r2, r3, #5
 810b504:	69bb      	ldr	r3, [r7, #24]
 810b506:	4413      	add	r3, r2
 810b508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b50c:	681b      	ldr	r3, [r3, #0]
 810b50e:	697a      	ldr	r2, [r7, #20]
 810b510:	0151      	lsls	r1, r2, #5
 810b512:	69ba      	ldr	r2, [r7, #24]
 810b514:	440a      	add	r2, r1
 810b516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b51a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b51e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 810b520:	69fb      	ldr	r3, [r7, #28]
 810b522:	3301      	adds	r3, #1
 810b524:	61fb      	str	r3, [r7, #28]
 810b526:	69fb      	ldr	r3, [r7, #28]
 810b528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810b52c:	d81d      	bhi.n	810b56a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 810b52e:	697b      	ldr	r3, [r7, #20]
 810b530:	015a      	lsls	r2, r3, #5
 810b532:	69bb      	ldr	r3, [r7, #24]
 810b534:	4413      	add	r3, r2
 810b536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b53a:	681b      	ldr	r3, [r3, #0]
 810b53c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b544:	d0ec      	beq.n	810b520 <USB_HC_Halt+0x1de>
 810b546:	e011      	b.n	810b56c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 810b548:	697b      	ldr	r3, [r7, #20]
 810b54a:	015a      	lsls	r2, r3, #5
 810b54c:	69bb      	ldr	r3, [r7, #24]
 810b54e:	4413      	add	r3, r2
 810b550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b554:	681b      	ldr	r3, [r3, #0]
 810b556:	697a      	ldr	r2, [r7, #20]
 810b558:	0151      	lsls	r1, r2, #5
 810b55a:	69ba      	ldr	r2, [r7, #24]
 810b55c:	440a      	add	r2, r1
 810b55e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b566:	6013      	str	r3, [r2, #0]
 810b568:	e000      	b.n	810b56c <USB_HC_Halt+0x22a>
          break;
 810b56a:	bf00      	nop
    }
  }

  return HAL_OK;
 810b56c:	2300      	movs	r3, #0
}
 810b56e:	4618      	mov	r0, r3
 810b570:	3724      	adds	r7, #36	; 0x24
 810b572:	46bd      	mov	sp, r7
 810b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b578:	4770      	bx	lr
	...

0810b57c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 810b57c:	b480      	push	{r7}
 810b57e:	b087      	sub	sp, #28
 810b580:	af00      	add	r7, sp, #0
 810b582:	6078      	str	r0, [r7, #4]
 810b584:	460b      	mov	r3, r1
 810b586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b588:	687b      	ldr	r3, [r7, #4]
 810b58a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 810b58c:	78fb      	ldrb	r3, [r7, #3]
 810b58e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 810b590:	2301      	movs	r3, #1
 810b592:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 810b594:	68fb      	ldr	r3, [r7, #12]
 810b596:	04da      	lsls	r2, r3, #19
 810b598:	4b15      	ldr	r3, [pc, #84]	; (810b5f0 <USB_DoPing+0x74>)
 810b59a:	4013      	ands	r3, r2
 810b59c:	693a      	ldr	r2, [r7, #16]
 810b59e:	0151      	lsls	r1, r2, #5
 810b5a0:	697a      	ldr	r2, [r7, #20]
 810b5a2:	440a      	add	r2, r1
 810b5a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 810b5a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b5ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 810b5ae:	693b      	ldr	r3, [r7, #16]
 810b5b0:	015a      	lsls	r2, r3, #5
 810b5b2:	697b      	ldr	r3, [r7, #20]
 810b5b4:	4413      	add	r3, r2
 810b5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b5ba:	681b      	ldr	r3, [r3, #0]
 810b5bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 810b5be:	68bb      	ldr	r3, [r7, #8]
 810b5c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 810b5c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 810b5c6:	68bb      	ldr	r3, [r7, #8]
 810b5c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b5cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 810b5ce:	693b      	ldr	r3, [r7, #16]
 810b5d0:	015a      	lsls	r2, r3, #5
 810b5d2:	697b      	ldr	r3, [r7, #20]
 810b5d4:	4413      	add	r3, r2
 810b5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b5da:	461a      	mov	r2, r3
 810b5dc:	68bb      	ldr	r3, [r7, #8]
 810b5de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 810b5e0:	2300      	movs	r3, #0
}
 810b5e2:	4618      	mov	r0, r3
 810b5e4:	371c      	adds	r7, #28
 810b5e6:	46bd      	mov	sp, r7
 810b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5ec:	4770      	bx	lr
 810b5ee:	bf00      	nop
 810b5f0:	1ff80000 	.word	0x1ff80000

0810b5f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 810b5f4:	b580      	push	{r7, lr}
 810b5f6:	b086      	sub	sp, #24
 810b5f8:	af00      	add	r7, sp, #0
 810b5fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b5fc:	687b      	ldr	r3, [r7, #4]
 810b5fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 810b600:	2300      	movs	r3, #0
 810b602:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 810b604:	6878      	ldr	r0, [r7, #4]
 810b606:	f7ff f97a 	bl	810a8fe <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 810b60a:	2110      	movs	r1, #16
 810b60c:	6878      	ldr	r0, [r7, #4]
 810b60e:	f7ff f9b1 	bl	810a974 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 810b612:	6878      	ldr	r0, [r7, #4]
 810b614:	f7ff f9d4 	bl	810a9c0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 810b618:	2300      	movs	r3, #0
 810b61a:	613b      	str	r3, [r7, #16]
 810b61c:	e01f      	b.n	810b65e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 810b61e:	693b      	ldr	r3, [r7, #16]
 810b620:	015a      	lsls	r2, r3, #5
 810b622:	68fb      	ldr	r3, [r7, #12]
 810b624:	4413      	add	r3, r2
 810b626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b62a:	681b      	ldr	r3, [r3, #0]
 810b62c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 810b62e:	68bb      	ldr	r3, [r7, #8]
 810b630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810b634:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 810b636:	68bb      	ldr	r3, [r7, #8]
 810b638:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b63c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 810b63e:	68bb      	ldr	r3, [r7, #8]
 810b640:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b644:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 810b646:	693b      	ldr	r3, [r7, #16]
 810b648:	015a      	lsls	r2, r3, #5
 810b64a:	68fb      	ldr	r3, [r7, #12]
 810b64c:	4413      	add	r3, r2
 810b64e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b652:	461a      	mov	r2, r3
 810b654:	68bb      	ldr	r3, [r7, #8]
 810b656:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 810b658:	693b      	ldr	r3, [r7, #16]
 810b65a:	3301      	adds	r3, #1
 810b65c:	613b      	str	r3, [r7, #16]
 810b65e:	693b      	ldr	r3, [r7, #16]
 810b660:	2b0f      	cmp	r3, #15
 810b662:	d9dc      	bls.n	810b61e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 810b664:	2300      	movs	r3, #0
 810b666:	613b      	str	r3, [r7, #16]
 810b668:	e034      	b.n	810b6d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 810b66a:	693b      	ldr	r3, [r7, #16]
 810b66c:	015a      	lsls	r2, r3, #5
 810b66e:	68fb      	ldr	r3, [r7, #12]
 810b670:	4413      	add	r3, r2
 810b672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b676:	681b      	ldr	r3, [r3, #0]
 810b678:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 810b67a:	68bb      	ldr	r3, [r7, #8]
 810b67c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810b680:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 810b682:	68bb      	ldr	r3, [r7, #8]
 810b684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810b688:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 810b68a:	68bb      	ldr	r3, [r7, #8]
 810b68c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b690:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 810b692:	693b      	ldr	r3, [r7, #16]
 810b694:	015a      	lsls	r2, r3, #5
 810b696:	68fb      	ldr	r3, [r7, #12]
 810b698:	4413      	add	r3, r2
 810b69a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b69e:	461a      	mov	r2, r3
 810b6a0:	68bb      	ldr	r3, [r7, #8]
 810b6a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 810b6a4:	697b      	ldr	r3, [r7, #20]
 810b6a6:	3301      	adds	r3, #1
 810b6a8:	617b      	str	r3, [r7, #20]
 810b6aa:	697b      	ldr	r3, [r7, #20]
 810b6ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810b6b0:	d80c      	bhi.n	810b6cc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 810b6b2:	693b      	ldr	r3, [r7, #16]
 810b6b4:	015a      	lsls	r2, r3, #5
 810b6b6:	68fb      	ldr	r3, [r7, #12]
 810b6b8:	4413      	add	r3, r2
 810b6ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 810b6be:	681b      	ldr	r3, [r3, #0]
 810b6c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b6c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b6c8:	d0ec      	beq.n	810b6a4 <USB_StopHost+0xb0>
 810b6ca:	e000      	b.n	810b6ce <USB_StopHost+0xda>
        break;
 810b6cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 810b6ce:	693b      	ldr	r3, [r7, #16]
 810b6d0:	3301      	adds	r3, #1
 810b6d2:	613b      	str	r3, [r7, #16]
 810b6d4:	693b      	ldr	r3, [r7, #16]
 810b6d6:	2b0f      	cmp	r3, #15
 810b6d8:	d9c7      	bls.n	810b66a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 810b6da:	68fb      	ldr	r3, [r7, #12]
 810b6dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 810b6e0:	461a      	mov	r2, r3
 810b6e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b6e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 810b6e8:	687b      	ldr	r3, [r7, #4]
 810b6ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810b6ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 810b6f0:	6878      	ldr	r0, [r7, #4]
 810b6f2:	f7ff f8f3 	bl	810a8dc <USB_EnableGlobalInt>

  return HAL_OK;
 810b6f6:	2300      	movs	r3, #0
}
 810b6f8:	4618      	mov	r0, r3
 810b6fa:	3718      	adds	r7, #24
 810b6fc:	46bd      	mov	sp, r7
 810b6fe:	bd80      	pop	{r7, pc}

0810b700 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 810b700:	b580      	push	{r7, lr}
 810b702:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 810b704:	4904      	ldr	r1, [pc, #16]	; (810b718 <MX_FATFS_Init+0x18>)
 810b706:	4805      	ldr	r0, [pc, #20]	; (810b71c <MX_FATFS_Init+0x1c>)
 810b708:	f001 fbb2 	bl	810ce70 <FATFS_LinkDriver>
 810b70c:	4603      	mov	r3, r0
 810b70e:	461a      	mov	r2, r3
 810b710:	4b03      	ldr	r3, [pc, #12]	; (810b720 <MX_FATFS_Init+0x20>)
 810b712:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 810b714:	bf00      	nop
 810b716:	bd80      	pop	{r7, pc}
 810b718:	100003ac 	.word	0x100003ac
 810b71c:	0810d690 	.word	0x0810d690
 810b720:	100003a8 	.word	0x100003a8

0810b724 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 810b724:	b580      	push	{r7, lr}
 810b726:	b082      	sub	sp, #8
 810b728:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 810b72a:	2300      	movs	r3, #0
 810b72c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 810b72e:	f000 f879 	bl	810b824 <BSP_SD_IsDetected>
 810b732:	4603      	mov	r3, r0
 810b734:	2b01      	cmp	r3, #1
 810b736:	d001      	beq.n	810b73c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 810b738:	2302      	movs	r3, #2
 810b73a:	e012      	b.n	810b762 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 810b73c:	480b      	ldr	r0, [pc, #44]	; (810b76c <BSP_SD_Init+0x48>)
 810b73e:	f7fc fcf1 	bl	8108124 <HAL_SD_Init>
 810b742:	4603      	mov	r3, r0
 810b744:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 810b746:	79fb      	ldrb	r3, [r7, #7]
 810b748:	2b00      	cmp	r3, #0
 810b74a:	d109      	bne.n	810b760 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 810b74c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810b750:	4806      	ldr	r0, [pc, #24]	; (810b76c <BSP_SD_Init+0x48>)
 810b752:	f7fd fb9d 	bl	8108e90 <HAL_SD_ConfigWideBusOperation>
 810b756:	4603      	mov	r3, r0
 810b758:	2b00      	cmp	r3, #0
 810b75a:	d001      	beq.n	810b760 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 810b75c:	2301      	movs	r3, #1
 810b75e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 810b760:	79fb      	ldrb	r3, [r7, #7]
}
 810b762:	4618      	mov	r0, r3
 810b764:	3708      	adds	r7, #8
 810b766:	46bd      	mov	sp, r7
 810b768:	bd80      	pop	{r7, pc}
 810b76a:	bf00      	nop
 810b76c:	10000160 	.word	0x10000160

0810b770 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 810b770:	b580      	push	{r7, lr}
 810b772:	b088      	sub	sp, #32
 810b774:	af02      	add	r7, sp, #8
 810b776:	60f8      	str	r0, [r7, #12]
 810b778:	60b9      	str	r1, [r7, #8]
 810b77a:	607a      	str	r2, [r7, #4]
 810b77c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 810b77e:	2300      	movs	r3, #0
 810b780:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 810b782:	683b      	ldr	r3, [r7, #0]
 810b784:	9300      	str	r3, [sp, #0]
 810b786:	687b      	ldr	r3, [r7, #4]
 810b788:	68ba      	ldr	r2, [r7, #8]
 810b78a:	68f9      	ldr	r1, [r7, #12]
 810b78c:	4806      	ldr	r0, [pc, #24]	; (810b7a8 <BSP_SD_ReadBlocks+0x38>)
 810b78e:	f7fc fde1 	bl	8108354 <HAL_SD_ReadBlocks>
 810b792:	4603      	mov	r3, r0
 810b794:	2b00      	cmp	r3, #0
 810b796:	d001      	beq.n	810b79c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 810b798:	2301      	movs	r3, #1
 810b79a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 810b79c:	7dfb      	ldrb	r3, [r7, #23]
}
 810b79e:	4618      	mov	r0, r3
 810b7a0:	3718      	adds	r7, #24
 810b7a2:	46bd      	mov	sp, r7
 810b7a4:	bd80      	pop	{r7, pc}
 810b7a6:	bf00      	nop
 810b7a8:	10000160 	.word	0x10000160

0810b7ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 810b7ac:	b580      	push	{r7, lr}
 810b7ae:	b088      	sub	sp, #32
 810b7b0:	af02      	add	r7, sp, #8
 810b7b2:	60f8      	str	r0, [r7, #12]
 810b7b4:	60b9      	str	r1, [r7, #8]
 810b7b6:	607a      	str	r2, [r7, #4]
 810b7b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 810b7ba:	2300      	movs	r3, #0
 810b7bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 810b7be:	683b      	ldr	r3, [r7, #0]
 810b7c0:	9300      	str	r3, [sp, #0]
 810b7c2:	687b      	ldr	r3, [r7, #4]
 810b7c4:	68ba      	ldr	r2, [r7, #8]
 810b7c6:	68f9      	ldr	r1, [r7, #12]
 810b7c8:	4806      	ldr	r0, [pc, #24]	; (810b7e4 <BSP_SD_WriteBlocks+0x38>)
 810b7ca:	f7fc ff4d 	bl	8108668 <HAL_SD_WriteBlocks>
 810b7ce:	4603      	mov	r3, r0
 810b7d0:	2b00      	cmp	r3, #0
 810b7d2:	d001      	beq.n	810b7d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 810b7d4:	2301      	movs	r3, #1
 810b7d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 810b7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 810b7da:	4618      	mov	r0, r3
 810b7dc:	3718      	adds	r7, #24
 810b7de:	46bd      	mov	sp, r7
 810b7e0:	bd80      	pop	{r7, pc}
 810b7e2:	bf00      	nop
 810b7e4:	10000160 	.word	0x10000160

0810b7e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 810b7e8:	b580      	push	{r7, lr}
 810b7ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 810b7ec:	4805      	ldr	r0, [pc, #20]	; (810b804 <BSP_SD_GetCardState+0x1c>)
 810b7ee:	f7fd fc5f 	bl	81090b0 <HAL_SD_GetCardState>
 810b7f2:	4603      	mov	r3, r0
 810b7f4:	2b04      	cmp	r3, #4
 810b7f6:	bf14      	ite	ne
 810b7f8:	2301      	movne	r3, #1
 810b7fa:	2300      	moveq	r3, #0
 810b7fc:	b2db      	uxtb	r3, r3
}
 810b7fe:	4618      	mov	r0, r3
 810b800:	bd80      	pop	{r7, pc}
 810b802:	bf00      	nop
 810b804:	10000160 	.word	0x10000160

0810b808 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 810b808:	b580      	push	{r7, lr}
 810b80a:	b082      	sub	sp, #8
 810b80c:	af00      	add	r7, sp, #0
 810b80e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 810b810:	6879      	ldr	r1, [r7, #4]
 810b812:	4803      	ldr	r0, [pc, #12]	; (810b820 <BSP_SD_GetCardInfo+0x18>)
 810b814:	f7fd fb10 	bl	8108e38 <HAL_SD_GetCardInfo>
}
 810b818:	bf00      	nop
 810b81a:	3708      	adds	r7, #8
 810b81c:	46bd      	mov	sp, r7
 810b81e:	bd80      	pop	{r7, pc}
 810b820:	10000160 	.word	0x10000160

0810b824 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 810b824:	b580      	push	{r7, lr}
 810b826:	b082      	sub	sp, #8
 810b828:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 810b82a:	2301      	movs	r3, #1
 810b82c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 810b82e:	f000 f80b 	bl	810b848 <BSP_PlatformIsDetected>
 810b832:	4603      	mov	r3, r0
 810b834:	2b00      	cmp	r3, #0
 810b836:	d101      	bne.n	810b83c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 810b838:	2300      	movs	r3, #0
 810b83a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 810b83c:	79fb      	ldrb	r3, [r7, #7]
 810b83e:	b2db      	uxtb	r3, r3
}
 810b840:	4618      	mov	r0, r3
 810b842:	3708      	adds	r7, #8
 810b844:	46bd      	mov	sp, r7
 810b846:	bd80      	pop	{r7, pc}

0810b848 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 810b848:	b580      	push	{r7, lr}
 810b84a:	b082      	sub	sp, #8
 810b84c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 810b84e:	2301      	movs	r3, #1
 810b850:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 810b852:	2120      	movs	r1, #32
 810b854:	4806      	ldr	r0, [pc, #24]	; (810b870 <BSP_PlatformIsDetected+0x28>)
 810b856:	f7f7 f85f 	bl	8102918 <HAL_GPIO_ReadPin>
 810b85a:	4603      	mov	r3, r0
 810b85c:	2b00      	cmp	r3, #0
 810b85e:	d001      	beq.n	810b864 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 810b860:	2300      	movs	r3, #0
 810b862:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 810b864:	79fb      	ldrb	r3, [r7, #7]
}
 810b866:	4618      	mov	r0, r3
 810b868:	3708      	adds	r7, #8
 810b86a:	46bd      	mov	sp, r7
 810b86c:	bd80      	pop	{r7, pc}
 810b86e:	bf00      	nop
 810b870:	58022400 	.word	0x58022400

0810b874 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 810b874:	b580      	push	{r7, lr}
 810b876:	b082      	sub	sp, #8
 810b878:	af00      	add	r7, sp, #0
 810b87a:	4603      	mov	r3, r0
 810b87c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 810b87e:	4b0b      	ldr	r3, [pc, #44]	; (810b8ac <SD_CheckStatus+0x38>)
 810b880:	2201      	movs	r2, #1
 810b882:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 810b884:	f7ff ffb0 	bl	810b7e8 <BSP_SD_GetCardState>
 810b888:	4603      	mov	r3, r0
 810b88a:	2b00      	cmp	r3, #0
 810b88c:	d107      	bne.n	810b89e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 810b88e:	4b07      	ldr	r3, [pc, #28]	; (810b8ac <SD_CheckStatus+0x38>)
 810b890:	781b      	ldrb	r3, [r3, #0]
 810b892:	b2db      	uxtb	r3, r3
 810b894:	f023 0301 	bic.w	r3, r3, #1
 810b898:	b2da      	uxtb	r2, r3
 810b89a:	4b04      	ldr	r3, [pc, #16]	; (810b8ac <SD_CheckStatus+0x38>)
 810b89c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 810b89e:	4b03      	ldr	r3, [pc, #12]	; (810b8ac <SD_CheckStatus+0x38>)
 810b8a0:	781b      	ldrb	r3, [r3, #0]
 810b8a2:	b2db      	uxtb	r3, r3
}
 810b8a4:	4618      	mov	r0, r3
 810b8a6:	3708      	adds	r7, #8
 810b8a8:	46bd      	mov	sp, r7
 810b8aa:	bd80      	pop	{r7, pc}
 810b8ac:	1000000d 	.word	0x1000000d

0810b8b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 810b8b0:	b580      	push	{r7, lr}
 810b8b2:	b082      	sub	sp, #8
 810b8b4:	af00      	add	r7, sp, #0
 810b8b6:	4603      	mov	r3, r0
 810b8b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 810b8ba:	4b0b      	ldr	r3, [pc, #44]	; (810b8e8 <SD_initialize+0x38>)
 810b8bc:	2201      	movs	r2, #1
 810b8be:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 810b8c0:	f7ff ff30 	bl	810b724 <BSP_SD_Init>
 810b8c4:	4603      	mov	r3, r0
 810b8c6:	2b00      	cmp	r3, #0
 810b8c8:	d107      	bne.n	810b8da <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 810b8ca:	79fb      	ldrb	r3, [r7, #7]
 810b8cc:	4618      	mov	r0, r3
 810b8ce:	f7ff ffd1 	bl	810b874 <SD_CheckStatus>
 810b8d2:	4603      	mov	r3, r0
 810b8d4:	461a      	mov	r2, r3
 810b8d6:	4b04      	ldr	r3, [pc, #16]	; (810b8e8 <SD_initialize+0x38>)
 810b8d8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 810b8da:	4b03      	ldr	r3, [pc, #12]	; (810b8e8 <SD_initialize+0x38>)
 810b8dc:	781b      	ldrb	r3, [r3, #0]
 810b8de:	b2db      	uxtb	r3, r3
}
 810b8e0:	4618      	mov	r0, r3
 810b8e2:	3708      	adds	r7, #8
 810b8e4:	46bd      	mov	sp, r7
 810b8e6:	bd80      	pop	{r7, pc}
 810b8e8:	1000000d 	.word	0x1000000d

0810b8ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 810b8ec:	b580      	push	{r7, lr}
 810b8ee:	b082      	sub	sp, #8
 810b8f0:	af00      	add	r7, sp, #0
 810b8f2:	4603      	mov	r3, r0
 810b8f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 810b8f6:	79fb      	ldrb	r3, [r7, #7]
 810b8f8:	4618      	mov	r0, r3
 810b8fa:	f7ff ffbb 	bl	810b874 <SD_CheckStatus>
 810b8fe:	4603      	mov	r3, r0
}
 810b900:	4618      	mov	r0, r3
 810b902:	3708      	adds	r7, #8
 810b904:	46bd      	mov	sp, r7
 810b906:	bd80      	pop	{r7, pc}

0810b908 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 810b908:	b580      	push	{r7, lr}
 810b90a:	b086      	sub	sp, #24
 810b90c:	af00      	add	r7, sp, #0
 810b90e:	60b9      	str	r1, [r7, #8]
 810b910:	607a      	str	r2, [r7, #4]
 810b912:	603b      	str	r3, [r7, #0]
 810b914:	4603      	mov	r3, r0
 810b916:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 810b918:	2301      	movs	r3, #1
 810b91a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 810b91c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b920:	683a      	ldr	r2, [r7, #0]
 810b922:	6879      	ldr	r1, [r7, #4]
 810b924:	68b8      	ldr	r0, [r7, #8]
 810b926:	f7ff ff23 	bl	810b770 <BSP_SD_ReadBlocks>
 810b92a:	4603      	mov	r3, r0
 810b92c:	2b00      	cmp	r3, #0
 810b92e:	d107      	bne.n	810b940 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 810b930:	bf00      	nop
 810b932:	f7ff ff59 	bl	810b7e8 <BSP_SD_GetCardState>
 810b936:	4603      	mov	r3, r0
 810b938:	2b00      	cmp	r3, #0
 810b93a:	d1fa      	bne.n	810b932 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 810b93c:	2300      	movs	r3, #0
 810b93e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 810b940:	7dfb      	ldrb	r3, [r7, #23]
}
 810b942:	4618      	mov	r0, r3
 810b944:	3718      	adds	r7, #24
 810b946:	46bd      	mov	sp, r7
 810b948:	bd80      	pop	{r7, pc}

0810b94a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 810b94a:	b580      	push	{r7, lr}
 810b94c:	b086      	sub	sp, #24
 810b94e:	af00      	add	r7, sp, #0
 810b950:	60b9      	str	r1, [r7, #8]
 810b952:	607a      	str	r2, [r7, #4]
 810b954:	603b      	str	r3, [r7, #0]
 810b956:	4603      	mov	r3, r0
 810b958:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 810b95a:	2301      	movs	r3, #1
 810b95c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 810b95e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810b962:	683a      	ldr	r2, [r7, #0]
 810b964:	6879      	ldr	r1, [r7, #4]
 810b966:	68b8      	ldr	r0, [r7, #8]
 810b968:	f7ff ff20 	bl	810b7ac <BSP_SD_WriteBlocks>
 810b96c:	4603      	mov	r3, r0
 810b96e:	2b00      	cmp	r3, #0
 810b970:	d107      	bne.n	810b982 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 810b972:	bf00      	nop
 810b974:	f7ff ff38 	bl	810b7e8 <BSP_SD_GetCardState>
 810b978:	4603      	mov	r3, r0
 810b97a:	2b00      	cmp	r3, #0
 810b97c:	d1fa      	bne.n	810b974 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 810b97e:	2300      	movs	r3, #0
 810b980:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 810b982:	7dfb      	ldrb	r3, [r7, #23]
}
 810b984:	4618      	mov	r0, r3
 810b986:	3718      	adds	r7, #24
 810b988:	46bd      	mov	sp, r7
 810b98a:	bd80      	pop	{r7, pc}

0810b98c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 810b98c:	b580      	push	{r7, lr}
 810b98e:	b08c      	sub	sp, #48	; 0x30
 810b990:	af00      	add	r7, sp, #0
 810b992:	4603      	mov	r3, r0
 810b994:	603a      	str	r2, [r7, #0]
 810b996:	71fb      	strb	r3, [r7, #7]
 810b998:	460b      	mov	r3, r1
 810b99a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 810b99c:	2301      	movs	r3, #1
 810b99e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 810b9a2:	4b25      	ldr	r3, [pc, #148]	; (810ba38 <SD_ioctl+0xac>)
 810b9a4:	781b      	ldrb	r3, [r3, #0]
 810b9a6:	b2db      	uxtb	r3, r3
 810b9a8:	f003 0301 	and.w	r3, r3, #1
 810b9ac:	2b00      	cmp	r3, #0
 810b9ae:	d001      	beq.n	810b9b4 <SD_ioctl+0x28>
 810b9b0:	2303      	movs	r3, #3
 810b9b2:	e03c      	b.n	810ba2e <SD_ioctl+0xa2>

  switch (cmd)
 810b9b4:	79bb      	ldrb	r3, [r7, #6]
 810b9b6:	2b03      	cmp	r3, #3
 810b9b8:	d834      	bhi.n	810ba24 <SD_ioctl+0x98>
 810b9ba:	a201      	add	r2, pc, #4	; (adr r2, 810b9c0 <SD_ioctl+0x34>)
 810b9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b9c0:	0810b9d1 	.word	0x0810b9d1
 810b9c4:	0810b9d9 	.word	0x0810b9d9
 810b9c8:	0810b9f1 	.word	0x0810b9f1
 810b9cc:	0810ba0b 	.word	0x0810ba0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 810b9d0:	2300      	movs	r3, #0
 810b9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810b9d6:	e028      	b.n	810ba2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 810b9d8:	f107 0308 	add.w	r3, r7, #8
 810b9dc:	4618      	mov	r0, r3
 810b9de:	f7ff ff13 	bl	810b808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 810b9e2:	6a3a      	ldr	r2, [r7, #32]
 810b9e4:	683b      	ldr	r3, [r7, #0]
 810b9e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 810b9e8:	2300      	movs	r3, #0
 810b9ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810b9ee:	e01c      	b.n	810ba2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 810b9f0:	f107 0308 	add.w	r3, r7, #8
 810b9f4:	4618      	mov	r0, r3
 810b9f6:	f7ff ff07 	bl	810b808 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 810b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b9fc:	b29a      	uxth	r2, r3
 810b9fe:	683b      	ldr	r3, [r7, #0]
 810ba00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 810ba02:	2300      	movs	r3, #0
 810ba04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810ba08:	e00f      	b.n	810ba2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 810ba0a:	f107 0308 	add.w	r3, r7, #8
 810ba0e:	4618      	mov	r0, r3
 810ba10:	f7ff fefa 	bl	810b808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 810ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ba16:	0a5a      	lsrs	r2, r3, #9
 810ba18:	683b      	ldr	r3, [r7, #0]
 810ba1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 810ba1c:	2300      	movs	r3, #0
 810ba1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 810ba22:	e002      	b.n	810ba2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 810ba24:	2304      	movs	r3, #4
 810ba26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 810ba2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 810ba2e:	4618      	mov	r0, r3
 810ba30:	3730      	adds	r7, #48	; 0x30
 810ba32:	46bd      	mov	sp, r7
 810ba34:	bd80      	pop	{r7, pc}
 810ba36:	bf00      	nop
 810ba38:	1000000d 	.word	0x1000000d

0810ba3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 810ba3c:	b580      	push	{r7, lr}
 810ba3e:	b084      	sub	sp, #16
 810ba40:	af00      	add	r7, sp, #0
 810ba42:	60f8      	str	r0, [r7, #12]
 810ba44:	60b9      	str	r1, [r7, #8]
 810ba46:	4613      	mov	r3, r2
 810ba48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 810ba4a:	68fb      	ldr	r3, [r7, #12]
 810ba4c:	2b00      	cmp	r3, #0
 810ba4e:	d101      	bne.n	810ba54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 810ba50:	2302      	movs	r3, #2
 810ba52:	e029      	b.n	810baa8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 810ba54:	68fb      	ldr	r3, [r7, #12]
 810ba56:	79fa      	ldrb	r2, [r7, #7]
 810ba58:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 810ba5c:	68fb      	ldr	r3, [r7, #12]
 810ba5e:	2200      	movs	r2, #0
 810ba60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 810ba64:	68fb      	ldr	r3, [r7, #12]
 810ba66:	2200      	movs	r2, #0
 810ba68:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 810ba6c:	68f8      	ldr	r0, [r7, #12]
 810ba6e:	f000 f81f 	bl	810bab0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 810ba72:	68fb      	ldr	r3, [r7, #12]
 810ba74:	2200      	movs	r2, #0
 810ba76:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 810ba7a:	68fb      	ldr	r3, [r7, #12]
 810ba7c:	2200      	movs	r2, #0
 810ba7e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 810ba82:	68fb      	ldr	r3, [r7, #12]
 810ba84:	2200      	movs	r2, #0
 810ba86:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 810ba8a:	68fb      	ldr	r3, [r7, #12]
 810ba8c:	2200      	movs	r2, #0
 810ba8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 810ba92:	68bb      	ldr	r3, [r7, #8]
 810ba94:	2b00      	cmp	r3, #0
 810ba96:	d003      	beq.n	810baa0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 810ba98:	68fb      	ldr	r3, [r7, #12]
 810ba9a:	68ba      	ldr	r2, [r7, #8]
 810ba9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 810baa0:	68f8      	ldr	r0, [r7, #12]
 810baa2:	f001 fb0f 	bl	810d0c4 <USBH_LL_Init>

  return USBH_OK;
 810baa6:	2300      	movs	r3, #0
}
 810baa8:	4618      	mov	r0, r3
 810baaa:	3710      	adds	r7, #16
 810baac:	46bd      	mov	sp, r7
 810baae:	bd80      	pop	{r7, pc}

0810bab0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 810bab0:	b480      	push	{r7}
 810bab2:	b085      	sub	sp, #20
 810bab4:	af00      	add	r7, sp, #0
 810bab6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 810bab8:	2300      	movs	r3, #0
 810baba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 810babc:	2300      	movs	r3, #0
 810babe:	60fb      	str	r3, [r7, #12]
 810bac0:	e009      	b.n	810bad6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 810bac2:	687a      	ldr	r2, [r7, #4]
 810bac4:	68fb      	ldr	r3, [r7, #12]
 810bac6:	33e0      	adds	r3, #224	; 0xe0
 810bac8:	009b      	lsls	r3, r3, #2
 810baca:	4413      	add	r3, r2
 810bacc:	2200      	movs	r2, #0
 810bace:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 810bad0:	68fb      	ldr	r3, [r7, #12]
 810bad2:	3301      	adds	r3, #1
 810bad4:	60fb      	str	r3, [r7, #12]
 810bad6:	68fb      	ldr	r3, [r7, #12]
 810bad8:	2b0e      	cmp	r3, #14
 810bada:	d9f2      	bls.n	810bac2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 810badc:	2300      	movs	r3, #0
 810bade:	60fb      	str	r3, [r7, #12]
 810bae0:	e009      	b.n	810baf6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 810bae2:	687a      	ldr	r2, [r7, #4]
 810bae4:	68fb      	ldr	r3, [r7, #12]
 810bae6:	4413      	add	r3, r2
 810bae8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 810baec:	2200      	movs	r2, #0
 810baee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 810baf0:	68fb      	ldr	r3, [r7, #12]
 810baf2:	3301      	adds	r3, #1
 810baf4:	60fb      	str	r3, [r7, #12]
 810baf6:	68fb      	ldr	r3, [r7, #12]
 810baf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810bafc:	d3f1      	bcc.n	810bae2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 810bafe:	687b      	ldr	r3, [r7, #4]
 810bb00:	2200      	movs	r2, #0
 810bb02:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 810bb04:	687b      	ldr	r3, [r7, #4]
 810bb06:	2200      	movs	r2, #0
 810bb08:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 810bb0a:	687b      	ldr	r3, [r7, #4]
 810bb0c:	2201      	movs	r2, #1
 810bb0e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 810bb10:	687b      	ldr	r3, [r7, #4]
 810bb12:	2200      	movs	r2, #0
 810bb14:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 810bb18:	687b      	ldr	r3, [r7, #4]
 810bb1a:	2201      	movs	r2, #1
 810bb1c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 810bb1e:	687b      	ldr	r3, [r7, #4]
 810bb20:	2240      	movs	r2, #64	; 0x40
 810bb22:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 810bb24:	687b      	ldr	r3, [r7, #4]
 810bb26:	2200      	movs	r2, #0
 810bb28:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 810bb2a:	687b      	ldr	r3, [r7, #4]
 810bb2c:	2200      	movs	r2, #0
 810bb2e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 810bb32:	687b      	ldr	r3, [r7, #4]
 810bb34:	2201      	movs	r2, #1
 810bb36:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 810bb3a:	687b      	ldr	r3, [r7, #4]
 810bb3c:	2200      	movs	r2, #0
 810bb3e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 810bb42:	687b      	ldr	r3, [r7, #4]
 810bb44:	2200      	movs	r2, #0
 810bb46:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 810bb4a:	2300      	movs	r3, #0
}
 810bb4c:	4618      	mov	r0, r3
 810bb4e:	3714      	adds	r7, #20
 810bb50:	46bd      	mov	sp, r7
 810bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb56:	4770      	bx	lr

0810bb58 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 810bb58:	b480      	push	{r7}
 810bb5a:	b085      	sub	sp, #20
 810bb5c:	af00      	add	r7, sp, #0
 810bb5e:	6078      	str	r0, [r7, #4]
 810bb60:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 810bb62:	2300      	movs	r3, #0
 810bb64:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 810bb66:	683b      	ldr	r3, [r7, #0]
 810bb68:	2b00      	cmp	r3, #0
 810bb6a:	d016      	beq.n	810bb9a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 810bb6c:	687b      	ldr	r3, [r7, #4]
 810bb6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 810bb72:	2b00      	cmp	r3, #0
 810bb74:	d10e      	bne.n	810bb94 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 810bb76:	687b      	ldr	r3, [r7, #4]
 810bb78:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 810bb7c:	1c59      	adds	r1, r3, #1
 810bb7e:	687a      	ldr	r2, [r7, #4]
 810bb80:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 810bb84:	687a      	ldr	r2, [r7, #4]
 810bb86:	33de      	adds	r3, #222	; 0xde
 810bb88:	6839      	ldr	r1, [r7, #0]
 810bb8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 810bb8e:	2300      	movs	r3, #0
 810bb90:	73fb      	strb	r3, [r7, #15]
 810bb92:	e004      	b.n	810bb9e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 810bb94:	2302      	movs	r3, #2
 810bb96:	73fb      	strb	r3, [r7, #15]
 810bb98:	e001      	b.n	810bb9e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 810bb9a:	2302      	movs	r3, #2
 810bb9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 810bb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 810bba0:	4618      	mov	r0, r3
 810bba2:	3714      	adds	r7, #20
 810bba4:	46bd      	mov	sp, r7
 810bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbaa:	4770      	bx	lr

0810bbac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 810bbac:	b480      	push	{r7}
 810bbae:	b085      	sub	sp, #20
 810bbb0:	af00      	add	r7, sp, #0
 810bbb2:	6078      	str	r0, [r7, #4]
 810bbb4:	460b      	mov	r3, r1
 810bbb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 810bbb8:	2300      	movs	r3, #0
 810bbba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 810bbbc:	687b      	ldr	r3, [r7, #4]
 810bbbe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 810bbc2:	78fa      	ldrb	r2, [r7, #3]
 810bbc4:	429a      	cmp	r2, r3
 810bbc6:	d204      	bcs.n	810bbd2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 810bbc8:	687b      	ldr	r3, [r7, #4]
 810bbca:	78fa      	ldrb	r2, [r7, #3]
 810bbcc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 810bbd0:	e001      	b.n	810bbd6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 810bbd2:	2302      	movs	r3, #2
 810bbd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 810bbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 810bbd8:	4618      	mov	r0, r3
 810bbda:	3714      	adds	r7, #20
 810bbdc:	46bd      	mov	sp, r7
 810bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bbe2:	4770      	bx	lr

0810bbe4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 810bbe4:	b480      	push	{r7}
 810bbe6:	b087      	sub	sp, #28
 810bbe8:	af00      	add	r7, sp, #0
 810bbea:	6078      	str	r0, [r7, #4]
 810bbec:	4608      	mov	r0, r1
 810bbee:	4611      	mov	r1, r2
 810bbf0:	461a      	mov	r2, r3
 810bbf2:	4603      	mov	r3, r0
 810bbf4:	70fb      	strb	r3, [r7, #3]
 810bbf6:	460b      	mov	r3, r1
 810bbf8:	70bb      	strb	r3, [r7, #2]
 810bbfa:	4613      	mov	r3, r2
 810bbfc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 810bbfe:	2300      	movs	r3, #0
 810bc00:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 810bc02:	2300      	movs	r3, #0
 810bc04:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 810bc06:	687b      	ldr	r3, [r7, #4]
 810bc08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 810bc0c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 810bc0e:	e025      	b.n	810bc5c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 810bc10:	7dfb      	ldrb	r3, [r7, #23]
 810bc12:	221a      	movs	r2, #26
 810bc14:	fb02 f303 	mul.w	r3, r2, r3
 810bc18:	3308      	adds	r3, #8
 810bc1a:	68fa      	ldr	r2, [r7, #12]
 810bc1c:	4413      	add	r3, r2
 810bc1e:	3302      	adds	r3, #2
 810bc20:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 810bc22:	693b      	ldr	r3, [r7, #16]
 810bc24:	795b      	ldrb	r3, [r3, #5]
 810bc26:	78fa      	ldrb	r2, [r7, #3]
 810bc28:	429a      	cmp	r2, r3
 810bc2a:	d002      	beq.n	810bc32 <USBH_FindInterface+0x4e>
 810bc2c:	78fb      	ldrb	r3, [r7, #3]
 810bc2e:	2bff      	cmp	r3, #255	; 0xff
 810bc30:	d111      	bne.n	810bc56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 810bc32:	693b      	ldr	r3, [r7, #16]
 810bc34:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 810bc36:	78ba      	ldrb	r2, [r7, #2]
 810bc38:	429a      	cmp	r2, r3
 810bc3a:	d002      	beq.n	810bc42 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 810bc3c:	78bb      	ldrb	r3, [r7, #2]
 810bc3e:	2bff      	cmp	r3, #255	; 0xff
 810bc40:	d109      	bne.n	810bc56 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 810bc42:	693b      	ldr	r3, [r7, #16]
 810bc44:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 810bc46:	787a      	ldrb	r2, [r7, #1]
 810bc48:	429a      	cmp	r2, r3
 810bc4a:	d002      	beq.n	810bc52 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 810bc4c:	787b      	ldrb	r3, [r7, #1]
 810bc4e:	2bff      	cmp	r3, #255	; 0xff
 810bc50:	d101      	bne.n	810bc56 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 810bc52:	7dfb      	ldrb	r3, [r7, #23]
 810bc54:	e006      	b.n	810bc64 <USBH_FindInterface+0x80>
    }
    if_ix++;
 810bc56:	7dfb      	ldrb	r3, [r7, #23]
 810bc58:	3301      	adds	r3, #1
 810bc5a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 810bc5c:	7dfb      	ldrb	r3, [r7, #23]
 810bc5e:	2b01      	cmp	r3, #1
 810bc60:	d9d6      	bls.n	810bc10 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 810bc62:	23ff      	movs	r3, #255	; 0xff
}
 810bc64:	4618      	mov	r0, r3
 810bc66:	371c      	adds	r7, #28
 810bc68:	46bd      	mov	sp, r7
 810bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc6e:	4770      	bx	lr

0810bc70 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 810bc70:	b580      	push	{r7, lr}
 810bc72:	b082      	sub	sp, #8
 810bc74:	af00      	add	r7, sp, #0
 810bc76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 810bc78:	6878      	ldr	r0, [r7, #4]
 810bc7a:	f001 fa5f 	bl	810d13c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 810bc7e:	2101      	movs	r1, #1
 810bc80:	6878      	ldr	r0, [r7, #4]
 810bc82:	f001 fb36 	bl	810d2f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 810bc86:	2300      	movs	r3, #0
}
 810bc88:	4618      	mov	r0, r3
 810bc8a:	3708      	adds	r7, #8
 810bc8c:	46bd      	mov	sp, r7
 810bc8e:	bd80      	pop	{r7, pc}

0810bc90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 810bc90:	b480      	push	{r7}
 810bc92:	b083      	sub	sp, #12
 810bc94:	af00      	add	r7, sp, #0
 810bc96:	6078      	str	r0, [r7, #4]
 810bc98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 810bc9a:	687b      	ldr	r3, [r7, #4]
 810bc9c:	683a      	ldr	r2, [r7, #0]
 810bc9e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 810bca2:	bf00      	nop
 810bca4:	370c      	adds	r7, #12
 810bca6:	46bd      	mov	sp, r7
 810bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcac:	4770      	bx	lr

0810bcae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 810bcae:	b580      	push	{r7, lr}
 810bcb0:	b082      	sub	sp, #8
 810bcb2:	af00      	add	r7, sp, #0
 810bcb4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 810bcb6:	687b      	ldr	r3, [r7, #4]
 810bcb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 810bcbc:	1c5a      	adds	r2, r3, #1
 810bcbe:	687b      	ldr	r3, [r7, #4]
 810bcc0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 810bcc4:	6878      	ldr	r0, [r7, #4]
 810bcc6:	f000 f804 	bl	810bcd2 <USBH_HandleSof>
}
 810bcca:	bf00      	nop
 810bccc:	3708      	adds	r7, #8
 810bcce:	46bd      	mov	sp, r7
 810bcd0:	bd80      	pop	{r7, pc}

0810bcd2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 810bcd2:	b580      	push	{r7, lr}
 810bcd4:	b082      	sub	sp, #8
 810bcd6:	af00      	add	r7, sp, #0
 810bcd8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 810bcda:	687b      	ldr	r3, [r7, #4]
 810bcdc:	781b      	ldrb	r3, [r3, #0]
 810bcde:	b2db      	uxtb	r3, r3
 810bce0:	2b0b      	cmp	r3, #11
 810bce2:	d10a      	bne.n	810bcfa <USBH_HandleSof+0x28>
 810bce4:	687b      	ldr	r3, [r7, #4]
 810bce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810bcea:	2b00      	cmp	r3, #0
 810bcec:	d005      	beq.n	810bcfa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 810bcee:	687b      	ldr	r3, [r7, #4]
 810bcf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810bcf4:	699b      	ldr	r3, [r3, #24]
 810bcf6:	6878      	ldr	r0, [r7, #4]
 810bcf8:	4798      	blx	r3
  }
}
 810bcfa:	bf00      	nop
 810bcfc:	3708      	adds	r7, #8
 810bcfe:	46bd      	mov	sp, r7
 810bd00:	bd80      	pop	{r7, pc}

0810bd02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 810bd02:	b480      	push	{r7}
 810bd04:	b083      	sub	sp, #12
 810bd06:	af00      	add	r7, sp, #0
 810bd08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 810bd0a:	687b      	ldr	r3, [r7, #4]
 810bd0c:	2201      	movs	r2, #1
 810bd0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 810bd12:	bf00      	nop
}
 810bd14:	370c      	adds	r7, #12
 810bd16:	46bd      	mov	sp, r7
 810bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd1c:	4770      	bx	lr

0810bd1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 810bd1e:	b480      	push	{r7}
 810bd20:	b083      	sub	sp, #12
 810bd22:	af00      	add	r7, sp, #0
 810bd24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 810bd26:	687b      	ldr	r3, [r7, #4]
 810bd28:	2200      	movs	r2, #0
 810bd2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 810bd2e:	bf00      	nop
}
 810bd30:	370c      	adds	r7, #12
 810bd32:	46bd      	mov	sp, r7
 810bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd38:	4770      	bx	lr

0810bd3a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 810bd3a:	b480      	push	{r7}
 810bd3c:	b083      	sub	sp, #12
 810bd3e:	af00      	add	r7, sp, #0
 810bd40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 810bd42:	687b      	ldr	r3, [r7, #4]
 810bd44:	2201      	movs	r2, #1
 810bd46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 810bd4a:	687b      	ldr	r3, [r7, #4]
 810bd4c:	2200      	movs	r2, #0
 810bd4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 810bd52:	687b      	ldr	r3, [r7, #4]
 810bd54:	2200      	movs	r2, #0
 810bd56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 810bd5a:	2300      	movs	r3, #0
}
 810bd5c:	4618      	mov	r0, r3
 810bd5e:	370c      	adds	r7, #12
 810bd60:	46bd      	mov	sp, r7
 810bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd66:	4770      	bx	lr

0810bd68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 810bd68:	b580      	push	{r7, lr}
 810bd6a:	b082      	sub	sp, #8
 810bd6c:	af00      	add	r7, sp, #0
 810bd6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 810bd70:	687b      	ldr	r3, [r7, #4]
 810bd72:	2201      	movs	r2, #1
 810bd74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 810bd78:	687b      	ldr	r3, [r7, #4]
 810bd7a:	2200      	movs	r2, #0
 810bd7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 810bd80:	687b      	ldr	r3, [r7, #4]
 810bd82:	2200      	movs	r2, #0
 810bd84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 810bd88:	6878      	ldr	r0, [r7, #4]
 810bd8a:	f001 f9f2 	bl	810d172 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 810bd8e:	687b      	ldr	r3, [r7, #4]
 810bd90:	791b      	ldrb	r3, [r3, #4]
 810bd92:	4619      	mov	r1, r3
 810bd94:	6878      	ldr	r0, [r7, #4]
 810bd96:	f000 ffdd 	bl	810cd54 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 810bd9a:	687b      	ldr	r3, [r7, #4]
 810bd9c:	795b      	ldrb	r3, [r3, #5]
 810bd9e:	4619      	mov	r1, r3
 810bda0:	6878      	ldr	r0, [r7, #4]
 810bda2:	f000 ffd7 	bl	810cd54 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 810bda6:	2300      	movs	r3, #0
}
 810bda8:	4618      	mov	r0, r3
 810bdaa:	3708      	adds	r7, #8
 810bdac:	46bd      	mov	sp, r7
 810bdae:	bd80      	pop	{r7, pc}

0810bdb0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 810bdb0:	b580      	push	{r7, lr}
 810bdb2:	b084      	sub	sp, #16
 810bdb4:	af00      	add	r7, sp, #0
 810bdb6:	60f8      	str	r0, [r7, #12]
 810bdb8:	607b      	str	r3, [r7, #4]
 810bdba:	460b      	mov	r3, r1
 810bdbc:	72fb      	strb	r3, [r7, #11]
 810bdbe:	4613      	mov	r3, r2
 810bdc0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 810bdc2:	68fb      	ldr	r3, [r7, #12]
 810bdc4:	789b      	ldrb	r3, [r3, #2]
 810bdc6:	2b01      	cmp	r3, #1
 810bdc8:	d11c      	bne.n	810be04 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 810bdca:	7afb      	ldrb	r3, [r7, #11]
 810bdcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 810bdd0:	b2da      	uxtb	r2, r3
 810bdd2:	68fb      	ldr	r3, [r7, #12]
 810bdd4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 810bdd6:	68fb      	ldr	r3, [r7, #12]
 810bdd8:	2206      	movs	r2, #6
 810bdda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 810bddc:	68fb      	ldr	r3, [r7, #12]
 810bdde:	893a      	ldrh	r2, [r7, #8]
 810bde0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 810bde2:	893b      	ldrh	r3, [r7, #8]
 810bde4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 810bde8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810bdec:	d104      	bne.n	810bdf8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 810bdee:	68fb      	ldr	r3, [r7, #12]
 810bdf0:	f240 4209 	movw	r2, #1033	; 0x409
 810bdf4:	829a      	strh	r2, [r3, #20]
 810bdf6:	e002      	b.n	810bdfe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 810bdf8:	68fb      	ldr	r3, [r7, #12]
 810bdfa:	2200      	movs	r2, #0
 810bdfc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 810bdfe:	68fb      	ldr	r3, [r7, #12]
 810be00:	8b3a      	ldrh	r2, [r7, #24]
 810be02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 810be04:	8b3b      	ldrh	r3, [r7, #24]
 810be06:	461a      	mov	r2, r3
 810be08:	6879      	ldr	r1, [r7, #4]
 810be0a:	68f8      	ldr	r0, [r7, #12]
 810be0c:	f000 f844 	bl	810be98 <USBH_CtlReq>
 810be10:	4603      	mov	r3, r0
}
 810be12:	4618      	mov	r0, r3
 810be14:	3710      	adds	r7, #16
 810be16:	46bd      	mov	sp, r7
 810be18:	bd80      	pop	{r7, pc}

0810be1a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 810be1a:	b580      	push	{r7, lr}
 810be1c:	b082      	sub	sp, #8
 810be1e:	af00      	add	r7, sp, #0
 810be20:	6078      	str	r0, [r7, #4]
 810be22:	460b      	mov	r3, r1
 810be24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 810be26:	687b      	ldr	r3, [r7, #4]
 810be28:	789b      	ldrb	r3, [r3, #2]
 810be2a:	2b01      	cmp	r3, #1
 810be2c:	d10f      	bne.n	810be4e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 810be2e:	687b      	ldr	r3, [r7, #4]
 810be30:	2202      	movs	r2, #2
 810be32:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 810be34:	687b      	ldr	r3, [r7, #4]
 810be36:	2201      	movs	r2, #1
 810be38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 810be3a:	687b      	ldr	r3, [r7, #4]
 810be3c:	2200      	movs	r2, #0
 810be3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 810be40:	78fb      	ldrb	r3, [r7, #3]
 810be42:	b29a      	uxth	r2, r3
 810be44:	687b      	ldr	r3, [r7, #4]
 810be46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 810be48:	687b      	ldr	r3, [r7, #4]
 810be4a:	2200      	movs	r2, #0
 810be4c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 810be4e:	2200      	movs	r2, #0
 810be50:	2100      	movs	r1, #0
 810be52:	6878      	ldr	r0, [r7, #4]
 810be54:	f000 f820 	bl	810be98 <USBH_CtlReq>
 810be58:	4603      	mov	r3, r0
}
 810be5a:	4618      	mov	r0, r3
 810be5c:	3708      	adds	r7, #8
 810be5e:	46bd      	mov	sp, r7
 810be60:	bd80      	pop	{r7, pc}

0810be62 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 810be62:	b480      	push	{r7}
 810be64:	b085      	sub	sp, #20
 810be66:	af00      	add	r7, sp, #0
 810be68:	6078      	str	r0, [r7, #4]
 810be6a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 810be6c:	683b      	ldr	r3, [r7, #0]
 810be6e:	881a      	ldrh	r2, [r3, #0]
 810be70:	687b      	ldr	r3, [r7, #4]
 810be72:	781b      	ldrb	r3, [r3, #0]
 810be74:	b29b      	uxth	r3, r3
 810be76:	4413      	add	r3, r2
 810be78:	b29a      	uxth	r2, r3
 810be7a:	683b      	ldr	r3, [r7, #0]
 810be7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 810be7e:	687b      	ldr	r3, [r7, #4]
 810be80:	781b      	ldrb	r3, [r3, #0]
 810be82:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 810be84:	687b      	ldr	r3, [r7, #4]
 810be86:	4413      	add	r3, r2
 810be88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 810be8a:	68fb      	ldr	r3, [r7, #12]
}
 810be8c:	4618      	mov	r0, r3
 810be8e:	3714      	adds	r7, #20
 810be90:	46bd      	mov	sp, r7
 810be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be96:	4770      	bx	lr

0810be98 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 810be98:	b580      	push	{r7, lr}
 810be9a:	b086      	sub	sp, #24
 810be9c:	af00      	add	r7, sp, #0
 810be9e:	60f8      	str	r0, [r7, #12]
 810bea0:	60b9      	str	r1, [r7, #8]
 810bea2:	4613      	mov	r3, r2
 810bea4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 810bea6:	2301      	movs	r3, #1
 810bea8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 810beaa:	68fb      	ldr	r3, [r7, #12]
 810beac:	789b      	ldrb	r3, [r3, #2]
 810beae:	2b01      	cmp	r3, #1
 810beb0:	d002      	beq.n	810beb8 <USBH_CtlReq+0x20>
 810beb2:	2b02      	cmp	r3, #2
 810beb4:	d00f      	beq.n	810bed6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 810beb6:	e027      	b.n	810bf08 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 810beb8:	68fb      	ldr	r3, [r7, #12]
 810beba:	68ba      	ldr	r2, [r7, #8]
 810bebc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 810bebe:	68fb      	ldr	r3, [r7, #12]
 810bec0:	88fa      	ldrh	r2, [r7, #6]
 810bec2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 810bec4:	68fb      	ldr	r3, [r7, #12]
 810bec6:	2201      	movs	r2, #1
 810bec8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 810beca:	68fb      	ldr	r3, [r7, #12]
 810becc:	2202      	movs	r2, #2
 810bece:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 810bed0:	2301      	movs	r3, #1
 810bed2:	75fb      	strb	r3, [r7, #23]
      break;
 810bed4:	e018      	b.n	810bf08 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 810bed6:	68f8      	ldr	r0, [r7, #12]
 810bed8:	f000 f81c 	bl	810bf14 <USBH_HandleControl>
 810bedc:	4603      	mov	r3, r0
 810bede:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 810bee0:	7dfb      	ldrb	r3, [r7, #23]
 810bee2:	2b00      	cmp	r3, #0
 810bee4:	d002      	beq.n	810beec <USBH_CtlReq+0x54>
 810bee6:	7dfb      	ldrb	r3, [r7, #23]
 810bee8:	2b03      	cmp	r3, #3
 810beea:	d106      	bne.n	810befa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 810beec:	68fb      	ldr	r3, [r7, #12]
 810beee:	2201      	movs	r2, #1
 810bef0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 810bef2:	68fb      	ldr	r3, [r7, #12]
 810bef4:	2200      	movs	r2, #0
 810bef6:	761a      	strb	r2, [r3, #24]
      break;
 810bef8:	e005      	b.n	810bf06 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 810befa:	7dfb      	ldrb	r3, [r7, #23]
 810befc:	2b02      	cmp	r3, #2
 810befe:	d102      	bne.n	810bf06 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 810bf00:	68fb      	ldr	r3, [r7, #12]
 810bf02:	2201      	movs	r2, #1
 810bf04:	709a      	strb	r2, [r3, #2]
      break;
 810bf06:	bf00      	nop
  }
  return status;
 810bf08:	7dfb      	ldrb	r3, [r7, #23]
}
 810bf0a:	4618      	mov	r0, r3
 810bf0c:	3718      	adds	r7, #24
 810bf0e:	46bd      	mov	sp, r7
 810bf10:	bd80      	pop	{r7, pc}
	...

0810bf14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 810bf14:	b580      	push	{r7, lr}
 810bf16:	b086      	sub	sp, #24
 810bf18:	af02      	add	r7, sp, #8
 810bf1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 810bf1c:	2301      	movs	r3, #1
 810bf1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 810bf20:	2300      	movs	r3, #0
 810bf22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 810bf24:	687b      	ldr	r3, [r7, #4]
 810bf26:	7e1b      	ldrb	r3, [r3, #24]
 810bf28:	3b01      	subs	r3, #1
 810bf2a:	2b0a      	cmp	r3, #10
 810bf2c:	f200 8156 	bhi.w	810c1dc <USBH_HandleControl+0x2c8>
 810bf30:	a201      	add	r2, pc, #4	; (adr r2, 810bf38 <USBH_HandleControl+0x24>)
 810bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bf36:	bf00      	nop
 810bf38:	0810bf65 	.word	0x0810bf65
 810bf3c:	0810bf7f 	.word	0x0810bf7f
 810bf40:	0810bfe9 	.word	0x0810bfe9
 810bf44:	0810c00f 	.word	0x0810c00f
 810bf48:	0810c047 	.word	0x0810c047
 810bf4c:	0810c071 	.word	0x0810c071
 810bf50:	0810c0c3 	.word	0x0810c0c3
 810bf54:	0810c0e5 	.word	0x0810c0e5
 810bf58:	0810c121 	.word	0x0810c121
 810bf5c:	0810c147 	.word	0x0810c147
 810bf60:	0810c185 	.word	0x0810c185
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 810bf64:	687b      	ldr	r3, [r7, #4]
 810bf66:	f103 0110 	add.w	r1, r3, #16
 810bf6a:	687b      	ldr	r3, [r7, #4]
 810bf6c:	795b      	ldrb	r3, [r3, #5]
 810bf6e:	461a      	mov	r2, r3
 810bf70:	6878      	ldr	r0, [r7, #4]
 810bf72:	f000 fe23 	bl	810cbbc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 810bf76:	687b      	ldr	r3, [r7, #4]
 810bf78:	2202      	movs	r2, #2
 810bf7a:	761a      	strb	r2, [r3, #24]
      break;
 810bf7c:	e139      	b.n	810c1f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 810bf7e:	687b      	ldr	r3, [r7, #4]
 810bf80:	795b      	ldrb	r3, [r3, #5]
 810bf82:	4619      	mov	r1, r3
 810bf84:	6878      	ldr	r0, [r7, #4]
 810bf86:	f001 f9a1 	bl	810d2cc <USBH_LL_GetURBState>
 810bf8a:	4603      	mov	r3, r0
 810bf8c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 810bf8e:	7bbb      	ldrb	r3, [r7, #14]
 810bf90:	2b01      	cmp	r3, #1
 810bf92:	d11e      	bne.n	810bfd2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 810bf94:	687b      	ldr	r3, [r7, #4]
 810bf96:	7c1b      	ldrb	r3, [r3, #16]
 810bf98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810bf9c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 810bf9e:	687b      	ldr	r3, [r7, #4]
 810bfa0:	8adb      	ldrh	r3, [r3, #22]
 810bfa2:	2b00      	cmp	r3, #0
 810bfa4:	d00a      	beq.n	810bfbc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 810bfa6:	7b7b      	ldrb	r3, [r7, #13]
 810bfa8:	2b80      	cmp	r3, #128	; 0x80
 810bfaa:	d103      	bne.n	810bfb4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 810bfac:	687b      	ldr	r3, [r7, #4]
 810bfae:	2203      	movs	r2, #3
 810bfb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 810bfb2:	e115      	b.n	810c1e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 810bfb4:	687b      	ldr	r3, [r7, #4]
 810bfb6:	2205      	movs	r2, #5
 810bfb8:	761a      	strb	r2, [r3, #24]
      break;
 810bfba:	e111      	b.n	810c1e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 810bfbc:	7b7b      	ldrb	r3, [r7, #13]
 810bfbe:	2b80      	cmp	r3, #128	; 0x80
 810bfc0:	d103      	bne.n	810bfca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 810bfc2:	687b      	ldr	r3, [r7, #4]
 810bfc4:	2209      	movs	r2, #9
 810bfc6:	761a      	strb	r2, [r3, #24]
      break;
 810bfc8:	e10a      	b.n	810c1e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 810bfca:	687b      	ldr	r3, [r7, #4]
 810bfcc:	2207      	movs	r2, #7
 810bfce:	761a      	strb	r2, [r3, #24]
      break;
 810bfd0:	e106      	b.n	810c1e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 810bfd2:	7bbb      	ldrb	r3, [r7, #14]
 810bfd4:	2b04      	cmp	r3, #4
 810bfd6:	d003      	beq.n	810bfe0 <USBH_HandleControl+0xcc>
 810bfd8:	7bbb      	ldrb	r3, [r7, #14]
 810bfda:	2b02      	cmp	r3, #2
 810bfdc:	f040 8100 	bne.w	810c1e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 810bfe0:	687b      	ldr	r3, [r7, #4]
 810bfe2:	220b      	movs	r2, #11
 810bfe4:	761a      	strb	r2, [r3, #24]
      break;
 810bfe6:	e0fb      	b.n	810c1e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 810bfe8:	687b      	ldr	r3, [r7, #4]
 810bfea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 810bfee:	b29a      	uxth	r2, r3
 810bff0:	687b      	ldr	r3, [r7, #4]
 810bff2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 810bff4:	687b      	ldr	r3, [r7, #4]
 810bff6:	6899      	ldr	r1, [r3, #8]
 810bff8:	687b      	ldr	r3, [r7, #4]
 810bffa:	899a      	ldrh	r2, [r3, #12]
 810bffc:	687b      	ldr	r3, [r7, #4]
 810bffe:	791b      	ldrb	r3, [r3, #4]
 810c000:	6878      	ldr	r0, [r7, #4]
 810c002:	f000 fe1a 	bl	810cc3a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 810c006:	687b      	ldr	r3, [r7, #4]
 810c008:	2204      	movs	r2, #4
 810c00a:	761a      	strb	r2, [r3, #24]
      break;
 810c00c:	e0f1      	b.n	810c1f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 810c00e:	687b      	ldr	r3, [r7, #4]
 810c010:	791b      	ldrb	r3, [r3, #4]
 810c012:	4619      	mov	r1, r3
 810c014:	6878      	ldr	r0, [r7, #4]
 810c016:	f001 f959 	bl	810d2cc <USBH_LL_GetURBState>
 810c01a:	4603      	mov	r3, r0
 810c01c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 810c01e:	7bbb      	ldrb	r3, [r7, #14]
 810c020:	2b01      	cmp	r3, #1
 810c022:	d102      	bne.n	810c02a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 810c024:	687b      	ldr	r3, [r7, #4]
 810c026:	2209      	movs	r2, #9
 810c028:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 810c02a:	7bbb      	ldrb	r3, [r7, #14]
 810c02c:	2b05      	cmp	r3, #5
 810c02e:	d102      	bne.n	810c036 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 810c030:	2303      	movs	r3, #3
 810c032:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 810c034:	e0d6      	b.n	810c1e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 810c036:	7bbb      	ldrb	r3, [r7, #14]
 810c038:	2b04      	cmp	r3, #4
 810c03a:	f040 80d3 	bne.w	810c1e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 810c03e:	687b      	ldr	r3, [r7, #4]
 810c040:	220b      	movs	r2, #11
 810c042:	761a      	strb	r2, [r3, #24]
      break;
 810c044:	e0ce      	b.n	810c1e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 810c046:	687b      	ldr	r3, [r7, #4]
 810c048:	6899      	ldr	r1, [r3, #8]
 810c04a:	687b      	ldr	r3, [r7, #4]
 810c04c:	899a      	ldrh	r2, [r3, #12]
 810c04e:	687b      	ldr	r3, [r7, #4]
 810c050:	795b      	ldrb	r3, [r3, #5]
 810c052:	2001      	movs	r0, #1
 810c054:	9000      	str	r0, [sp, #0]
 810c056:	6878      	ldr	r0, [r7, #4]
 810c058:	f000 fdca 	bl	810cbf0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 810c05c:	687b      	ldr	r3, [r7, #4]
 810c05e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 810c062:	b29a      	uxth	r2, r3
 810c064:	687b      	ldr	r3, [r7, #4]
 810c066:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 810c068:	687b      	ldr	r3, [r7, #4]
 810c06a:	2206      	movs	r2, #6
 810c06c:	761a      	strb	r2, [r3, #24]
      break;
 810c06e:	e0c0      	b.n	810c1f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 810c070:	687b      	ldr	r3, [r7, #4]
 810c072:	795b      	ldrb	r3, [r3, #5]
 810c074:	4619      	mov	r1, r3
 810c076:	6878      	ldr	r0, [r7, #4]
 810c078:	f001 f928 	bl	810d2cc <USBH_LL_GetURBState>
 810c07c:	4603      	mov	r3, r0
 810c07e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 810c080:	7bbb      	ldrb	r3, [r7, #14]
 810c082:	2b01      	cmp	r3, #1
 810c084:	d103      	bne.n	810c08e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 810c086:	687b      	ldr	r3, [r7, #4]
 810c088:	2207      	movs	r2, #7
 810c08a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 810c08c:	e0ac      	b.n	810c1e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 810c08e:	7bbb      	ldrb	r3, [r7, #14]
 810c090:	2b05      	cmp	r3, #5
 810c092:	d105      	bne.n	810c0a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 810c094:	687b      	ldr	r3, [r7, #4]
 810c096:	220c      	movs	r2, #12
 810c098:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 810c09a:	2303      	movs	r3, #3
 810c09c:	73fb      	strb	r3, [r7, #15]
      break;
 810c09e:	e0a3      	b.n	810c1e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 810c0a0:	7bbb      	ldrb	r3, [r7, #14]
 810c0a2:	2b02      	cmp	r3, #2
 810c0a4:	d103      	bne.n	810c0ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 810c0a6:	687b      	ldr	r3, [r7, #4]
 810c0a8:	2205      	movs	r2, #5
 810c0aa:	761a      	strb	r2, [r3, #24]
      break;
 810c0ac:	e09c      	b.n	810c1e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 810c0ae:	7bbb      	ldrb	r3, [r7, #14]
 810c0b0:	2b04      	cmp	r3, #4
 810c0b2:	f040 8099 	bne.w	810c1e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 810c0b6:	687b      	ldr	r3, [r7, #4]
 810c0b8:	220b      	movs	r2, #11
 810c0ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 810c0bc:	2302      	movs	r3, #2
 810c0be:	73fb      	strb	r3, [r7, #15]
      break;
 810c0c0:	e092      	b.n	810c1e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 810c0c2:	687b      	ldr	r3, [r7, #4]
 810c0c4:	791b      	ldrb	r3, [r3, #4]
 810c0c6:	2200      	movs	r2, #0
 810c0c8:	2100      	movs	r1, #0
 810c0ca:	6878      	ldr	r0, [r7, #4]
 810c0cc:	f000 fdb5 	bl	810cc3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 810c0d0:	687b      	ldr	r3, [r7, #4]
 810c0d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 810c0d6:	b29a      	uxth	r2, r3
 810c0d8:	687b      	ldr	r3, [r7, #4]
 810c0da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 810c0dc:	687b      	ldr	r3, [r7, #4]
 810c0de:	2208      	movs	r2, #8
 810c0e0:	761a      	strb	r2, [r3, #24]

      break;
 810c0e2:	e086      	b.n	810c1f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 810c0e4:	687b      	ldr	r3, [r7, #4]
 810c0e6:	791b      	ldrb	r3, [r3, #4]
 810c0e8:	4619      	mov	r1, r3
 810c0ea:	6878      	ldr	r0, [r7, #4]
 810c0ec:	f001 f8ee 	bl	810d2cc <USBH_LL_GetURBState>
 810c0f0:	4603      	mov	r3, r0
 810c0f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 810c0f4:	7bbb      	ldrb	r3, [r7, #14]
 810c0f6:	2b01      	cmp	r3, #1
 810c0f8:	d105      	bne.n	810c106 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 810c0fa:	687b      	ldr	r3, [r7, #4]
 810c0fc:	220d      	movs	r2, #13
 810c0fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 810c100:	2300      	movs	r3, #0
 810c102:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 810c104:	e072      	b.n	810c1ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 810c106:	7bbb      	ldrb	r3, [r7, #14]
 810c108:	2b04      	cmp	r3, #4
 810c10a:	d103      	bne.n	810c114 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 810c10c:	687b      	ldr	r3, [r7, #4]
 810c10e:	220b      	movs	r2, #11
 810c110:	761a      	strb	r2, [r3, #24]
      break;
 810c112:	e06b      	b.n	810c1ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 810c114:	7bbb      	ldrb	r3, [r7, #14]
 810c116:	2b05      	cmp	r3, #5
 810c118:	d168      	bne.n	810c1ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 810c11a:	2303      	movs	r3, #3
 810c11c:	73fb      	strb	r3, [r7, #15]
      break;
 810c11e:	e065      	b.n	810c1ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 810c120:	687b      	ldr	r3, [r7, #4]
 810c122:	795b      	ldrb	r3, [r3, #5]
 810c124:	2201      	movs	r2, #1
 810c126:	9200      	str	r2, [sp, #0]
 810c128:	2200      	movs	r2, #0
 810c12a:	2100      	movs	r1, #0
 810c12c:	6878      	ldr	r0, [r7, #4]
 810c12e:	f000 fd5f 	bl	810cbf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 810c132:	687b      	ldr	r3, [r7, #4]
 810c134:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 810c138:	b29a      	uxth	r2, r3
 810c13a:	687b      	ldr	r3, [r7, #4]
 810c13c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 810c13e:	687b      	ldr	r3, [r7, #4]
 810c140:	220a      	movs	r2, #10
 810c142:	761a      	strb	r2, [r3, #24]
      break;
 810c144:	e055      	b.n	810c1f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 810c146:	687b      	ldr	r3, [r7, #4]
 810c148:	795b      	ldrb	r3, [r3, #5]
 810c14a:	4619      	mov	r1, r3
 810c14c:	6878      	ldr	r0, [r7, #4]
 810c14e:	f001 f8bd 	bl	810d2cc <USBH_LL_GetURBState>
 810c152:	4603      	mov	r3, r0
 810c154:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 810c156:	7bbb      	ldrb	r3, [r7, #14]
 810c158:	2b01      	cmp	r3, #1
 810c15a:	d105      	bne.n	810c168 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 810c15c:	2300      	movs	r3, #0
 810c15e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	220d      	movs	r2, #13
 810c164:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 810c166:	e043      	b.n	810c1f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 810c168:	7bbb      	ldrb	r3, [r7, #14]
 810c16a:	2b02      	cmp	r3, #2
 810c16c:	d103      	bne.n	810c176 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 810c16e:	687b      	ldr	r3, [r7, #4]
 810c170:	2209      	movs	r2, #9
 810c172:	761a      	strb	r2, [r3, #24]
      break;
 810c174:	e03c      	b.n	810c1f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 810c176:	7bbb      	ldrb	r3, [r7, #14]
 810c178:	2b04      	cmp	r3, #4
 810c17a:	d139      	bne.n	810c1f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 810c17c:	687b      	ldr	r3, [r7, #4]
 810c17e:	220b      	movs	r2, #11
 810c180:	761a      	strb	r2, [r3, #24]
      break;
 810c182:	e035      	b.n	810c1f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 810c184:	687b      	ldr	r3, [r7, #4]
 810c186:	7e5b      	ldrb	r3, [r3, #25]
 810c188:	3301      	adds	r3, #1
 810c18a:	b2da      	uxtb	r2, r3
 810c18c:	687b      	ldr	r3, [r7, #4]
 810c18e:	765a      	strb	r2, [r3, #25]
 810c190:	687b      	ldr	r3, [r7, #4]
 810c192:	7e5b      	ldrb	r3, [r3, #25]
 810c194:	2b02      	cmp	r3, #2
 810c196:	d806      	bhi.n	810c1a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 810c198:	687b      	ldr	r3, [r7, #4]
 810c19a:	2201      	movs	r2, #1
 810c19c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 810c19e:	687b      	ldr	r3, [r7, #4]
 810c1a0:	2201      	movs	r2, #1
 810c1a2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 810c1a4:	e025      	b.n	810c1f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 810c1a6:	687b      	ldr	r3, [r7, #4]
 810c1a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 810c1ac:	2106      	movs	r1, #6
 810c1ae:	6878      	ldr	r0, [r7, #4]
 810c1b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 810c1b2:	687b      	ldr	r3, [r7, #4]
 810c1b4:	2200      	movs	r2, #0
 810c1b6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 810c1b8:	687b      	ldr	r3, [r7, #4]
 810c1ba:	795b      	ldrb	r3, [r3, #5]
 810c1bc:	4619      	mov	r1, r3
 810c1be:	6878      	ldr	r0, [r7, #4]
 810c1c0:	f000 fdc8 	bl	810cd54 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 810c1c4:	687b      	ldr	r3, [r7, #4]
 810c1c6:	791b      	ldrb	r3, [r3, #4]
 810c1c8:	4619      	mov	r1, r3
 810c1ca:	6878      	ldr	r0, [r7, #4]
 810c1cc:	f000 fdc2 	bl	810cd54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 810c1d0:	687b      	ldr	r3, [r7, #4]
 810c1d2:	2200      	movs	r2, #0
 810c1d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 810c1d6:	2302      	movs	r3, #2
 810c1d8:	73fb      	strb	r3, [r7, #15]
      break;
 810c1da:	e00a      	b.n	810c1f2 <USBH_HandleControl+0x2de>

    default:
      break;
 810c1dc:	bf00      	nop
 810c1de:	e008      	b.n	810c1f2 <USBH_HandleControl+0x2de>
      break;
 810c1e0:	bf00      	nop
 810c1e2:	e006      	b.n	810c1f2 <USBH_HandleControl+0x2de>
      break;
 810c1e4:	bf00      	nop
 810c1e6:	e004      	b.n	810c1f2 <USBH_HandleControl+0x2de>
      break;
 810c1e8:	bf00      	nop
 810c1ea:	e002      	b.n	810c1f2 <USBH_HandleControl+0x2de>
      break;
 810c1ec:	bf00      	nop
 810c1ee:	e000      	b.n	810c1f2 <USBH_HandleControl+0x2de>
      break;
 810c1f0:	bf00      	nop
  }

  return status;
 810c1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 810c1f4:	4618      	mov	r0, r3
 810c1f6:	3710      	adds	r7, #16
 810c1f8:	46bd      	mov	sp, r7
 810c1fa:	bd80      	pop	{r7, pc}

0810c1fc <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 810c1fc:	b590      	push	{r4, r7, lr}
 810c1fe:	b08b      	sub	sp, #44	; 0x2c
 810c200:	af04      	add	r7, sp, #16
 810c202:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 810c204:	2300      	movs	r3, #0
 810c206:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 810c208:	687b      	ldr	r3, [r7, #4]
 810c20a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c20e:	7919      	ldrb	r1, [r3, #4]
 810c210:	23ff      	movs	r3, #255	; 0xff
 810c212:	2201      	movs	r2, #1
 810c214:	6878      	ldr	r0, [r7, #4]
 810c216:	f7ff fce5 	bl	810bbe4 <USBH_FindInterface>
 810c21a:	4603      	mov	r3, r0
 810c21c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 810c21e:	7dbb      	ldrb	r3, [r7, #22]
 810c220:	2bff      	cmp	r3, #255	; 0xff
 810c222:	d002      	beq.n	810c22a <USBH_HID_InterfaceInit+0x2e>
 810c224:	7dbb      	ldrb	r3, [r7, #22]
 810c226:	2b01      	cmp	r3, #1
 810c228:	d901      	bls.n	810c22e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 810c22a:	2302      	movs	r3, #2
 810c22c:	e108      	b.n	810c440 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 810c22e:	7dbb      	ldrb	r3, [r7, #22]
 810c230:	4619      	mov	r1, r3
 810c232:	6878      	ldr	r0, [r7, #4]
 810c234:	f7ff fcba 	bl	810bbac <USBH_SelectInterface>
 810c238:	4603      	mov	r3, r0
 810c23a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 810c23c:	7d7b      	ldrb	r3, [r7, #21]
 810c23e:	2b00      	cmp	r3, #0
 810c240:	d001      	beq.n	810c246 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 810c242:	2302      	movs	r3, #2
 810c244:	e0fc      	b.n	810c440 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 810c24c:	2034      	movs	r0, #52	; 0x34
 810c24e:	f001 f929 	bl	810d4a4 <malloc>
 810c252:	4603      	mov	r3, r0
 810c254:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810c256:	687b      	ldr	r3, [r7, #4]
 810c258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c25c:	69db      	ldr	r3, [r3, #28]
 810c25e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 810c260:	693b      	ldr	r3, [r7, #16]
 810c262:	2b00      	cmp	r3, #0
 810c264:	d101      	bne.n	810c26a <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 810c266:	2302      	movs	r3, #2
 810c268:	e0ea      	b.n	810c440 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 810c26a:	2234      	movs	r2, #52	; 0x34
 810c26c:	2100      	movs	r1, #0
 810c26e:	6938      	ldr	r0, [r7, #16]
 810c270:	f001 f928 	bl	810d4c4 <memset>

  HID_Handle->state = HID_ERROR;
 810c274:	693b      	ldr	r3, [r7, #16]
 810c276:	2207      	movs	r2, #7
 810c278:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 810c27a:	7dbb      	ldrb	r3, [r7, #22]
 810c27c:	687a      	ldr	r2, [r7, #4]
 810c27e:	211a      	movs	r1, #26
 810c280:	fb01 f303 	mul.w	r3, r1, r3
 810c284:	4413      	add	r3, r2
 810c286:	f203 3349 	addw	r3, r3, #841	; 0x349
 810c28a:	781b      	ldrb	r3, [r3, #0]
 810c28c:	2b01      	cmp	r3, #1
 810c28e:	d103      	bne.n	810c298 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 810c290:	693b      	ldr	r3, [r7, #16]
 810c292:	4a6d      	ldr	r2, [pc, #436]	; (810c448 <USBH_HID_InterfaceInit+0x24c>)
 810c294:	631a      	str	r2, [r3, #48]	; 0x30
 810c296:	e010      	b.n	810c2ba <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 810c298:	7dbb      	ldrb	r3, [r7, #22]
 810c29a:	687a      	ldr	r2, [r7, #4]
 810c29c:	211a      	movs	r1, #26
 810c29e:	fb01 f303 	mul.w	r3, r1, r3
 810c2a2:	4413      	add	r3, r2
 810c2a4:	f203 3349 	addw	r3, r3, #841	; 0x349
 810c2a8:	781b      	ldrb	r3, [r3, #0]
 810c2aa:	2b02      	cmp	r3, #2
 810c2ac:	d103      	bne.n	810c2b6 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 810c2ae:	693b      	ldr	r3, [r7, #16]
 810c2b0:	4a66      	ldr	r2, [pc, #408]	; (810c44c <USBH_HID_InterfaceInit+0x250>)
 810c2b2:	631a      	str	r2, [r3, #48]	; 0x30
 810c2b4:	e001      	b.n	810c2ba <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 810c2b6:	2302      	movs	r3, #2
 810c2b8:	e0c2      	b.n	810c440 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 810c2ba:	693b      	ldr	r3, [r7, #16]
 810c2bc:	2200      	movs	r2, #0
 810c2be:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 810c2c0:	693b      	ldr	r3, [r7, #16]
 810c2c2:	2200      	movs	r2, #0
 810c2c4:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 810c2c6:	7dbb      	ldrb	r3, [r7, #22]
 810c2c8:	687a      	ldr	r2, [r7, #4]
 810c2ca:	211a      	movs	r1, #26
 810c2cc:	fb01 f303 	mul.w	r3, r1, r3
 810c2d0:	4413      	add	r3, r2
 810c2d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 810c2d6:	781a      	ldrb	r2, [r3, #0]
 810c2d8:	693b      	ldr	r3, [r7, #16]
 810c2da:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 810c2dc:	7dbb      	ldrb	r3, [r7, #22]
 810c2de:	687a      	ldr	r2, [r7, #4]
 810c2e0:	211a      	movs	r1, #26
 810c2e2:	fb01 f303 	mul.w	r3, r1, r3
 810c2e6:	4413      	add	r3, r2
 810c2e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 810c2ec:	881a      	ldrh	r2, [r3, #0]
 810c2ee:	693b      	ldr	r3, [r7, #16]
 810c2f0:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 810c2f2:	7dbb      	ldrb	r3, [r7, #22]
 810c2f4:	687a      	ldr	r2, [r7, #4]
 810c2f6:	211a      	movs	r1, #26
 810c2f8:	fb01 f303 	mul.w	r3, r1, r3
 810c2fc:	4413      	add	r3, r2
 810c2fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 810c302:	781b      	ldrb	r3, [r3, #0]
 810c304:	b29a      	uxth	r2, r3
 810c306:	693b      	ldr	r3, [r7, #16]
 810c308:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 810c30a:	693b      	ldr	r3, [r7, #16]
 810c30c:	8b9b      	ldrh	r3, [r3, #28]
 810c30e:	2b09      	cmp	r3, #9
 810c310:	d802      	bhi.n	810c318 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 810c312:	693b      	ldr	r3, [r7, #16]
 810c314:	220a      	movs	r2, #10
 810c316:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 810c318:	7dbb      	ldrb	r3, [r7, #22]
 810c31a:	687a      	ldr	r2, [r7, #4]
 810c31c:	211a      	movs	r1, #26
 810c31e:	fb01 f303 	mul.w	r3, r1, r3
 810c322:	4413      	add	r3, r2
 810c324:	f203 3346 	addw	r3, r3, #838	; 0x346
 810c328:	781b      	ldrb	r3, [r3, #0]
 810c32a:	2b02      	cmp	r3, #2
 810c32c:	bf28      	it	cs
 810c32e:	2302      	movcs	r3, #2
 810c330:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 810c332:	2300      	movs	r3, #0
 810c334:	75fb      	strb	r3, [r7, #23]
 810c336:	e07d      	b.n	810c434 <USBH_HID_InterfaceInit+0x238>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 810c338:	7dbb      	ldrb	r3, [r7, #22]
 810c33a:	7df9      	ldrb	r1, [r7, #23]
 810c33c:	687a      	ldr	r2, [r7, #4]
 810c33e:	3101      	adds	r1, #1
 810c340:	00c9      	lsls	r1, r1, #3
 810c342:	201a      	movs	r0, #26
 810c344:	fb00 f303 	mul.w	r3, r0, r3
 810c348:	440b      	add	r3, r1
 810c34a:	4413      	add	r3, r2
 810c34c:	f203 3346 	addw	r3, r3, #838	; 0x346
 810c350:	781b      	ldrb	r3, [r3, #0]
 810c352:	b25b      	sxtb	r3, r3
 810c354:	2b00      	cmp	r3, #0
 810c356:	da35      	bge.n	810c3c4 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 810c358:	7dbb      	ldrb	r3, [r7, #22]
 810c35a:	7df9      	ldrb	r1, [r7, #23]
 810c35c:	687a      	ldr	r2, [r7, #4]
 810c35e:	3101      	adds	r1, #1
 810c360:	00c9      	lsls	r1, r1, #3
 810c362:	201a      	movs	r0, #26
 810c364:	fb00 f303 	mul.w	r3, r0, r3
 810c368:	440b      	add	r3, r1
 810c36a:	4413      	add	r3, r2
 810c36c:	f203 3346 	addw	r3, r3, #838	; 0x346
 810c370:	781a      	ldrb	r2, [r3, #0]
 810c372:	693b      	ldr	r3, [r7, #16]
 810c374:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 810c376:	693b      	ldr	r3, [r7, #16]
 810c378:	791b      	ldrb	r3, [r3, #4]
 810c37a:	4619      	mov	r1, r3
 810c37c:	6878      	ldr	r0, [r7, #4]
 810c37e:	f000 fcc8 	bl	810cd12 <USBH_AllocPipe>
 810c382:	4603      	mov	r3, r0
 810c384:	461a      	mov	r2, r3
 810c386:	693b      	ldr	r3, [r7, #16]
 810c388:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 810c38a:	693b      	ldr	r3, [r7, #16]
 810c38c:	7859      	ldrb	r1, [r3, #1]
 810c38e:	693b      	ldr	r3, [r7, #16]
 810c390:	7918      	ldrb	r0, [r3, #4]
 810c392:	687b      	ldr	r3, [r7, #4]
 810c394:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 810c398:	687b      	ldr	r3, [r7, #4]
 810c39a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 810c39e:	693a      	ldr	r2, [r7, #16]
 810c3a0:	8b12      	ldrh	r2, [r2, #24]
 810c3a2:	9202      	str	r2, [sp, #8]
 810c3a4:	2203      	movs	r2, #3
 810c3a6:	9201      	str	r2, [sp, #4]
 810c3a8:	9300      	str	r3, [sp, #0]
 810c3aa:	4623      	mov	r3, r4
 810c3ac:	4602      	mov	r2, r0
 810c3ae:	6878      	ldr	r0, [r7, #4]
 810c3b0:	f000 fc80 	bl	810ccb4 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 810c3b4:	693b      	ldr	r3, [r7, #16]
 810c3b6:	785b      	ldrb	r3, [r3, #1]
 810c3b8:	2200      	movs	r2, #0
 810c3ba:	4619      	mov	r1, r3
 810c3bc:	6878      	ldr	r0, [r7, #4]
 810c3be:	f000 ffaf 	bl	810d320 <USBH_LL_SetToggle>
 810c3c2:	e034      	b.n	810c42e <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 810c3c4:	7dbb      	ldrb	r3, [r7, #22]
 810c3c6:	7df9      	ldrb	r1, [r7, #23]
 810c3c8:	687a      	ldr	r2, [r7, #4]
 810c3ca:	3101      	adds	r1, #1
 810c3cc:	00c9      	lsls	r1, r1, #3
 810c3ce:	201a      	movs	r0, #26
 810c3d0:	fb00 f303 	mul.w	r3, r0, r3
 810c3d4:	440b      	add	r3, r1
 810c3d6:	4413      	add	r3, r2
 810c3d8:	f203 3346 	addw	r3, r3, #838	; 0x346
 810c3dc:	781a      	ldrb	r2, [r3, #0]
 810c3de:	693b      	ldr	r3, [r7, #16]
 810c3e0:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 810c3e2:	693b      	ldr	r3, [r7, #16]
 810c3e4:	78db      	ldrb	r3, [r3, #3]
 810c3e6:	4619      	mov	r1, r3
 810c3e8:	6878      	ldr	r0, [r7, #4]
 810c3ea:	f000 fc92 	bl	810cd12 <USBH_AllocPipe>
 810c3ee:	4603      	mov	r3, r0
 810c3f0:	461a      	mov	r2, r3
 810c3f2:	693b      	ldr	r3, [r7, #16]
 810c3f4:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 810c3f6:	693b      	ldr	r3, [r7, #16]
 810c3f8:	7819      	ldrb	r1, [r3, #0]
 810c3fa:	693b      	ldr	r3, [r7, #16]
 810c3fc:	78d8      	ldrb	r0, [r3, #3]
 810c3fe:	687b      	ldr	r3, [r7, #4]
 810c400:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 810c404:	687b      	ldr	r3, [r7, #4]
 810c406:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 810c40a:	693a      	ldr	r2, [r7, #16]
 810c40c:	8b12      	ldrh	r2, [r2, #24]
 810c40e:	9202      	str	r2, [sp, #8]
 810c410:	2203      	movs	r2, #3
 810c412:	9201      	str	r2, [sp, #4]
 810c414:	9300      	str	r3, [sp, #0]
 810c416:	4623      	mov	r3, r4
 810c418:	4602      	mov	r2, r0
 810c41a:	6878      	ldr	r0, [r7, #4]
 810c41c:	f000 fc4a 	bl	810ccb4 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 810c420:	693b      	ldr	r3, [r7, #16]
 810c422:	781b      	ldrb	r3, [r3, #0]
 810c424:	2200      	movs	r2, #0
 810c426:	4619      	mov	r1, r3
 810c428:	6878      	ldr	r0, [r7, #4]
 810c42a:	f000 ff79 	bl	810d320 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 810c42e:	7dfb      	ldrb	r3, [r7, #23]
 810c430:	3301      	adds	r3, #1
 810c432:	75fb      	strb	r3, [r7, #23]
 810c434:	7dfa      	ldrb	r2, [r7, #23]
 810c436:	7bfb      	ldrb	r3, [r7, #15]
 810c438:	429a      	cmp	r2, r3
 810c43a:	f4ff af7d 	bcc.w	810c338 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 810c43e:	2300      	movs	r3, #0
}
 810c440:	4618      	mov	r0, r3
 810c442:	371c      	adds	r7, #28
 810c444:	46bd      	mov	sp, r7
 810c446:	bd90      	pop	{r4, r7, pc}
 810c448:	0810ca79 	.word	0x0810ca79
 810c44c:	0810cb29 	.word	0x0810cb29

0810c450 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 810c450:	b580      	push	{r7, lr}
 810c452:	b084      	sub	sp, #16
 810c454:	af00      	add	r7, sp, #0
 810c456:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810c458:	687b      	ldr	r3, [r7, #4]
 810c45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c45e:	69db      	ldr	r3, [r3, #28]
 810c460:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 810c462:	68fb      	ldr	r3, [r7, #12]
 810c464:	785b      	ldrb	r3, [r3, #1]
 810c466:	2b00      	cmp	r3, #0
 810c468:	d00e      	beq.n	810c488 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 810c46a:	68fb      	ldr	r3, [r7, #12]
 810c46c:	785b      	ldrb	r3, [r3, #1]
 810c46e:	4619      	mov	r1, r3
 810c470:	6878      	ldr	r0, [r7, #4]
 810c472:	f000 fc3e 	bl	810ccf2 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 810c476:	68fb      	ldr	r3, [r7, #12]
 810c478:	785b      	ldrb	r3, [r3, #1]
 810c47a:	4619      	mov	r1, r3
 810c47c:	6878      	ldr	r0, [r7, #4]
 810c47e:	f000 fc69 	bl	810cd54 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 810c482:	68fb      	ldr	r3, [r7, #12]
 810c484:	2200      	movs	r2, #0
 810c486:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 810c488:	68fb      	ldr	r3, [r7, #12]
 810c48a:	781b      	ldrb	r3, [r3, #0]
 810c48c:	2b00      	cmp	r3, #0
 810c48e:	d00e      	beq.n	810c4ae <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 810c490:	68fb      	ldr	r3, [r7, #12]
 810c492:	781b      	ldrb	r3, [r3, #0]
 810c494:	4619      	mov	r1, r3
 810c496:	6878      	ldr	r0, [r7, #4]
 810c498:	f000 fc2b 	bl	810ccf2 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 810c49c:	68fb      	ldr	r3, [r7, #12]
 810c49e:	781b      	ldrb	r3, [r3, #0]
 810c4a0:	4619      	mov	r1, r3
 810c4a2:	6878      	ldr	r0, [r7, #4]
 810c4a4:	f000 fc56 	bl	810cd54 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 810c4a8:	68fb      	ldr	r3, [r7, #12]
 810c4aa:	2200      	movs	r2, #0
 810c4ac:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 810c4ae:	687b      	ldr	r3, [r7, #4]
 810c4b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c4b4:	69db      	ldr	r3, [r3, #28]
 810c4b6:	2b00      	cmp	r3, #0
 810c4b8:	d00b      	beq.n	810c4d2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 810c4ba:	687b      	ldr	r3, [r7, #4]
 810c4bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c4c0:	69db      	ldr	r3, [r3, #28]
 810c4c2:	4618      	mov	r0, r3
 810c4c4:	f000 fff6 	bl	810d4b4 <free>
    phost->pActiveClass->pData = 0U;
 810c4c8:	687b      	ldr	r3, [r7, #4]
 810c4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c4ce:	2200      	movs	r2, #0
 810c4d0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 810c4d2:	2300      	movs	r3, #0
}
 810c4d4:	4618      	mov	r0, r3
 810c4d6:	3710      	adds	r7, #16
 810c4d8:	46bd      	mov	sp, r7
 810c4da:	bd80      	pop	{r7, pc}

0810c4dc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 810c4dc:	b580      	push	{r7, lr}
 810c4de:	b084      	sub	sp, #16
 810c4e0:	af00      	add	r7, sp, #0
 810c4e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 810c4e4:	2301      	movs	r3, #1
 810c4e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 810c4e8:	2301      	movs	r3, #1
 810c4ea:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810c4ec:	687b      	ldr	r3, [r7, #4]
 810c4ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c4f2:	69db      	ldr	r3, [r3, #28]
 810c4f4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 810c4f6:	68bb      	ldr	r3, [r7, #8]
 810c4f8:	795b      	ldrb	r3, [r3, #5]
 810c4fa:	2b05      	cmp	r3, #5
 810c4fc:	d860      	bhi.n	810c5c0 <USBH_HID_ClassRequest+0xe4>
 810c4fe:	a201      	add	r2, pc, #4	; (adr r2, 810c504 <USBH_HID_ClassRequest+0x28>)
 810c500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c504:	0810c51d 	.word	0x0810c51d
 810c508:	0810c5c1 	.word	0x0810c5c1
 810c50c:	0810c537 	.word	0x0810c537
 810c510:	0810c51d 	.word	0x0810c51d
 810c514:	0810c561 	.word	0x0810c561
 810c518:	0810c58b 	.word	0x0810c58b
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 810c51c:	68bb      	ldr	r3, [r7, #8]
 810c51e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 810c522:	687b      	ldr	r3, [r7, #4]
 810c524:	331c      	adds	r3, #28
 810c526:	4619      	mov	r1, r3
 810c528:	4610      	mov	r0, r2
 810c52a:	f000 f9cd 	bl	810c8c8 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 810c52e:	68bb      	ldr	r3, [r7, #8]
 810c530:	2202      	movs	r2, #2
 810c532:	715a      	strb	r2, [r3, #5]

    break;
 810c534:	e04b      	b.n	810c5ce <USBH_HID_ClassRequest+0xf2>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 810c536:	68bb      	ldr	r3, [r7, #8]
 810c538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 810c53a:	4619      	mov	r1, r3
 810c53c:	6878      	ldr	r0, [r7, #4]
 810c53e:	f000 f930 	bl	810c7a2 <USBH_HID_GetHIDReportDescriptor>
 810c542:	4603      	mov	r3, r0
 810c544:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 810c546:	7bbb      	ldrb	r3, [r7, #14]
 810c548:	2b00      	cmp	r3, #0
 810c54a:	d103      	bne.n	810c554 <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 810c54c:	68bb      	ldr	r3, [r7, #8]
 810c54e:	2204      	movs	r2, #4
 810c550:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 810c552:	e037      	b.n	810c5c4 <USBH_HID_ClassRequest+0xe8>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 810c554:	7bbb      	ldrb	r3, [r7, #14]
 810c556:	2b03      	cmp	r3, #3
 810c558:	d134      	bne.n	810c5c4 <USBH_HID_ClassRequest+0xe8>
      status = USBH_FAIL;
 810c55a:	2302      	movs	r3, #2
 810c55c:	73fb      	strb	r3, [r7, #15]
    break;
 810c55e:	e031      	b.n	810c5c4 <USBH_HID_ClassRequest+0xe8>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 810c560:	2200      	movs	r2, #0
 810c562:	2100      	movs	r1, #0
 810c564:	6878      	ldr	r0, [r7, #4]
 810c566:	f000 f935 	bl	810c7d4 <USBH_HID_SetIdle>
 810c56a:	4603      	mov	r3, r0
 810c56c:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 810c56e:	7bbb      	ldrb	r3, [r7, #14]
 810c570:	2b00      	cmp	r3, #0
 810c572:	d103      	bne.n	810c57c <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 810c574:	68bb      	ldr	r3, [r7, #8]
 810c576:	2205      	movs	r2, #5
 810c578:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 810c57a:	e025      	b.n	810c5c8 <USBH_HID_ClassRequest+0xec>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 810c57c:	7bbb      	ldrb	r3, [r7, #14]
 810c57e:	2b03      	cmp	r3, #3
 810c580:	d122      	bne.n	810c5c8 <USBH_HID_ClassRequest+0xec>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 810c582:	68bb      	ldr	r3, [r7, #8]
 810c584:	2205      	movs	r2, #5
 810c586:	715a      	strb	r2, [r3, #5]
    break;
 810c588:	e01e      	b.n	810c5c8 <USBH_HID_ClassRequest+0xec>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 810c58a:	2100      	movs	r1, #0
 810c58c:	6878      	ldr	r0, [r7, #4]
 810c58e:	f000 f975 	bl	810c87c <USBH_HID_SetProtocol>
 810c592:	4603      	mov	r3, r0
 810c594:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 810c596:	7bbb      	ldrb	r3, [r7, #14]
 810c598:	2b00      	cmp	r3, #0
 810c59a:	d10b      	bne.n	810c5b4 <USBH_HID_ClassRequest+0xd8>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 810c59c:	68bb      	ldr	r3, [r7, #8]
 810c59e:	2201      	movs	r2, #1
 810c5a0:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 810c5a2:	687b      	ldr	r3, [r7, #4]
 810c5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 810c5a8:	2102      	movs	r1, #2
 810c5aa:	6878      	ldr	r0, [r7, #4]
 810c5ac:	4798      	blx	r3
      status = USBH_OK;
 810c5ae:	2300      	movs	r3, #0
 810c5b0:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 810c5b2:	e00b      	b.n	810c5cc <USBH_HID_ClassRequest+0xf0>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 810c5b4:	7bbb      	ldrb	r3, [r7, #14]
 810c5b6:	2b03      	cmp	r3, #3
 810c5b8:	d108      	bne.n	810c5cc <USBH_HID_ClassRequest+0xf0>
      status = USBH_FAIL;
 810c5ba:	2302      	movs	r3, #2
 810c5bc:	73fb      	strb	r3, [r7, #15]
    break;
 810c5be:	e005      	b.n	810c5cc <USBH_HID_ClassRequest+0xf0>

  case HID_REQ_IDLE:
  default:
    break;
 810c5c0:	bf00      	nop
 810c5c2:	e004      	b.n	810c5ce <USBH_HID_ClassRequest+0xf2>
    break;
 810c5c4:	bf00      	nop
 810c5c6:	e002      	b.n	810c5ce <USBH_HID_ClassRequest+0xf2>
    break;
 810c5c8:	bf00      	nop
 810c5ca:	e000      	b.n	810c5ce <USBH_HID_ClassRequest+0xf2>
    break;
 810c5cc:	bf00      	nop
  }

  return status;
 810c5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 810c5d0:	4618      	mov	r0, r3
 810c5d2:	3710      	adds	r7, #16
 810c5d4:	46bd      	mov	sp, r7
 810c5d6:	bd80      	pop	{r7, pc}

0810c5d8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 810c5d8:	b580      	push	{r7, lr}
 810c5da:	b088      	sub	sp, #32
 810c5dc:	af02      	add	r7, sp, #8
 810c5de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 810c5e0:	2300      	movs	r3, #0
 810c5e2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810c5e4:	687b      	ldr	r3, [r7, #4]
 810c5e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c5ea:	69db      	ldr	r3, [r3, #28]
 810c5ec:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 810c5ee:	693b      	ldr	r3, [r7, #16]
 810c5f0:	789b      	ldrb	r3, [r3, #2]
 810c5f2:	2b06      	cmp	r3, #6
 810c5f4:	f200 80a9 	bhi.w	810c74a <USBH_HID_Process+0x172>
 810c5f8:	a201      	add	r2, pc, #4	; (adr r2, 810c600 <USBH_HID_Process+0x28>)
 810c5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c5fe:	bf00      	nop
 810c600:	0810c61d 	.word	0x0810c61d
 810c604:	0810c62d 	.word	0x0810c62d
 810c608:	0810c74b 	.word	0x0810c74b
 810c60c:	0810c74b 	.word	0x0810c74b
 810c610:	0810c69d 	.word	0x0810c69d
 810c614:	0810c687 	.word	0x0810c687
 810c618:	0810c6cb 	.word	0x0810c6cb
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 810c61c:	693b      	ldr	r3, [r7, #16]
 810c61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c620:	6878      	ldr	r0, [r7, #4]
 810c622:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 810c624:	693b      	ldr	r3, [r7, #16]
 810c626:	2201      	movs	r2, #1
 810c628:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 810c62a:	e093      	b.n	810c754 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 810c62c:	693b      	ldr	r3, [r7, #16]
 810c62e:	695a      	ldr	r2, [r3, #20]
 810c630:	693b      	ldr	r3, [r7, #16]
 810c632:	8b1b      	ldrh	r3, [r3, #24]
 810c634:	b2db      	uxtb	r3, r3
 810c636:	9300      	str	r3, [sp, #0]
 810c638:	4613      	mov	r3, r2
 810c63a:	2200      	movs	r2, #0
 810c63c:	2101      	movs	r1, #1
 810c63e:	6878      	ldr	r0, [r7, #4]
 810c640:	f000 f8f0 	bl	810c824 <USBH_HID_GetReport>
 810c644:	4603      	mov	r3, r0
 810c646:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 810c648:	7dfb      	ldrb	r3, [r7, #23]
 810c64a:	2b00      	cmp	r3, #0
 810c64c:	d103      	bne.n	810c656 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 810c64e:	693b      	ldr	r3, [r7, #16]
 810c650:	2205      	movs	r2, #5
 810c652:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 810c654:	e07e      	b.n	810c754 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 810c656:	7dfb      	ldrb	r3, [r7, #23]
 810c658:	2b01      	cmp	r3, #1
 810c65a:	d105      	bne.n	810c668 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 810c65c:	693b      	ldr	r3, [r7, #16]
 810c65e:	2201      	movs	r2, #1
 810c660:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 810c662:	2300      	movs	r3, #0
 810c664:	75fb      	strb	r3, [r7, #23]
      break;
 810c666:	e075      	b.n	810c754 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 810c668:	7dfb      	ldrb	r3, [r7, #23]
 810c66a:	2b03      	cmp	r3, #3
 810c66c:	d105      	bne.n	810c67a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 810c66e:	693b      	ldr	r3, [r7, #16]
 810c670:	2205      	movs	r2, #5
 810c672:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 810c674:	2300      	movs	r3, #0
 810c676:	75fb      	strb	r3, [r7, #23]
      break;
 810c678:	e06c      	b.n	810c754 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 810c67a:	693b      	ldr	r3, [r7, #16]
 810c67c:	2207      	movs	r2, #7
 810c67e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 810c680:	2302      	movs	r3, #2
 810c682:	75fb      	strb	r3, [r7, #23]
      break;
 810c684:	e066      	b.n	810c754 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 810c686:	687b      	ldr	r3, [r7, #4]
 810c688:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 810c68c:	f003 0301 	and.w	r3, r3, #1
 810c690:	2b00      	cmp	r3, #0
 810c692:	d05c      	beq.n	810c74e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 810c694:	693b      	ldr	r3, [r7, #16]
 810c696:	2204      	movs	r2, #4
 810c698:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 810c69a:	e058      	b.n	810c74e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 810c69c:	693b      	ldr	r3, [r7, #16]
 810c69e:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 810c6a0:	693b      	ldr	r3, [r7, #16]
 810c6a2:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 810c6a4:	b2da      	uxtb	r2, r3
 810c6a6:	693b      	ldr	r3, [r7, #16]
 810c6a8:	785b      	ldrb	r3, [r3, #1]
 810c6aa:	6878      	ldr	r0, [r7, #4]
 810c6ac:	f000 fae3 	bl	810cc76 <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 810c6b0:	693b      	ldr	r3, [r7, #16]
 810c6b2:	2206      	movs	r2, #6
 810c6b4:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 810c6b6:	687b      	ldr	r3, [r7, #4]
 810c6b8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 810c6bc:	693b      	ldr	r3, [r7, #16]
 810c6be:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 810c6c0:	693b      	ldr	r3, [r7, #16]
 810c6c2:	2200      	movs	r2, #0
 810c6c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 810c6c8:	e044      	b.n	810c754 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 810c6ca:	693b      	ldr	r3, [r7, #16]
 810c6cc:	785b      	ldrb	r3, [r3, #1]
 810c6ce:	4619      	mov	r1, r3
 810c6d0:	6878      	ldr	r0, [r7, #4]
 810c6d2:	f000 fdfb 	bl	810d2cc <USBH_LL_GetURBState>
 810c6d6:	4603      	mov	r3, r0
 810c6d8:	2b01      	cmp	r3, #1
 810c6da:	d120      	bne.n	810c71e <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 810c6dc:	693b      	ldr	r3, [r7, #16]
 810c6de:	785b      	ldrb	r3, [r3, #1]
 810c6e0:	4619      	mov	r1, r3
 810c6e2:	6878      	ldr	r0, [r7, #4]
 810c6e4:	f000 fd60 	bl	810d1a8 <USBH_LL_GetLastXferSize>
 810c6e8:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 810c6ea:	693b      	ldr	r3, [r7, #16]
 810c6ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 810c6f0:	2b00      	cmp	r3, #0
 810c6f2:	d12e      	bne.n	810c752 <USBH_HID_Process+0x17a>
 810c6f4:	68fb      	ldr	r3, [r7, #12]
 810c6f6:	2b00      	cmp	r3, #0
 810c6f8:	d02b      	beq.n	810c752 <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 810c6fa:	693b      	ldr	r3, [r7, #16]
 810c6fc:	f103 0008 	add.w	r0, r3, #8
 810c700:	693b      	ldr	r3, [r7, #16]
 810c702:	6959      	ldr	r1, [r3, #20]
 810c704:	693b      	ldr	r3, [r7, #16]
 810c706:	8b1b      	ldrh	r3, [r3, #24]
 810c708:	461a      	mov	r2, r3
 810c70a:	f000 f957 	bl	810c9bc <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 810c70e:	693b      	ldr	r3, [r7, #16]
 810c710:	2201      	movs	r2, #1
 810c712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 810c716:	6878      	ldr	r0, [r7, #4]
 810c718:	f000 f9a4 	bl	810ca64 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 810c71c:	e019      	b.n	810c752 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 810c71e:	693b      	ldr	r3, [r7, #16]
 810c720:	785b      	ldrb	r3, [r3, #1]
 810c722:	4619      	mov	r1, r3
 810c724:	6878      	ldr	r0, [r7, #4]
 810c726:	f000 fdd1 	bl	810d2cc <USBH_LL_GetURBState>
 810c72a:	4603      	mov	r3, r0
 810c72c:	2b05      	cmp	r3, #5
 810c72e:	d110      	bne.n	810c752 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 810c730:	693b      	ldr	r3, [r7, #16]
 810c732:	7e9b      	ldrb	r3, [r3, #26]
 810c734:	4619      	mov	r1, r3
 810c736:	6878      	ldr	r0, [r7, #4]
 810c738:	f7ff fb6f 	bl	810be1a <USBH_ClrFeature>
 810c73c:	4603      	mov	r3, r0
 810c73e:	2b00      	cmp	r3, #0
 810c740:	d107      	bne.n	810c752 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 810c742:	693b      	ldr	r3, [r7, #16]
 810c744:	2204      	movs	r2, #4
 810c746:	709a      	strb	r2, [r3, #2]
      break;
 810c748:	e003      	b.n	810c752 <USBH_HID_Process+0x17a>

    default:
      break;
 810c74a:	bf00      	nop
 810c74c:	e002      	b.n	810c754 <USBH_HID_Process+0x17c>
      break;
 810c74e:	bf00      	nop
 810c750:	e000      	b.n	810c754 <USBH_HID_Process+0x17c>
      break;
 810c752:	bf00      	nop
  }

  return status;
 810c754:	7dfb      	ldrb	r3, [r7, #23]
}
 810c756:	4618      	mov	r0, r3
 810c758:	3718      	adds	r7, #24
 810c75a:	46bd      	mov	sp, r7
 810c75c:	bd80      	pop	{r7, pc}
 810c75e:	bf00      	nop

0810c760 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 810c760:	b480      	push	{r7}
 810c762:	b085      	sub	sp, #20
 810c764:	af00      	add	r7, sp, #0
 810c766:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810c768:	687b      	ldr	r3, [r7, #4]
 810c76a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810c76e:	69db      	ldr	r3, [r3, #28]
 810c770:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 810c772:	68fb      	ldr	r3, [r7, #12]
 810c774:	789b      	ldrb	r3, [r3, #2]
 810c776:	2b06      	cmp	r3, #6
 810c778:	d10c      	bne.n	810c794 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 810c77a:	687b      	ldr	r3, [r7, #4]
 810c77c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 810c780:	68fb      	ldr	r3, [r7, #12]
 810c782:	6a1b      	ldr	r3, [r3, #32]
 810c784:	1ad3      	subs	r3, r2, r3
 810c786:	68fa      	ldr	r2, [r7, #12]
 810c788:	8b92      	ldrh	r2, [r2, #28]
 810c78a:	4293      	cmp	r3, r2
 810c78c:	d302      	bcc.n	810c794 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 810c78e:	68fb      	ldr	r3, [r7, #12]
 810c790:	2204      	movs	r2, #4
 810c792:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 810c794:	2300      	movs	r3, #0
}
 810c796:	4618      	mov	r0, r3
 810c798:	3714      	adds	r7, #20
 810c79a:	46bd      	mov	sp, r7
 810c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7a0:	4770      	bx	lr

0810c7a2 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 810c7a2:	b580      	push	{r7, lr}
 810c7a4:	b086      	sub	sp, #24
 810c7a6:	af02      	add	r7, sp, #8
 810c7a8:	6078      	str	r0, [r7, #4]
 810c7aa:	460b      	mov	r3, r1
 810c7ac:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 810c7ae:	687b      	ldr	r3, [r7, #4]
 810c7b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 810c7b4:	887b      	ldrh	r3, [r7, #2]
 810c7b6:	9300      	str	r3, [sp, #0]
 810c7b8:	4613      	mov	r3, r2
 810c7ba:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 810c7be:	2101      	movs	r1, #1
 810c7c0:	6878      	ldr	r0, [r7, #4]
 810c7c2:	f7ff faf5 	bl	810bdb0 <USBH_GetDescriptor>
 810c7c6:	4603      	mov	r3, r0
 810c7c8:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 810c7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 810c7cc:	4618      	mov	r0, r3
 810c7ce:	3710      	adds	r7, #16
 810c7d0:	46bd      	mov	sp, r7
 810c7d2:	bd80      	pop	{r7, pc}

0810c7d4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 810c7d4:	b580      	push	{r7, lr}
 810c7d6:	b082      	sub	sp, #8
 810c7d8:	af00      	add	r7, sp, #0
 810c7da:	6078      	str	r0, [r7, #4]
 810c7dc:	460b      	mov	r3, r1
 810c7de:	70fb      	strb	r3, [r7, #3]
 810c7e0:	4613      	mov	r3, r2
 810c7e2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 810c7e4:	687b      	ldr	r3, [r7, #4]
 810c7e6:	2221      	movs	r2, #33	; 0x21
 810c7e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 810c7ea:	687b      	ldr	r3, [r7, #4]
 810c7ec:	220a      	movs	r2, #10
 810c7ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 810c7f0:	78fb      	ldrb	r3, [r7, #3]
 810c7f2:	b29b      	uxth	r3, r3
 810c7f4:	021b      	lsls	r3, r3, #8
 810c7f6:	b29a      	uxth	r2, r3
 810c7f8:	78bb      	ldrb	r3, [r7, #2]
 810c7fa:	b29b      	uxth	r3, r3
 810c7fc:	4313      	orrs	r3, r2
 810c7fe:	b29a      	uxth	r2, r3
 810c800:	687b      	ldr	r3, [r7, #4]
 810c802:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 810c804:	687b      	ldr	r3, [r7, #4]
 810c806:	2200      	movs	r2, #0
 810c808:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 810c80a:	687b      	ldr	r3, [r7, #4]
 810c80c:	2200      	movs	r2, #0
 810c80e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 810c810:	2200      	movs	r2, #0
 810c812:	2100      	movs	r1, #0
 810c814:	6878      	ldr	r0, [r7, #4]
 810c816:	f7ff fb3f 	bl	810be98 <USBH_CtlReq>
 810c81a:	4603      	mov	r3, r0
}
 810c81c:	4618      	mov	r0, r3
 810c81e:	3708      	adds	r7, #8
 810c820:	46bd      	mov	sp, r7
 810c822:	bd80      	pop	{r7, pc}

0810c824 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 810c824:	b580      	push	{r7, lr}
 810c826:	b084      	sub	sp, #16
 810c828:	af00      	add	r7, sp, #0
 810c82a:	60f8      	str	r0, [r7, #12]
 810c82c:	607b      	str	r3, [r7, #4]
 810c82e:	460b      	mov	r3, r1
 810c830:	72fb      	strb	r3, [r7, #11]
 810c832:	4613      	mov	r3, r2
 810c834:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 810c836:	68fb      	ldr	r3, [r7, #12]
 810c838:	22a1      	movs	r2, #161	; 0xa1
 810c83a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 810c83c:	68fb      	ldr	r3, [r7, #12]
 810c83e:	2201      	movs	r2, #1
 810c840:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 810c842:	7afb      	ldrb	r3, [r7, #11]
 810c844:	b29b      	uxth	r3, r3
 810c846:	021b      	lsls	r3, r3, #8
 810c848:	b29a      	uxth	r2, r3
 810c84a:	7abb      	ldrb	r3, [r7, #10]
 810c84c:	b29b      	uxth	r3, r3
 810c84e:	4313      	orrs	r3, r2
 810c850:	b29a      	uxth	r2, r3
 810c852:	68fb      	ldr	r3, [r7, #12]
 810c854:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 810c856:	68fb      	ldr	r3, [r7, #12]
 810c858:	2200      	movs	r2, #0
 810c85a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 810c85c:	7e3b      	ldrb	r3, [r7, #24]
 810c85e:	b29a      	uxth	r2, r3
 810c860:	68fb      	ldr	r3, [r7, #12]
 810c862:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 810c864:	7e3b      	ldrb	r3, [r7, #24]
 810c866:	b29b      	uxth	r3, r3
 810c868:	461a      	mov	r2, r3
 810c86a:	6879      	ldr	r1, [r7, #4]
 810c86c:	68f8      	ldr	r0, [r7, #12]
 810c86e:	f7ff fb13 	bl	810be98 <USBH_CtlReq>
 810c872:	4603      	mov	r3, r0
}
 810c874:	4618      	mov	r0, r3
 810c876:	3710      	adds	r7, #16
 810c878:	46bd      	mov	sp, r7
 810c87a:	bd80      	pop	{r7, pc}

0810c87c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 810c87c:	b580      	push	{r7, lr}
 810c87e:	b082      	sub	sp, #8
 810c880:	af00      	add	r7, sp, #0
 810c882:	6078      	str	r0, [r7, #4]
 810c884:	460b      	mov	r3, r1
 810c886:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 810c888:	687b      	ldr	r3, [r7, #4]
 810c88a:	2221      	movs	r2, #33	; 0x21
 810c88c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 810c88e:	687b      	ldr	r3, [r7, #4]
 810c890:	220b      	movs	r2, #11
 810c892:	745a      	strb	r2, [r3, #17]
  if (protocol)
 810c894:	78fb      	ldrb	r3, [r7, #3]
 810c896:	2b00      	cmp	r3, #0
 810c898:	d003      	beq.n	810c8a2 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 810c89a:	687b      	ldr	r3, [r7, #4]
 810c89c:	2200      	movs	r2, #0
 810c89e:	825a      	strh	r2, [r3, #18]
 810c8a0:	e002      	b.n	810c8a8 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 810c8a2:	687b      	ldr	r3, [r7, #4]
 810c8a4:	2201      	movs	r2, #1
 810c8a6:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 810c8a8:	687b      	ldr	r3, [r7, #4]
 810c8aa:	2200      	movs	r2, #0
 810c8ac:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 810c8ae:	687b      	ldr	r3, [r7, #4]
 810c8b0:	2200      	movs	r2, #0
 810c8b2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 810c8b4:	2200      	movs	r2, #0
 810c8b6:	2100      	movs	r1, #0
 810c8b8:	6878      	ldr	r0, [r7, #4]
 810c8ba:	f7ff faed 	bl	810be98 <USBH_CtlReq>
 810c8be:	4603      	mov	r3, r0

}
 810c8c0:	4618      	mov	r0, r3
 810c8c2:	3708      	adds	r7, #8
 810c8c4:	46bd      	mov	sp, r7
 810c8c6:	bd80      	pop	{r7, pc}

0810c8c8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 810c8c8:	b580      	push	{r7, lr}
 810c8ca:	b084      	sub	sp, #16
 810c8cc:	af00      	add	r7, sp, #0
 810c8ce:	6078      	str	r0, [r7, #4]
 810c8d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 810c8d2:	683b      	ldr	r3, [r7, #0]
 810c8d4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 810c8d6:	683b      	ldr	r3, [r7, #0]
 810c8d8:	3302      	adds	r3, #2
 810c8da:	781b      	ldrb	r3, [r3, #0]
 810c8dc:	b29a      	uxth	r2, r3
 810c8de:	683b      	ldr	r3, [r7, #0]
 810c8e0:	3303      	adds	r3, #3
 810c8e2:	781b      	ldrb	r3, [r3, #0]
 810c8e4:	b29b      	uxth	r3, r3
 810c8e6:	021b      	lsls	r3, r3, #8
 810c8e8:	b29b      	uxth	r3, r3
 810c8ea:	4313      	orrs	r3, r2
 810c8ec:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 810c8ee:	897b      	ldrh	r3, [r7, #10]
 810c8f0:	2b09      	cmp	r3, #9
 810c8f2:	d943      	bls.n	810c97c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 810c8f4:	2309      	movs	r3, #9
 810c8f6:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 810c8f8:	e03c      	b.n	810c974 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 810c8fa:	f107 0308 	add.w	r3, r7, #8
 810c8fe:	4619      	mov	r1, r3
 810c900:	68f8      	ldr	r0, [r7, #12]
 810c902:	f7ff faae 	bl	810be62 <USBH_GetNextDesc>
 810c906:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 810c908:	68fb      	ldr	r3, [r7, #12]
 810c90a:	785b      	ldrb	r3, [r3, #1]
 810c90c:	2b21      	cmp	r3, #33	; 0x21
 810c90e:	d131      	bne.n	810c974 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 810c910:	68fb      	ldr	r3, [r7, #12]
 810c912:	781a      	ldrb	r2, [r3, #0]
 810c914:	687b      	ldr	r3, [r7, #4]
 810c916:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 810c918:	68fb      	ldr	r3, [r7, #12]
 810c91a:	785a      	ldrb	r2, [r3, #1]
 810c91c:	687b      	ldr	r3, [r7, #4]
 810c91e:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 810c920:	68fb      	ldr	r3, [r7, #12]
 810c922:	3302      	adds	r3, #2
 810c924:	781b      	ldrb	r3, [r3, #0]
 810c926:	b29a      	uxth	r2, r3
 810c928:	68fb      	ldr	r3, [r7, #12]
 810c92a:	3303      	adds	r3, #3
 810c92c:	781b      	ldrb	r3, [r3, #0]
 810c92e:	b29b      	uxth	r3, r3
 810c930:	021b      	lsls	r3, r3, #8
 810c932:	b29b      	uxth	r3, r3
 810c934:	4313      	orrs	r3, r2
 810c936:	b29a      	uxth	r2, r3
 810c938:	687b      	ldr	r3, [r7, #4]
 810c93a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 810c93c:	68fb      	ldr	r3, [r7, #12]
 810c93e:	791a      	ldrb	r2, [r3, #4]
 810c940:	687b      	ldr	r3, [r7, #4]
 810c942:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 810c944:	68fb      	ldr	r3, [r7, #12]
 810c946:	795a      	ldrb	r2, [r3, #5]
 810c948:	687b      	ldr	r3, [r7, #4]
 810c94a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 810c94c:	68fb      	ldr	r3, [r7, #12]
 810c94e:	799a      	ldrb	r2, [r3, #6]
 810c950:	687b      	ldr	r3, [r7, #4]
 810c952:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 810c954:	68fb      	ldr	r3, [r7, #12]
 810c956:	3307      	adds	r3, #7
 810c958:	781b      	ldrb	r3, [r3, #0]
 810c95a:	b29a      	uxth	r2, r3
 810c95c:	68fb      	ldr	r3, [r7, #12]
 810c95e:	3308      	adds	r3, #8
 810c960:	781b      	ldrb	r3, [r3, #0]
 810c962:	b29b      	uxth	r3, r3
 810c964:	021b      	lsls	r3, r3, #8
 810c966:	b29b      	uxth	r3, r3
 810c968:	4313      	orrs	r3, r2
 810c96a:	b29a      	uxth	r2, r3
 810c96c:	687b      	ldr	r3, [r7, #4]
 810c96e:	811a      	strh	r2, [r3, #8]
        break;
 810c970:	bf00      	nop
      }
    }
  }
}
 810c972:	e003      	b.n	810c97c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 810c974:	893b      	ldrh	r3, [r7, #8]
 810c976:	897a      	ldrh	r2, [r7, #10]
 810c978:	429a      	cmp	r2, r3
 810c97a:	d8be      	bhi.n	810c8fa <USBH_HID_ParseHIDDesc+0x32>
}
 810c97c:	bf00      	nop
 810c97e:	3710      	adds	r7, #16
 810c980:	46bd      	mov	sp, r7
 810c982:	bd80      	pop	{r7, pc}

0810c984 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 810c984:	b480      	push	{r7}
 810c986:	b085      	sub	sp, #20
 810c988:	af00      	add	r7, sp, #0
 810c98a:	60f8      	str	r0, [r7, #12]
 810c98c:	60b9      	str	r1, [r7, #8]
 810c98e:	4613      	mov	r3, r2
 810c990:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 810c992:	68fb      	ldr	r3, [r7, #12]
 810c994:	2200      	movs	r2, #0
 810c996:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 810c998:	68fb      	ldr	r3, [r7, #12]
 810c99a:	2200      	movs	r2, #0
 810c99c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 810c99e:	68fb      	ldr	r3, [r7, #12]
 810c9a0:	2200      	movs	r2, #0
 810c9a2:	729a      	strb	r2, [r3, #10]
  f->size = size;
 810c9a4:	68fb      	ldr	r3, [r7, #12]
 810c9a6:	88fa      	ldrh	r2, [r7, #6]
 810c9a8:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 810c9aa:	68fb      	ldr	r3, [r7, #12]
 810c9ac:	68ba      	ldr	r2, [r7, #8]
 810c9ae:	601a      	str	r2, [r3, #0]
}
 810c9b0:	bf00      	nop
 810c9b2:	3714      	adds	r7, #20
 810c9b4:	46bd      	mov	sp, r7
 810c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9ba:	4770      	bx	lr

0810c9bc <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 810c9bc:	b480      	push	{r7}
 810c9be:	b087      	sub	sp, #28
 810c9c0:	af00      	add	r7, sp, #0
 810c9c2:	60f8      	str	r0, [r7, #12]
 810c9c4:	60b9      	str	r1, [r7, #8]
 810c9c6:	4613      	mov	r3, r2
 810c9c8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 810c9ca:	68bb      	ldr	r3, [r7, #8]
 810c9cc:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 810c9ce:	68fb      	ldr	r3, [r7, #12]
 810c9d0:	7a9b      	ldrb	r3, [r3, #10]
 810c9d2:	2b00      	cmp	r3, #0
 810c9d4:	d13c      	bne.n	810ca50 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 810c9d6:	68fb      	ldr	r3, [r7, #12]
 810c9d8:	2201      	movs	r2, #1
 810c9da:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 810c9dc:	2300      	movs	r3, #0
 810c9de:	82fb      	strh	r3, [r7, #22]
 810c9e0:	e032      	b.n	810ca48 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 810c9e2:	68fb      	ldr	r3, [r7, #12]
 810c9e4:	889b      	ldrh	r3, [r3, #4]
 810c9e6:	3301      	adds	r3, #1
 810c9e8:	68fa      	ldr	r2, [r7, #12]
 810c9ea:	88d2      	ldrh	r2, [r2, #6]
 810c9ec:	4293      	cmp	r3, r2
 810c9ee:	d00a      	beq.n	810ca06 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 810c9f0:	68fb      	ldr	r3, [r7, #12]
 810c9f2:	889b      	ldrh	r3, [r3, #4]
 810c9f4:	3301      	adds	r3, #1
 810c9f6:	68fa      	ldr	r2, [r7, #12]
 810c9f8:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 810c9fa:	4293      	cmp	r3, r2
 810c9fc:	d108      	bne.n	810ca10 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 810c9fe:	68fb      	ldr	r3, [r7, #12]
 810ca00:	88db      	ldrh	r3, [r3, #6]
 810ca02:	2b00      	cmp	r3, #0
 810ca04:	d104      	bne.n	810ca10 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 810ca06:	68fb      	ldr	r3, [r7, #12]
 810ca08:	2200      	movs	r2, #0
 810ca0a:	729a      	strb	r2, [r3, #10]
        return i;
 810ca0c:	8afb      	ldrh	r3, [r7, #22]
 810ca0e:	e023      	b.n	810ca58 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 810ca10:	693b      	ldr	r3, [r7, #16]
 810ca12:	1c5a      	adds	r2, r3, #1
 810ca14:	613a      	str	r2, [r7, #16]
 810ca16:	68fa      	ldr	r2, [r7, #12]
 810ca18:	6812      	ldr	r2, [r2, #0]
 810ca1a:	68f9      	ldr	r1, [r7, #12]
 810ca1c:	8889      	ldrh	r1, [r1, #4]
 810ca1e:	440a      	add	r2, r1
 810ca20:	781b      	ldrb	r3, [r3, #0]
 810ca22:	7013      	strb	r3, [r2, #0]
        f->head++;
 810ca24:	68fb      	ldr	r3, [r7, #12]
 810ca26:	889b      	ldrh	r3, [r3, #4]
 810ca28:	3301      	adds	r3, #1
 810ca2a:	b29a      	uxth	r2, r3
 810ca2c:	68fb      	ldr	r3, [r7, #12]
 810ca2e:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 810ca30:	68fb      	ldr	r3, [r7, #12]
 810ca32:	889a      	ldrh	r2, [r3, #4]
 810ca34:	68fb      	ldr	r3, [r7, #12]
 810ca36:	891b      	ldrh	r3, [r3, #8]
 810ca38:	429a      	cmp	r2, r3
 810ca3a:	d102      	bne.n	810ca42 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 810ca3c:	68fb      	ldr	r3, [r7, #12]
 810ca3e:	2200      	movs	r2, #0
 810ca40:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 810ca42:	8afb      	ldrh	r3, [r7, #22]
 810ca44:	3301      	adds	r3, #1
 810ca46:	82fb      	strh	r3, [r7, #22]
 810ca48:	8afa      	ldrh	r2, [r7, #22]
 810ca4a:	88fb      	ldrh	r3, [r7, #6]
 810ca4c:	429a      	cmp	r2, r3
 810ca4e:	d3c8      	bcc.n	810c9e2 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 810ca50:	68fb      	ldr	r3, [r7, #12]
 810ca52:	2200      	movs	r2, #0
 810ca54:	729a      	strb	r2, [r3, #10]

  return nbytes;
 810ca56:	88fb      	ldrh	r3, [r7, #6]
}
 810ca58:	4618      	mov	r0, r3
 810ca5a:	371c      	adds	r7, #28
 810ca5c:	46bd      	mov	sp, r7
 810ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca62:	4770      	bx	lr

0810ca64 <USBH_HID_EventCallback>:
* @brief  The function is a callback about HID Data events
*  @param  phost: Selected device
* @retval None
*/
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 810ca64:	b480      	push	{r7}
 810ca66:	b083      	sub	sp, #12
 810ca68:	af00      	add	r7, sp, #0
 810ca6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 810ca6c:	bf00      	nop
 810ca6e:	370c      	adds	r7, #12
 810ca70:	46bd      	mov	sp, r7
 810ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca76:	4770      	bx	lr

0810ca78 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 810ca78:	b580      	push	{r7, lr}
 810ca7a:	b084      	sub	sp, #16
 810ca7c:	af00      	add	r7, sp, #0
 810ca7e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810ca80:	687b      	ldr	r3, [r7, #4]
 810ca82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810ca86:	69db      	ldr	r3, [r3, #28]
 810ca88:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 810ca8a:	4b24      	ldr	r3, [pc, #144]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810ca8c:	2200      	movs	r2, #0
 810ca8e:	709a      	strb	r2, [r3, #2]
 810ca90:	4b22      	ldr	r3, [pc, #136]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810ca92:	789a      	ldrb	r2, [r3, #2]
 810ca94:	4b21      	ldr	r3, [pc, #132]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810ca96:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 810ca98:	4b20      	ldr	r3, [pc, #128]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810ca9a:	2200      	movs	r2, #0
 810ca9c:	711a      	strb	r2, [r3, #4]
 810ca9e:	4b1f      	ldr	r3, [pc, #124]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810caa0:	791a      	ldrb	r2, [r3, #4]
 810caa2:	4b1e      	ldr	r3, [pc, #120]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810caa4:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 810caa6:	4b1d      	ldr	r3, [pc, #116]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810caa8:	2200      	movs	r2, #0
 810caaa:	719a      	strb	r2, [r3, #6]
 810caac:	4b1b      	ldr	r3, [pc, #108]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810caae:	799a      	ldrb	r2, [r3, #6]
 810cab0:	4b1a      	ldr	r3, [pc, #104]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810cab2:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 810cab4:	4b19      	ldr	r3, [pc, #100]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810cab6:	2200      	movs	r2, #0
 810cab8:	721a      	strb	r2, [r3, #8]
 810caba:	4b18      	ldr	r3, [pc, #96]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810cabc:	7a1a      	ldrb	r2, [r3, #8]
 810cabe:	4b17      	ldr	r3, [pc, #92]	; (810cb1c <USBH_HID_KeybdInit+0xa4>)
 810cac0:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 810cac2:	2300      	movs	r3, #0
 810cac4:	60fb      	str	r3, [r7, #12]
 810cac6:	e00c      	b.n	810cae2 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 810cac8:	4a15      	ldr	r2, [pc, #84]	; (810cb20 <USBH_HID_KeybdInit+0xa8>)
 810caca:	68fb      	ldr	r3, [r7, #12]
 810cacc:	2100      	movs	r1, #0
 810cace:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 810cad2:	4a14      	ldr	r2, [pc, #80]	; (810cb24 <USBH_HID_KeybdInit+0xac>)
 810cad4:	68fb      	ldr	r3, [r7, #12]
 810cad6:	2100      	movs	r1, #0
 810cad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 810cadc:	68fb      	ldr	r3, [r7, #12]
 810cade:	3301      	adds	r3, #1
 810cae0:	60fb      	str	r3, [r7, #12]
 810cae2:	68fb      	ldr	r3, [r7, #12]
 810cae4:	2b01      	cmp	r3, #1
 810cae6:	d9ef      	bls.n	810cac8 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 810cae8:	68bb      	ldr	r3, [r7, #8]
 810caea:	8b1b      	ldrh	r3, [r3, #24]
 810caec:	2b08      	cmp	r3, #8
 810caee:	d902      	bls.n	810caf6 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 810caf0:	68bb      	ldr	r3, [r7, #8]
 810caf2:	2208      	movs	r2, #8
 810caf4:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 810caf6:	68bb      	ldr	r3, [r7, #8]
 810caf8:	4a0a      	ldr	r2, [pc, #40]	; (810cb24 <USBH_HID_KeybdInit+0xac>)
 810cafa:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 810cafc:	68bb      	ldr	r3, [r7, #8]
 810cafe:	f103 0008 	add.w	r0, r3, #8
 810cb02:	687b      	ldr	r3, [r7, #4]
 810cb04:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 810cb08:	2250      	movs	r2, #80	; 0x50
 810cb0a:	4619      	mov	r1, r3
 810cb0c:	f7ff ff3a 	bl	810c984 <USBH_HID_FifoInit>

  return USBH_OK;
 810cb10:	2300      	movs	r3, #0
}
 810cb12:	4618      	mov	r0, r3
 810cb14:	3710      	adds	r7, #16
 810cb16:	46bd      	mov	sp, r7
 810cb18:	bd80      	pop	{r7, pc}
 810cb1a:	bf00      	nop
 810cb1c:	10000820 	.word	0x10000820
 810cb20:	10000810 	.word	0x10000810
 810cb24:	10000818 	.word	0x10000818

0810cb28 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 810cb28:	b580      	push	{r7, lr}
 810cb2a:	b084      	sub	sp, #16
 810cb2c:	af00      	add	r7, sp, #0
 810cb2e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 810cb30:	687b      	ldr	r3, [r7, #4]
 810cb32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 810cb36:	69db      	ldr	r3, [r3, #28]
 810cb38:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 810cb3a:	4b1d      	ldr	r3, [pc, #116]	; (810cbb0 <USBH_HID_MouseInit+0x88>)
 810cb3c:	2200      	movs	r2, #0
 810cb3e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 810cb40:	4b1b      	ldr	r3, [pc, #108]	; (810cbb0 <USBH_HID_MouseInit+0x88>)
 810cb42:	2200      	movs	r2, #0
 810cb44:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 810cb46:	4b1a      	ldr	r3, [pc, #104]	; (810cbb0 <USBH_HID_MouseInit+0x88>)
 810cb48:	2200      	movs	r2, #0
 810cb4a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 810cb4c:	4b18      	ldr	r3, [pc, #96]	; (810cbb0 <USBH_HID_MouseInit+0x88>)
 810cb4e:	2200      	movs	r2, #0
 810cb50:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 810cb52:	4b17      	ldr	r3, [pc, #92]	; (810cbb0 <USBH_HID_MouseInit+0x88>)
 810cb54:	2200      	movs	r2, #0
 810cb56:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 810cb58:	2300      	movs	r3, #0
 810cb5a:	60fb      	str	r3, [r7, #12]
 810cb5c:	e00c      	b.n	810cb78 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 810cb5e:	4a15      	ldr	r2, [pc, #84]	; (810cbb4 <USBH_HID_MouseInit+0x8c>)
 810cb60:	68fb      	ldr	r3, [r7, #12]
 810cb62:	2100      	movs	r1, #0
 810cb64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 810cb68:	4a13      	ldr	r2, [pc, #76]	; (810cbb8 <USBH_HID_MouseInit+0x90>)
 810cb6a:	68fb      	ldr	r3, [r7, #12]
 810cb6c:	2100      	movs	r1, #0
 810cb6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 810cb72:	68fb      	ldr	r3, [r7, #12]
 810cb74:	3301      	adds	r3, #1
 810cb76:	60fb      	str	r3, [r7, #12]
 810cb78:	68fb      	ldr	r3, [r7, #12]
 810cb7a:	2b01      	cmp	r3, #1
 810cb7c:	d9ef      	bls.n	810cb5e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 810cb7e:	68bb      	ldr	r3, [r7, #8]
 810cb80:	8b1b      	ldrh	r3, [r3, #24]
 810cb82:	2b08      	cmp	r3, #8
 810cb84:	d902      	bls.n	810cb8c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 810cb86:	68bb      	ldr	r3, [r7, #8]
 810cb88:	2208      	movs	r2, #8
 810cb8a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 810cb8c:	68bb      	ldr	r3, [r7, #8]
 810cb8e:	4a0a      	ldr	r2, [pc, #40]	; (810cbb8 <USBH_HID_MouseInit+0x90>)
 810cb90:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 810cb92:	68bb      	ldr	r3, [r7, #8]
 810cb94:	f103 0008 	add.w	r0, r3, #8
 810cb98:	687b      	ldr	r3, [r7, #4]
 810cb9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 810cb9e:	2250      	movs	r2, #80	; 0x50
 810cba0:	4619      	mov	r1, r3
 810cba2:	f7ff feef 	bl	810c984 <USBH_HID_FifoInit>

  return USBH_OK;
 810cba6:	2300      	movs	r3, #0
}
 810cba8:	4618      	mov	r0, r3
 810cbaa:	3710      	adds	r7, #16
 810cbac:	46bd      	mov	sp, r7
 810cbae:	bd80      	pop	{r7, pc}
 810cbb0:	10000830 	.word	0x10000830
 810cbb4:	10000838 	.word	0x10000838
 810cbb8:	10000840 	.word	0x10000840

0810cbbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 810cbbc:	b580      	push	{r7, lr}
 810cbbe:	b088      	sub	sp, #32
 810cbc0:	af04      	add	r7, sp, #16
 810cbc2:	60f8      	str	r0, [r7, #12]
 810cbc4:	60b9      	str	r1, [r7, #8]
 810cbc6:	4613      	mov	r3, r2
 810cbc8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 810cbca:	79f9      	ldrb	r1, [r7, #7]
 810cbcc:	2300      	movs	r3, #0
 810cbce:	9303      	str	r3, [sp, #12]
 810cbd0:	2308      	movs	r3, #8
 810cbd2:	9302      	str	r3, [sp, #8]
 810cbd4:	68bb      	ldr	r3, [r7, #8]
 810cbd6:	9301      	str	r3, [sp, #4]
 810cbd8:	2300      	movs	r3, #0
 810cbda:	9300      	str	r3, [sp, #0]
 810cbdc:	2300      	movs	r3, #0
 810cbde:	2200      	movs	r2, #0
 810cbe0:	68f8      	ldr	r0, [r7, #12]
 810cbe2:	f000 fb42 	bl	810d26a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 810cbe6:	2300      	movs	r3, #0
}
 810cbe8:	4618      	mov	r0, r3
 810cbea:	3710      	adds	r7, #16
 810cbec:	46bd      	mov	sp, r7
 810cbee:	bd80      	pop	{r7, pc}

0810cbf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 810cbf0:	b580      	push	{r7, lr}
 810cbf2:	b088      	sub	sp, #32
 810cbf4:	af04      	add	r7, sp, #16
 810cbf6:	60f8      	str	r0, [r7, #12]
 810cbf8:	60b9      	str	r1, [r7, #8]
 810cbfa:	4611      	mov	r1, r2
 810cbfc:	461a      	mov	r2, r3
 810cbfe:	460b      	mov	r3, r1
 810cc00:	80fb      	strh	r3, [r7, #6]
 810cc02:	4613      	mov	r3, r2
 810cc04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 810cc06:	68fb      	ldr	r3, [r7, #12]
 810cc08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 810cc0c:	2b00      	cmp	r3, #0
 810cc0e:	d001      	beq.n	810cc14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 810cc10:	2300      	movs	r3, #0
 810cc12:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 810cc14:	7979      	ldrb	r1, [r7, #5]
 810cc16:	7e3b      	ldrb	r3, [r7, #24]
 810cc18:	9303      	str	r3, [sp, #12]
 810cc1a:	88fb      	ldrh	r3, [r7, #6]
 810cc1c:	9302      	str	r3, [sp, #8]
 810cc1e:	68bb      	ldr	r3, [r7, #8]
 810cc20:	9301      	str	r3, [sp, #4]
 810cc22:	2301      	movs	r3, #1
 810cc24:	9300      	str	r3, [sp, #0]
 810cc26:	2300      	movs	r3, #0
 810cc28:	2200      	movs	r2, #0
 810cc2a:	68f8      	ldr	r0, [r7, #12]
 810cc2c:	f000 fb1d 	bl	810d26a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 810cc30:	2300      	movs	r3, #0
}
 810cc32:	4618      	mov	r0, r3
 810cc34:	3710      	adds	r7, #16
 810cc36:	46bd      	mov	sp, r7
 810cc38:	bd80      	pop	{r7, pc}

0810cc3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 810cc3a:	b580      	push	{r7, lr}
 810cc3c:	b088      	sub	sp, #32
 810cc3e:	af04      	add	r7, sp, #16
 810cc40:	60f8      	str	r0, [r7, #12]
 810cc42:	60b9      	str	r1, [r7, #8]
 810cc44:	4611      	mov	r1, r2
 810cc46:	461a      	mov	r2, r3
 810cc48:	460b      	mov	r3, r1
 810cc4a:	80fb      	strh	r3, [r7, #6]
 810cc4c:	4613      	mov	r3, r2
 810cc4e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 810cc50:	7979      	ldrb	r1, [r7, #5]
 810cc52:	2300      	movs	r3, #0
 810cc54:	9303      	str	r3, [sp, #12]
 810cc56:	88fb      	ldrh	r3, [r7, #6]
 810cc58:	9302      	str	r3, [sp, #8]
 810cc5a:	68bb      	ldr	r3, [r7, #8]
 810cc5c:	9301      	str	r3, [sp, #4]
 810cc5e:	2301      	movs	r3, #1
 810cc60:	9300      	str	r3, [sp, #0]
 810cc62:	2300      	movs	r3, #0
 810cc64:	2201      	movs	r2, #1
 810cc66:	68f8      	ldr	r0, [r7, #12]
 810cc68:	f000 faff 	bl	810d26a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 810cc6c:	2300      	movs	r3, #0

}
 810cc6e:	4618      	mov	r0, r3
 810cc70:	3710      	adds	r7, #16
 810cc72:	46bd      	mov	sp, r7
 810cc74:	bd80      	pop	{r7, pc}

0810cc76 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 810cc76:	b580      	push	{r7, lr}
 810cc78:	b088      	sub	sp, #32
 810cc7a:	af04      	add	r7, sp, #16
 810cc7c:	60f8      	str	r0, [r7, #12]
 810cc7e:	60b9      	str	r1, [r7, #8]
 810cc80:	4611      	mov	r1, r2
 810cc82:	461a      	mov	r2, r3
 810cc84:	460b      	mov	r3, r1
 810cc86:	71fb      	strb	r3, [r7, #7]
 810cc88:	4613      	mov	r3, r2
 810cc8a:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 810cc8c:	79fb      	ldrb	r3, [r7, #7]
 810cc8e:	b29b      	uxth	r3, r3
 810cc90:	79b9      	ldrb	r1, [r7, #6]
 810cc92:	2200      	movs	r2, #0
 810cc94:	9203      	str	r2, [sp, #12]
 810cc96:	9302      	str	r3, [sp, #8]
 810cc98:	68bb      	ldr	r3, [r7, #8]
 810cc9a:	9301      	str	r3, [sp, #4]
 810cc9c:	2301      	movs	r3, #1
 810cc9e:	9300      	str	r3, [sp, #0]
 810cca0:	2303      	movs	r3, #3
 810cca2:	2201      	movs	r2, #1
 810cca4:	68f8      	ldr	r0, [r7, #12]
 810cca6:	f000 fae0 	bl	810d26a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 810ccaa:	2300      	movs	r3, #0
}
 810ccac:	4618      	mov	r0, r3
 810ccae:	3710      	adds	r7, #16
 810ccb0:	46bd      	mov	sp, r7
 810ccb2:	bd80      	pop	{r7, pc}

0810ccb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 810ccb4:	b580      	push	{r7, lr}
 810ccb6:	b086      	sub	sp, #24
 810ccb8:	af04      	add	r7, sp, #16
 810ccba:	6078      	str	r0, [r7, #4]
 810ccbc:	4608      	mov	r0, r1
 810ccbe:	4611      	mov	r1, r2
 810ccc0:	461a      	mov	r2, r3
 810ccc2:	4603      	mov	r3, r0
 810ccc4:	70fb      	strb	r3, [r7, #3]
 810ccc6:	460b      	mov	r3, r1
 810ccc8:	70bb      	strb	r3, [r7, #2]
 810ccca:	4613      	mov	r3, r2
 810cccc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 810ccce:	7878      	ldrb	r0, [r7, #1]
 810ccd0:	78ba      	ldrb	r2, [r7, #2]
 810ccd2:	78f9      	ldrb	r1, [r7, #3]
 810ccd4:	8b3b      	ldrh	r3, [r7, #24]
 810ccd6:	9302      	str	r3, [sp, #8]
 810ccd8:	7d3b      	ldrb	r3, [r7, #20]
 810ccda:	9301      	str	r3, [sp, #4]
 810ccdc:	7c3b      	ldrb	r3, [r7, #16]
 810ccde:	9300      	str	r3, [sp, #0]
 810cce0:	4603      	mov	r3, r0
 810cce2:	6878      	ldr	r0, [r7, #4]
 810cce4:	f000 fa73 	bl	810d1ce <USBH_LL_OpenPipe>

  return USBH_OK;
 810cce8:	2300      	movs	r3, #0
}
 810ccea:	4618      	mov	r0, r3
 810ccec:	3708      	adds	r7, #8
 810ccee:	46bd      	mov	sp, r7
 810ccf0:	bd80      	pop	{r7, pc}

0810ccf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 810ccf2:	b580      	push	{r7, lr}
 810ccf4:	b082      	sub	sp, #8
 810ccf6:	af00      	add	r7, sp, #0
 810ccf8:	6078      	str	r0, [r7, #4]
 810ccfa:	460b      	mov	r3, r1
 810ccfc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 810ccfe:	78fb      	ldrb	r3, [r7, #3]
 810cd00:	4619      	mov	r1, r3
 810cd02:	6878      	ldr	r0, [r7, #4]
 810cd04:	f000 fa92 	bl	810d22c <USBH_LL_ClosePipe>

  return USBH_OK;
 810cd08:	2300      	movs	r3, #0
}
 810cd0a:	4618      	mov	r0, r3
 810cd0c:	3708      	adds	r7, #8
 810cd0e:	46bd      	mov	sp, r7
 810cd10:	bd80      	pop	{r7, pc}

0810cd12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 810cd12:	b580      	push	{r7, lr}
 810cd14:	b084      	sub	sp, #16
 810cd16:	af00      	add	r7, sp, #0
 810cd18:	6078      	str	r0, [r7, #4]
 810cd1a:	460b      	mov	r3, r1
 810cd1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 810cd1e:	6878      	ldr	r0, [r7, #4]
 810cd20:	f000 f836 	bl	810cd90 <USBH_GetFreePipe>
 810cd24:	4603      	mov	r3, r0
 810cd26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 810cd28:	89fb      	ldrh	r3, [r7, #14]
 810cd2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 810cd2e:	4293      	cmp	r3, r2
 810cd30:	d00a      	beq.n	810cd48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 810cd32:	78fa      	ldrb	r2, [r7, #3]
 810cd34:	89fb      	ldrh	r3, [r7, #14]
 810cd36:	f003 030f 	and.w	r3, r3, #15
 810cd3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810cd3e:	6879      	ldr	r1, [r7, #4]
 810cd40:	33e0      	adds	r3, #224	; 0xe0
 810cd42:	009b      	lsls	r3, r3, #2
 810cd44:	440b      	add	r3, r1
 810cd46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 810cd48:	89fb      	ldrh	r3, [r7, #14]
 810cd4a:	b2db      	uxtb	r3, r3
}
 810cd4c:	4618      	mov	r0, r3
 810cd4e:	3710      	adds	r7, #16
 810cd50:	46bd      	mov	sp, r7
 810cd52:	bd80      	pop	{r7, pc}

0810cd54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 810cd54:	b480      	push	{r7}
 810cd56:	b083      	sub	sp, #12
 810cd58:	af00      	add	r7, sp, #0
 810cd5a:	6078      	str	r0, [r7, #4]
 810cd5c:	460b      	mov	r3, r1
 810cd5e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 810cd60:	78fb      	ldrb	r3, [r7, #3]
 810cd62:	2b0a      	cmp	r3, #10
 810cd64:	d80d      	bhi.n	810cd82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 810cd66:	78fb      	ldrb	r3, [r7, #3]
 810cd68:	687a      	ldr	r2, [r7, #4]
 810cd6a:	33e0      	adds	r3, #224	; 0xe0
 810cd6c:	009b      	lsls	r3, r3, #2
 810cd6e:	4413      	add	r3, r2
 810cd70:	685a      	ldr	r2, [r3, #4]
 810cd72:	78fb      	ldrb	r3, [r7, #3]
 810cd74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 810cd78:	6879      	ldr	r1, [r7, #4]
 810cd7a:	33e0      	adds	r3, #224	; 0xe0
 810cd7c:	009b      	lsls	r3, r3, #2
 810cd7e:	440b      	add	r3, r1
 810cd80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 810cd82:	2300      	movs	r3, #0
}
 810cd84:	4618      	mov	r0, r3
 810cd86:	370c      	adds	r7, #12
 810cd88:	46bd      	mov	sp, r7
 810cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd8e:	4770      	bx	lr

0810cd90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 810cd90:	b480      	push	{r7}
 810cd92:	b085      	sub	sp, #20
 810cd94:	af00      	add	r7, sp, #0
 810cd96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 810cd98:	2300      	movs	r3, #0
 810cd9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 810cd9c:	2300      	movs	r3, #0
 810cd9e:	73fb      	strb	r3, [r7, #15]
 810cda0:	e00f      	b.n	810cdc2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 810cda2:	7bfb      	ldrb	r3, [r7, #15]
 810cda4:	687a      	ldr	r2, [r7, #4]
 810cda6:	33e0      	adds	r3, #224	; 0xe0
 810cda8:	009b      	lsls	r3, r3, #2
 810cdaa:	4413      	add	r3, r2
 810cdac:	685b      	ldr	r3, [r3, #4]
 810cdae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810cdb2:	2b00      	cmp	r3, #0
 810cdb4:	d102      	bne.n	810cdbc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 810cdb6:	7bfb      	ldrb	r3, [r7, #15]
 810cdb8:	b29b      	uxth	r3, r3
 810cdba:	e007      	b.n	810cdcc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 810cdbc:	7bfb      	ldrb	r3, [r7, #15]
 810cdbe:	3301      	adds	r3, #1
 810cdc0:	73fb      	strb	r3, [r7, #15]
 810cdc2:	7bfb      	ldrb	r3, [r7, #15]
 810cdc4:	2b0a      	cmp	r3, #10
 810cdc6:	d9ec      	bls.n	810cda2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 810cdc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 810cdcc:	4618      	mov	r0, r3
 810cdce:	3714      	adds	r7, #20
 810cdd0:	46bd      	mov	sp, r7
 810cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cdd6:	4770      	bx	lr

0810cdd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 810cdd8:	b480      	push	{r7}
 810cdda:	b087      	sub	sp, #28
 810cddc:	af00      	add	r7, sp, #0
 810cdde:	60f8      	str	r0, [r7, #12]
 810cde0:	60b9      	str	r1, [r7, #8]
 810cde2:	4613      	mov	r3, r2
 810cde4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 810cde6:	2301      	movs	r3, #1
 810cde8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 810cdea:	2300      	movs	r3, #0
 810cdec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 810cdee:	4b1f      	ldr	r3, [pc, #124]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810cdf0:	7a5b      	ldrb	r3, [r3, #9]
 810cdf2:	b2db      	uxtb	r3, r3
 810cdf4:	2b00      	cmp	r3, #0
 810cdf6:	d131      	bne.n	810ce5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 810cdf8:	4b1c      	ldr	r3, [pc, #112]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810cdfa:	7a5b      	ldrb	r3, [r3, #9]
 810cdfc:	b2db      	uxtb	r3, r3
 810cdfe:	461a      	mov	r2, r3
 810ce00:	4b1a      	ldr	r3, [pc, #104]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce02:	2100      	movs	r1, #0
 810ce04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 810ce06:	4b19      	ldr	r3, [pc, #100]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce08:	7a5b      	ldrb	r3, [r3, #9]
 810ce0a:	b2db      	uxtb	r3, r3
 810ce0c:	4a17      	ldr	r2, [pc, #92]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce0e:	009b      	lsls	r3, r3, #2
 810ce10:	4413      	add	r3, r2
 810ce12:	68fa      	ldr	r2, [r7, #12]
 810ce14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 810ce16:	4b15      	ldr	r3, [pc, #84]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce18:	7a5b      	ldrb	r3, [r3, #9]
 810ce1a:	b2db      	uxtb	r3, r3
 810ce1c:	461a      	mov	r2, r3
 810ce1e:	4b13      	ldr	r3, [pc, #76]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce20:	4413      	add	r3, r2
 810ce22:	79fa      	ldrb	r2, [r7, #7]
 810ce24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 810ce26:	4b11      	ldr	r3, [pc, #68]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce28:	7a5b      	ldrb	r3, [r3, #9]
 810ce2a:	b2db      	uxtb	r3, r3
 810ce2c:	1c5a      	adds	r2, r3, #1
 810ce2e:	b2d1      	uxtb	r1, r2
 810ce30:	4a0e      	ldr	r2, [pc, #56]	; (810ce6c <FATFS_LinkDriverEx+0x94>)
 810ce32:	7251      	strb	r1, [r2, #9]
 810ce34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 810ce36:	7dbb      	ldrb	r3, [r7, #22]
 810ce38:	3330      	adds	r3, #48	; 0x30
 810ce3a:	b2da      	uxtb	r2, r3
 810ce3c:	68bb      	ldr	r3, [r7, #8]
 810ce3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 810ce40:	68bb      	ldr	r3, [r7, #8]
 810ce42:	3301      	adds	r3, #1
 810ce44:	223a      	movs	r2, #58	; 0x3a
 810ce46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 810ce48:	68bb      	ldr	r3, [r7, #8]
 810ce4a:	3302      	adds	r3, #2
 810ce4c:	222f      	movs	r2, #47	; 0x2f
 810ce4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 810ce50:	68bb      	ldr	r3, [r7, #8]
 810ce52:	3303      	adds	r3, #3
 810ce54:	2200      	movs	r2, #0
 810ce56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 810ce58:	2300      	movs	r3, #0
 810ce5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 810ce5c:	7dfb      	ldrb	r3, [r7, #23]
}
 810ce5e:	4618      	mov	r0, r3
 810ce60:	371c      	adds	r7, #28
 810ce62:	46bd      	mov	sp, r7
 810ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ce68:	4770      	bx	lr
 810ce6a:	bf00      	nop
 810ce6c:	100000bc 	.word	0x100000bc

0810ce70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 810ce70:	b580      	push	{r7, lr}
 810ce72:	b082      	sub	sp, #8
 810ce74:	af00      	add	r7, sp, #0
 810ce76:	6078      	str	r0, [r7, #4]
 810ce78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 810ce7a:	2200      	movs	r2, #0
 810ce7c:	6839      	ldr	r1, [r7, #0]
 810ce7e:	6878      	ldr	r0, [r7, #4]
 810ce80:	f7ff ffaa 	bl	810cdd8 <FATFS_LinkDriverEx>
 810ce84:	4603      	mov	r3, r0
}
 810ce86:	4618      	mov	r0, r3
 810ce88:	3708      	adds	r7, #8
 810ce8a:	46bd      	mov	sp, r7
 810ce8c:	bd80      	pop	{r7, pc}
	...

0810ce90 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 810ce90:	b580      	push	{r7, lr}
 810ce92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 810ce94:	2201      	movs	r2, #1
 810ce96:	490e      	ldr	r1, [pc, #56]	; (810ced0 <MX_USB_HOST_Init+0x40>)
 810ce98:	480e      	ldr	r0, [pc, #56]	; (810ced4 <MX_USB_HOST_Init+0x44>)
 810ce9a:	f7fe fdcf 	bl	810ba3c <USBH_Init>
 810ce9e:	4603      	mov	r3, r0
 810cea0:	2b00      	cmp	r3, #0
 810cea2:	d001      	beq.n	810cea8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 810cea4:	f7f3 fe7a 	bl	8100b9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 810cea8:	490b      	ldr	r1, [pc, #44]	; (810ced8 <MX_USB_HOST_Init+0x48>)
 810ceaa:	480a      	ldr	r0, [pc, #40]	; (810ced4 <MX_USB_HOST_Init+0x44>)
 810ceac:	f7fe fe54 	bl	810bb58 <USBH_RegisterClass>
 810ceb0:	4603      	mov	r3, r0
 810ceb2:	2b00      	cmp	r3, #0
 810ceb4:	d001      	beq.n	810ceba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 810ceb6:	f7f3 fe71 	bl	8100b9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 810ceba:	4806      	ldr	r0, [pc, #24]	; (810ced4 <MX_USB_HOST_Init+0x44>)
 810cebc:	f7fe fed8 	bl	810bc70 <USBH_Start>
 810cec0:	4603      	mov	r3, r0
 810cec2:	2b00      	cmp	r3, #0
 810cec4:	d001      	beq.n	810ceca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 810cec6:	f7f3 fe69 	bl	8100b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 810ceca:	bf00      	nop
 810cecc:	bd80      	pop	{r7, pc}
 810cece:	bf00      	nop
 810ced0:	0810cedd 	.word	0x0810cedd
 810ced4:	10000848 	.word	0x10000848
 810ced8:	10000010 	.word	0x10000010

0810cedc <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 810cedc:	b480      	push	{r7}
 810cede:	b083      	sub	sp, #12
 810cee0:	af00      	add	r7, sp, #0
 810cee2:	6078      	str	r0, [r7, #4]
 810cee4:	460b      	mov	r3, r1
 810cee6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 810cee8:	78fb      	ldrb	r3, [r7, #3]
 810ceea:	3b01      	subs	r3, #1
 810ceec:	2b04      	cmp	r3, #4
 810ceee:	d819      	bhi.n	810cf24 <USBH_UserProcess+0x48>
 810cef0:	a201      	add	r2, pc, #4	; (adr r2, 810cef8 <USBH_UserProcess+0x1c>)
 810cef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810cef6:	bf00      	nop
 810cef8:	0810cf25 	.word	0x0810cf25
 810cefc:	0810cf15 	.word	0x0810cf15
 810cf00:	0810cf25 	.word	0x0810cf25
 810cf04:	0810cf1d 	.word	0x0810cf1d
 810cf08:	0810cf0d 	.word	0x0810cf0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 810cf0c:	4b09      	ldr	r3, [pc, #36]	; (810cf34 <USBH_UserProcess+0x58>)
 810cf0e:	2203      	movs	r2, #3
 810cf10:	701a      	strb	r2, [r3, #0]
  break;
 810cf12:	e008      	b.n	810cf26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 810cf14:	4b07      	ldr	r3, [pc, #28]	; (810cf34 <USBH_UserProcess+0x58>)
 810cf16:	2202      	movs	r2, #2
 810cf18:	701a      	strb	r2, [r3, #0]
  break;
 810cf1a:	e004      	b.n	810cf26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 810cf1c:	4b05      	ldr	r3, [pc, #20]	; (810cf34 <USBH_UserProcess+0x58>)
 810cf1e:	2201      	movs	r2, #1
 810cf20:	701a      	strb	r2, [r3, #0]
  break;
 810cf22:	e000      	b.n	810cf26 <USBH_UserProcess+0x4a>

  default:
  break;
 810cf24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 810cf26:	bf00      	nop
 810cf28:	370c      	adds	r7, #12
 810cf2a:	46bd      	mov	sp, r7
 810cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf30:	4770      	bx	lr
 810cf32:	bf00      	nop
 810cf34:	100000c8 	.word	0x100000c8

0810cf38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 810cf38:	b580      	push	{r7, lr}
 810cf3a:	b0ba      	sub	sp, #232	; 0xe8
 810cf3c:	af00      	add	r7, sp, #0
 810cf3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810cf40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810cf44:	2200      	movs	r2, #0
 810cf46:	601a      	str	r2, [r3, #0]
 810cf48:	605a      	str	r2, [r3, #4]
 810cf4a:	609a      	str	r2, [r3, #8]
 810cf4c:	60da      	str	r2, [r3, #12]
 810cf4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810cf50:	f107 0314 	add.w	r3, r7, #20
 810cf54:	22c0      	movs	r2, #192	; 0xc0
 810cf56:	2100      	movs	r1, #0
 810cf58:	4618      	mov	r0, r3
 810cf5a:	f000 fab3 	bl	810d4c4 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 810cf5e:	687b      	ldr	r3, [r7, #4]
 810cf60:	681b      	ldr	r3, [r3, #0]
 810cf62:	4a2b      	ldr	r2, [pc, #172]	; (810d010 <HAL_HCD_MspInit+0xd8>)
 810cf64:	4293      	cmp	r3, r2
 810cf66:	d14e      	bne.n	810d006 <HAL_HCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810cf68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810cf6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 810cf6e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 810cf72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810cf76:	f107 0314 	add.w	r3, r7, #20
 810cf7a:	4618      	mov	r0, r3
 810cf7c:	f7f8 fc70 	bl	8105860 <HAL_RCCEx_PeriphCLKConfig>
 810cf80:	4603      	mov	r3, r0
 810cf82:	2b00      	cmp	r3, #0
 810cf84:	d001      	beq.n	810cf8a <HAL_HCD_MspInit+0x52>
    {
      Error_Handler();
 810cf86:	f7f3 fe09 	bl	8100b9c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810cf8a:	f7f8 faad 	bl	81054e8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810cf8e:	4b21      	ldr	r3, [pc, #132]	; (810d014 <HAL_HCD_MspInit+0xdc>)
 810cf90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810cf94:	4a1f      	ldr	r2, [pc, #124]	; (810d014 <HAL_HCD_MspInit+0xdc>)
 810cf96:	f043 0301 	orr.w	r3, r3, #1
 810cf9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810cf9e:	4b1d      	ldr	r3, [pc, #116]	; (810d014 <HAL_HCD_MspInit+0xdc>)
 810cfa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810cfa4:	f003 0301 	and.w	r3, r3, #1
 810cfa8:	613b      	str	r3, [r7, #16]
 810cfaa:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 810cfac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 810cfb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810cfb4:	2302      	movs	r3, #2
 810cfb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810cfba:	2300      	movs	r3, #0
 810cfbc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810cfc0:	2300      	movs	r3, #0
 810cfc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 810cfc6:	230a      	movs	r3, #10
 810cfc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810cfcc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810cfd0:	4619      	mov	r1, r3
 810cfd2:	4811      	ldr	r0, [pc, #68]	; (810d018 <HAL_HCD_MspInit+0xe0>)
 810cfd4:	f7f5 faf0 	bl	81025b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810cfd8:	4b0e      	ldr	r3, [pc, #56]	; (810d014 <HAL_HCD_MspInit+0xdc>)
 810cfda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810cfde:	4a0d      	ldr	r2, [pc, #52]	; (810d014 <HAL_HCD_MspInit+0xdc>)
 810cfe0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810cfe4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810cfe8:	4b0a      	ldr	r3, [pc, #40]	; (810d014 <HAL_HCD_MspInit+0xdc>)
 810cfea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810cfee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810cff2:	60fb      	str	r3, [r7, #12]
 810cff4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 810cff6:	2200      	movs	r2, #0
 810cff8:	2100      	movs	r1, #0
 810cffa:	2065      	movs	r0, #101	; 0x65
 810cffc:	f7f4 fb07 	bl	810160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 810d000:	2065      	movs	r0, #101	; 0x65
 810d002:	f7f4 fb1e 	bl	8101642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 810d006:	bf00      	nop
 810d008:	37e8      	adds	r7, #232	; 0xe8
 810d00a:	46bd      	mov	sp, r7
 810d00c:	bd80      	pop	{r7, pc}
 810d00e:	bf00      	nop
 810d010:	40080000 	.word	0x40080000
 810d014:	58024400 	.word	0x58024400
 810d018:	58020000 	.word	0x58020000

0810d01c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 810d01c:	b580      	push	{r7, lr}
 810d01e:	b082      	sub	sp, #8
 810d020:	af00      	add	r7, sp, #0
 810d022:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 810d024:	687b      	ldr	r3, [r7, #4]
 810d026:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 810d02a:	4618      	mov	r0, r3
 810d02c:	f7fe fe3f 	bl	810bcae <USBH_LL_IncTimer>
}
 810d030:	bf00      	nop
 810d032:	3708      	adds	r7, #8
 810d034:	46bd      	mov	sp, r7
 810d036:	bd80      	pop	{r7, pc}

0810d038 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 810d038:	b580      	push	{r7, lr}
 810d03a:	b082      	sub	sp, #8
 810d03c:	af00      	add	r7, sp, #0
 810d03e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 810d040:	687b      	ldr	r3, [r7, #4]
 810d042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 810d046:	4618      	mov	r0, r3
 810d048:	f7fe fe77 	bl	810bd3a <USBH_LL_Connect>
}
 810d04c:	bf00      	nop
 810d04e:	3708      	adds	r7, #8
 810d050:	46bd      	mov	sp, r7
 810d052:	bd80      	pop	{r7, pc}

0810d054 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 810d054:	b580      	push	{r7, lr}
 810d056:	b082      	sub	sp, #8
 810d058:	af00      	add	r7, sp, #0
 810d05a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 810d05c:	687b      	ldr	r3, [r7, #4]
 810d05e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 810d062:	4618      	mov	r0, r3
 810d064:	f7fe fe80 	bl	810bd68 <USBH_LL_Disconnect>
}
 810d068:	bf00      	nop
 810d06a:	3708      	adds	r7, #8
 810d06c:	46bd      	mov	sp, r7
 810d06e:	bd80      	pop	{r7, pc}

0810d070 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 810d070:	b480      	push	{r7}
 810d072:	b083      	sub	sp, #12
 810d074:	af00      	add	r7, sp, #0
 810d076:	6078      	str	r0, [r7, #4]
 810d078:	460b      	mov	r3, r1
 810d07a:	70fb      	strb	r3, [r7, #3]
 810d07c:	4613      	mov	r3, r2
 810d07e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 810d080:	bf00      	nop
 810d082:	370c      	adds	r7, #12
 810d084:	46bd      	mov	sp, r7
 810d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d08a:	4770      	bx	lr

0810d08c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 810d08c:	b580      	push	{r7, lr}
 810d08e:	b082      	sub	sp, #8
 810d090:	af00      	add	r7, sp, #0
 810d092:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 810d094:	687b      	ldr	r3, [r7, #4]
 810d096:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 810d09a:	4618      	mov	r0, r3
 810d09c:	f7fe fe31 	bl	810bd02 <USBH_LL_PortEnabled>
}
 810d0a0:	bf00      	nop
 810d0a2:	3708      	adds	r7, #8
 810d0a4:	46bd      	mov	sp, r7
 810d0a6:	bd80      	pop	{r7, pc}

0810d0a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 810d0a8:	b580      	push	{r7, lr}
 810d0aa:	b082      	sub	sp, #8
 810d0ac:	af00      	add	r7, sp, #0
 810d0ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 810d0b0:	687b      	ldr	r3, [r7, #4]
 810d0b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 810d0b6:	4618      	mov	r0, r3
 810d0b8:	f7fe fe31 	bl	810bd1e <USBH_LL_PortDisabled>
}
 810d0bc:	bf00      	nop
 810d0be:	3708      	adds	r7, #8
 810d0c0:	46bd      	mov	sp, r7
 810d0c2:	bd80      	pop	{r7, pc}

0810d0c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 810d0c4:	b580      	push	{r7, lr}
 810d0c6:	b082      	sub	sp, #8
 810d0c8:	af00      	add	r7, sp, #0
 810d0ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 810d0cc:	687b      	ldr	r3, [r7, #4]
 810d0ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 810d0d2:	2b01      	cmp	r3, #1
 810d0d4:	d129      	bne.n	810d12a <USBH_LL_Init+0x66>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 810d0d6:	4a17      	ldr	r2, [pc, #92]	; (810d134 <USBH_LL_Init+0x70>)
 810d0d8:	687b      	ldr	r3, [r7, #4]
 810d0da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 810d0de:	687b      	ldr	r3, [r7, #4]
 810d0e0:	4a14      	ldr	r2, [pc, #80]	; (810d134 <USBH_LL_Init+0x70>)
 810d0e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 810d0e6:	4b13      	ldr	r3, [pc, #76]	; (810d134 <USBH_LL_Init+0x70>)
 810d0e8:	4a13      	ldr	r2, [pc, #76]	; (810d138 <USBH_LL_Init+0x74>)
 810d0ea:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 810d0ec:	4b11      	ldr	r3, [pc, #68]	; (810d134 <USBH_LL_Init+0x70>)
 810d0ee:	2210      	movs	r2, #16
 810d0f0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 810d0f2:	4b10      	ldr	r3, [pc, #64]	; (810d134 <USBH_LL_Init+0x70>)
 810d0f4:	2201      	movs	r2, #1
 810d0f6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 810d0f8:	4b0e      	ldr	r3, [pc, #56]	; (810d134 <USBH_LL_Init+0x70>)
 810d0fa:	2200      	movs	r2, #0
 810d0fc:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 810d0fe:	4b0d      	ldr	r3, [pc, #52]	; (810d134 <USBH_LL_Init+0x70>)
 810d100:	2202      	movs	r2, #2
 810d102:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 810d104:	4b0b      	ldr	r3, [pc, #44]	; (810d134 <USBH_LL_Init+0x70>)
 810d106:	2200      	movs	r2, #0
 810d108:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 810d10a:	480a      	ldr	r0, [pc, #40]	; (810d134 <USBH_LL_Init+0x70>)
 810d10c:	f7f5 fc1c 	bl	8102948 <HAL_HCD_Init>
 810d110:	4603      	mov	r3, r0
 810d112:	2b00      	cmp	r3, #0
 810d114:	d001      	beq.n	810d11a <USBH_LL_Init+0x56>
  {
    Error_Handler( );
 810d116:	f7f3 fd41 	bl	8100b9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 810d11a:	4806      	ldr	r0, [pc, #24]	; (810d134 <USBH_LL_Init+0x70>)
 810d11c:	f7f5 ffea 	bl	81030f4 <HAL_HCD_GetCurrentFrame>
 810d120:	4603      	mov	r3, r0
 810d122:	4619      	mov	r1, r3
 810d124:	6878      	ldr	r0, [r7, #4]
 810d126:	f7fe fdb3 	bl	810bc90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 810d12a:	2300      	movs	r3, #0
}
 810d12c:	4618      	mov	r0, r3
 810d12e:	3708      	adds	r7, #8
 810d130:	46bd      	mov	sp, r7
 810d132:	bd80      	pop	{r7, pc}
 810d134:	10000c20 	.word	0x10000c20
 810d138:	40080000 	.word	0x40080000

0810d13c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 810d13c:	b580      	push	{r7, lr}
 810d13e:	b084      	sub	sp, #16
 810d140:	af00      	add	r7, sp, #0
 810d142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810d144:	2300      	movs	r3, #0
 810d146:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 810d148:	2300      	movs	r3, #0
 810d14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 810d14c:	687b      	ldr	r3, [r7, #4]
 810d14e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 810d152:	4618      	mov	r0, r3
 810d154:	f7f5 ff66 	bl	8103024 <HAL_HCD_Start>
 810d158:	4603      	mov	r3, r0
 810d15a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 810d15c:	7bfb      	ldrb	r3, [r7, #15]
 810d15e:	4618      	mov	r0, r3
 810d160:	f000 f90e 	bl	810d380 <USBH_Get_USB_Status>
 810d164:	4603      	mov	r3, r0
 810d166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810d168:	7bbb      	ldrb	r3, [r7, #14]
}
 810d16a:	4618      	mov	r0, r3
 810d16c:	3710      	adds	r7, #16
 810d16e:	46bd      	mov	sp, r7
 810d170:	bd80      	pop	{r7, pc}

0810d172 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 810d172:	b580      	push	{r7, lr}
 810d174:	b084      	sub	sp, #16
 810d176:	af00      	add	r7, sp, #0
 810d178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810d17a:	2300      	movs	r3, #0
 810d17c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 810d17e:	2300      	movs	r3, #0
 810d180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 810d182:	687b      	ldr	r3, [r7, #4]
 810d184:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 810d188:	4618      	mov	r0, r3
 810d18a:	f7f5 ff6e 	bl	810306a <HAL_HCD_Stop>
 810d18e:	4603      	mov	r3, r0
 810d190:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 810d192:	7bfb      	ldrb	r3, [r7, #15]
 810d194:	4618      	mov	r0, r3
 810d196:	f000 f8f3 	bl	810d380 <USBH_Get_USB_Status>
 810d19a:	4603      	mov	r3, r0
 810d19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810d19e:	7bbb      	ldrb	r3, [r7, #14]
}
 810d1a0:	4618      	mov	r0, r3
 810d1a2:	3710      	adds	r7, #16
 810d1a4:	46bd      	mov	sp, r7
 810d1a6:	bd80      	pop	{r7, pc}

0810d1a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 810d1a8:	b580      	push	{r7, lr}
 810d1aa:	b082      	sub	sp, #8
 810d1ac:	af00      	add	r7, sp, #0
 810d1ae:	6078      	str	r0, [r7, #4]
 810d1b0:	460b      	mov	r3, r1
 810d1b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 810d1b4:	687b      	ldr	r3, [r7, #4]
 810d1b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 810d1ba:	78fa      	ldrb	r2, [r7, #3]
 810d1bc:	4611      	mov	r1, r2
 810d1be:	4618      	mov	r0, r3
 810d1c0:	f7f5 ff84 	bl	81030cc <HAL_HCD_HC_GetXferCount>
 810d1c4:	4603      	mov	r3, r0
}
 810d1c6:	4618      	mov	r0, r3
 810d1c8:	3708      	adds	r7, #8
 810d1ca:	46bd      	mov	sp, r7
 810d1cc:	bd80      	pop	{r7, pc}

0810d1ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 810d1ce:	b590      	push	{r4, r7, lr}
 810d1d0:	b089      	sub	sp, #36	; 0x24
 810d1d2:	af04      	add	r7, sp, #16
 810d1d4:	6078      	str	r0, [r7, #4]
 810d1d6:	4608      	mov	r0, r1
 810d1d8:	4611      	mov	r1, r2
 810d1da:	461a      	mov	r2, r3
 810d1dc:	4603      	mov	r3, r0
 810d1de:	70fb      	strb	r3, [r7, #3]
 810d1e0:	460b      	mov	r3, r1
 810d1e2:	70bb      	strb	r3, [r7, #2]
 810d1e4:	4613      	mov	r3, r2
 810d1e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810d1e8:	2300      	movs	r3, #0
 810d1ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 810d1ec:	2300      	movs	r3, #0
 810d1ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 810d1f0:	687b      	ldr	r3, [r7, #4]
 810d1f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 810d1f6:	787c      	ldrb	r4, [r7, #1]
 810d1f8:	78ba      	ldrb	r2, [r7, #2]
 810d1fa:	78f9      	ldrb	r1, [r7, #3]
 810d1fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 810d1fe:	9302      	str	r3, [sp, #8]
 810d200:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 810d204:	9301      	str	r3, [sp, #4]
 810d206:	f897 3020 	ldrb.w	r3, [r7, #32]
 810d20a:	9300      	str	r3, [sp, #0]
 810d20c:	4623      	mov	r3, r4
 810d20e:	f7f5 fbfd 	bl	8102a0c <HAL_HCD_HC_Init>
 810d212:	4603      	mov	r3, r0
 810d214:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 810d216:	7bfb      	ldrb	r3, [r7, #15]
 810d218:	4618      	mov	r0, r3
 810d21a:	f000 f8b1 	bl	810d380 <USBH_Get_USB_Status>
 810d21e:	4603      	mov	r3, r0
 810d220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810d222:	7bbb      	ldrb	r3, [r7, #14]
}
 810d224:	4618      	mov	r0, r3
 810d226:	3714      	adds	r7, #20
 810d228:	46bd      	mov	sp, r7
 810d22a:	bd90      	pop	{r4, r7, pc}

0810d22c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 810d22c:	b580      	push	{r7, lr}
 810d22e:	b084      	sub	sp, #16
 810d230:	af00      	add	r7, sp, #0
 810d232:	6078      	str	r0, [r7, #4]
 810d234:	460b      	mov	r3, r1
 810d236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810d238:	2300      	movs	r3, #0
 810d23a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 810d23c:	2300      	movs	r3, #0
 810d23e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 810d240:	687b      	ldr	r3, [r7, #4]
 810d242:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 810d246:	78fa      	ldrb	r2, [r7, #3]
 810d248:	4611      	mov	r1, r2
 810d24a:	4618      	mov	r0, r3
 810d24c:	f7f5 fc6d 	bl	8102b2a <HAL_HCD_HC_Halt>
 810d250:	4603      	mov	r3, r0
 810d252:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 810d254:	7bfb      	ldrb	r3, [r7, #15]
 810d256:	4618      	mov	r0, r3
 810d258:	f000 f892 	bl	810d380 <USBH_Get_USB_Status>
 810d25c:	4603      	mov	r3, r0
 810d25e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810d260:	7bbb      	ldrb	r3, [r7, #14]
}
 810d262:	4618      	mov	r0, r3
 810d264:	3710      	adds	r7, #16
 810d266:	46bd      	mov	sp, r7
 810d268:	bd80      	pop	{r7, pc}

0810d26a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 810d26a:	b590      	push	{r4, r7, lr}
 810d26c:	b089      	sub	sp, #36	; 0x24
 810d26e:	af04      	add	r7, sp, #16
 810d270:	6078      	str	r0, [r7, #4]
 810d272:	4608      	mov	r0, r1
 810d274:	4611      	mov	r1, r2
 810d276:	461a      	mov	r2, r3
 810d278:	4603      	mov	r3, r0
 810d27a:	70fb      	strb	r3, [r7, #3]
 810d27c:	460b      	mov	r3, r1
 810d27e:	70bb      	strb	r3, [r7, #2]
 810d280:	4613      	mov	r3, r2
 810d282:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810d284:	2300      	movs	r3, #0
 810d286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 810d288:	2300      	movs	r3, #0
 810d28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 810d28c:	687b      	ldr	r3, [r7, #4]
 810d28e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 810d292:	787c      	ldrb	r4, [r7, #1]
 810d294:	78ba      	ldrb	r2, [r7, #2]
 810d296:	78f9      	ldrb	r1, [r7, #3]
 810d298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 810d29c:	9303      	str	r3, [sp, #12]
 810d29e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 810d2a0:	9302      	str	r3, [sp, #8]
 810d2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d2a4:	9301      	str	r3, [sp, #4]
 810d2a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 810d2aa:	9300      	str	r3, [sp, #0]
 810d2ac:	4623      	mov	r3, r4
 810d2ae:	f7f5 fc5f 	bl	8102b70 <HAL_HCD_HC_SubmitRequest>
 810d2b2:	4603      	mov	r3, r0
 810d2b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 810d2b6:	7bfb      	ldrb	r3, [r7, #15]
 810d2b8:	4618      	mov	r0, r3
 810d2ba:	f000 f861 	bl	810d380 <USBH_Get_USB_Status>
 810d2be:	4603      	mov	r3, r0
 810d2c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810d2c2:	7bbb      	ldrb	r3, [r7, #14]
}
 810d2c4:	4618      	mov	r0, r3
 810d2c6:	3714      	adds	r7, #20
 810d2c8:	46bd      	mov	sp, r7
 810d2ca:	bd90      	pop	{r4, r7, pc}

0810d2cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 810d2cc:	b580      	push	{r7, lr}
 810d2ce:	b082      	sub	sp, #8
 810d2d0:	af00      	add	r7, sp, #0
 810d2d2:	6078      	str	r0, [r7, #4]
 810d2d4:	460b      	mov	r3, r1
 810d2d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 810d2d8:	687b      	ldr	r3, [r7, #4]
 810d2da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 810d2de:	78fa      	ldrb	r2, [r7, #3]
 810d2e0:	4611      	mov	r1, r2
 810d2e2:	4618      	mov	r0, r3
 810d2e4:	f7f5 fede 	bl	81030a4 <HAL_HCD_HC_GetURBState>
 810d2e8:	4603      	mov	r3, r0
}
 810d2ea:	4618      	mov	r0, r3
 810d2ec:	3708      	adds	r7, #8
 810d2ee:	46bd      	mov	sp, r7
 810d2f0:	bd80      	pop	{r7, pc}

0810d2f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 810d2f2:	b580      	push	{r7, lr}
 810d2f4:	b082      	sub	sp, #8
 810d2f6:	af00      	add	r7, sp, #0
 810d2f8:	6078      	str	r0, [r7, #4]
 810d2fa:	460b      	mov	r3, r1
 810d2fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 810d2fe:	687b      	ldr	r3, [r7, #4]
 810d300:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 810d304:	2b01      	cmp	r3, #1
 810d306:	d103      	bne.n	810d310 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 810d308:	78fb      	ldrb	r3, [r7, #3]
 810d30a:	4618      	mov	r0, r3
 810d30c:	f000 f864 	bl	810d3d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 810d310:	20c8      	movs	r0, #200	; 0xc8
 810d312:	f7f4 f87d 	bl	8101410 <HAL_Delay>
  return USBH_OK;
 810d316:	2300      	movs	r3, #0
}
 810d318:	4618      	mov	r0, r3
 810d31a:	3708      	adds	r7, #8
 810d31c:	46bd      	mov	sp, r7
 810d31e:	bd80      	pop	{r7, pc}

0810d320 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 810d320:	b480      	push	{r7}
 810d322:	b085      	sub	sp, #20
 810d324:	af00      	add	r7, sp, #0
 810d326:	6078      	str	r0, [r7, #4]
 810d328:	460b      	mov	r3, r1
 810d32a:	70fb      	strb	r3, [r7, #3]
 810d32c:	4613      	mov	r3, r2
 810d32e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 810d330:	687b      	ldr	r3, [r7, #4]
 810d332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 810d336:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 810d338:	78fb      	ldrb	r3, [r7, #3]
 810d33a:	68fa      	ldr	r2, [r7, #12]
 810d33c:	212c      	movs	r1, #44	; 0x2c
 810d33e:	fb01 f303 	mul.w	r3, r1, r3
 810d342:	4413      	add	r3, r2
 810d344:	333b      	adds	r3, #59	; 0x3b
 810d346:	781b      	ldrb	r3, [r3, #0]
 810d348:	2b00      	cmp	r3, #0
 810d34a:	d009      	beq.n	810d360 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 810d34c:	78fb      	ldrb	r3, [r7, #3]
 810d34e:	68fa      	ldr	r2, [r7, #12]
 810d350:	212c      	movs	r1, #44	; 0x2c
 810d352:	fb01 f303 	mul.w	r3, r1, r3
 810d356:	4413      	add	r3, r2
 810d358:	3354      	adds	r3, #84	; 0x54
 810d35a:	78ba      	ldrb	r2, [r7, #2]
 810d35c:	701a      	strb	r2, [r3, #0]
 810d35e:	e008      	b.n	810d372 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 810d360:	78fb      	ldrb	r3, [r7, #3]
 810d362:	68fa      	ldr	r2, [r7, #12]
 810d364:	212c      	movs	r1, #44	; 0x2c
 810d366:	fb01 f303 	mul.w	r3, r1, r3
 810d36a:	4413      	add	r3, r2
 810d36c:	3355      	adds	r3, #85	; 0x55
 810d36e:	78ba      	ldrb	r2, [r7, #2]
 810d370:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 810d372:	2300      	movs	r3, #0
}
 810d374:	4618      	mov	r0, r3
 810d376:	3714      	adds	r7, #20
 810d378:	46bd      	mov	sp, r7
 810d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d37e:	4770      	bx	lr

0810d380 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 810d380:	b480      	push	{r7}
 810d382:	b085      	sub	sp, #20
 810d384:	af00      	add	r7, sp, #0
 810d386:	4603      	mov	r3, r0
 810d388:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 810d38a:	2300      	movs	r3, #0
 810d38c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 810d38e:	79fb      	ldrb	r3, [r7, #7]
 810d390:	2b03      	cmp	r3, #3
 810d392:	d817      	bhi.n	810d3c4 <USBH_Get_USB_Status+0x44>
 810d394:	a201      	add	r2, pc, #4	; (adr r2, 810d39c <USBH_Get_USB_Status+0x1c>)
 810d396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d39a:	bf00      	nop
 810d39c:	0810d3ad 	.word	0x0810d3ad
 810d3a0:	0810d3b3 	.word	0x0810d3b3
 810d3a4:	0810d3b9 	.word	0x0810d3b9
 810d3a8:	0810d3bf 	.word	0x0810d3bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 810d3ac:	2300      	movs	r3, #0
 810d3ae:	73fb      	strb	r3, [r7, #15]
    break;
 810d3b0:	e00b      	b.n	810d3ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 810d3b2:	2302      	movs	r3, #2
 810d3b4:	73fb      	strb	r3, [r7, #15]
    break;
 810d3b6:	e008      	b.n	810d3ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 810d3b8:	2301      	movs	r3, #1
 810d3ba:	73fb      	strb	r3, [r7, #15]
    break;
 810d3bc:	e005      	b.n	810d3ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 810d3be:	2302      	movs	r3, #2
 810d3c0:	73fb      	strb	r3, [r7, #15]
    break;
 810d3c2:	e002      	b.n	810d3ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 810d3c4:	2302      	movs	r3, #2
 810d3c6:	73fb      	strb	r3, [r7, #15]
    break;
 810d3c8:	bf00      	nop
  }
  return usb_status;
 810d3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 810d3cc:	4618      	mov	r0, r3
 810d3ce:	3714      	adds	r7, #20
 810d3d0:	46bd      	mov	sp, r7
 810d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d3d6:	4770      	bx	lr

0810d3d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 810d3d8:	b580      	push	{r7, lr}
 810d3da:	b088      	sub	sp, #32
 810d3dc:	af04      	add	r7, sp, #16
 810d3de:	4603      	mov	r3, r0
 810d3e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN PREPARE_I2C_REG_VBUS_FS */
  uint8_t Component_Reg  = 0;
 810d3e2:	2300      	movs	r3, #0
 810d3e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END PREPARE_I2C_REG_VBUS_FS */
  HAL_StatusTypeDef status = HAL_OK;
 810d3e6:	2300      	movs	r3, #0
 810d3e8:	73bb      	strb	r3, [r7, #14]
  uint8_t Component_Addr = 0 << 1;
 810d3ea:	2300      	movs	r3, #0
 810d3ec:	737b      	strb	r3, [r7, #13]
  /* USER CODE BEGIN PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data = state;
 810d3ee:	79fb      	ldrb	r3, [r7, #7]
 810d3f0:	733b      	strb	r3, [r7, #12]
  /* USER CODE END PREPARE_I2C_DATA_VBUS_FS */
  uint8_t data_tmp = 0;
 810d3f2:	2300      	movs	r3, #0
 810d3f4:	72fb      	strb	r3, [r7, #11]
  status = HAL_I2C_Mem_Read(&hi2c1, Component_Addr, (uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT, &data_tmp, 1, 100);
 810d3f6:	7b7b      	ldrb	r3, [r7, #13]
 810d3f8:	b299      	uxth	r1, r3
 810d3fa:	7bfb      	ldrb	r3, [r7, #15]
 810d3fc:	b29a      	uxth	r2, r3
 810d3fe:	2364      	movs	r3, #100	; 0x64
 810d400:	9302      	str	r3, [sp, #8]
 810d402:	2301      	movs	r3, #1
 810d404:	9301      	str	r3, [sp, #4]
 810d406:	f107 030b 	add.w	r3, r7, #11
 810d40a:	9300      	str	r3, [sp, #0]
 810d40c:	2301      	movs	r3, #1
 810d40e:	480f      	ldr	r0, [pc, #60]	; (810d44c <MX_DriverVbusFS+0x74>)
 810d410:	f7f7 f908 	bl	8104624 <HAL_I2C_Mem_Read>
 810d414:	4603      	mov	r3, r0
 810d416:	73bb      	strb	r3, [r7, #14]
  data |= data_tmp;
 810d418:	7b3a      	ldrb	r2, [r7, #12]
 810d41a:	7afb      	ldrb	r3, [r7, #11]
 810d41c:	4313      	orrs	r3, r2
 810d41e:	b2db      	uxtb	r3, r3
 810d420:	733b      	strb	r3, [r7, #12]
  status = HAL_I2C_Mem_Write(&hi2c1,Component_Addr,(uint16_t)Component_Reg, I2C_MEMADD_SIZE_8BIT,&data, 1, 100);
 810d422:	7b7b      	ldrb	r3, [r7, #13]
 810d424:	b299      	uxth	r1, r3
 810d426:	7bfb      	ldrb	r3, [r7, #15]
 810d428:	b29a      	uxth	r2, r3
 810d42a:	2364      	movs	r3, #100	; 0x64
 810d42c:	9302      	str	r3, [sp, #8]
 810d42e:	2301      	movs	r3, #1
 810d430:	9301      	str	r3, [sp, #4]
 810d432:	f107 030c 	add.w	r3, r7, #12
 810d436:	9300      	str	r3, [sp, #0]
 810d438:	2301      	movs	r3, #1
 810d43a:	4804      	ldr	r0, [pc, #16]	; (810d44c <MX_DriverVbusFS+0x74>)
 810d43c:	f7f6 ffde 	bl	81043fc <HAL_I2C_Mem_Write>
 810d440:	4603      	mov	r3, r0
 810d442:	73bb      	strb	r3, [r7, #14]
  if(status != HAL_OK)
  {

  }
  /* USER CODE END CHECK_STATUS_VBUS_FS */
}
 810d444:	bf00      	nop
 810d446:	3710      	adds	r7, #16
 810d448:	46bd      	mov	sp, r7
 810d44a:	bd80      	pop	{r7, pc}
 810d44c:	100000d4 	.word	0x100000d4

0810d450 <__errno>:
 810d450:	4b01      	ldr	r3, [pc, #4]	; (810d458 <__errno+0x8>)
 810d452:	6818      	ldr	r0, [r3, #0]
 810d454:	4770      	bx	lr
 810d456:	bf00      	nop
 810d458:	10000030 	.word	0x10000030

0810d45c <__libc_init_array>:
 810d45c:	b570      	push	{r4, r5, r6, lr}
 810d45e:	4d0d      	ldr	r5, [pc, #52]	; (810d494 <__libc_init_array+0x38>)
 810d460:	4c0d      	ldr	r4, [pc, #52]	; (810d498 <__libc_init_array+0x3c>)
 810d462:	1b64      	subs	r4, r4, r5
 810d464:	10a4      	asrs	r4, r4, #2
 810d466:	2600      	movs	r6, #0
 810d468:	42a6      	cmp	r6, r4
 810d46a:	d109      	bne.n	810d480 <__libc_init_array+0x24>
 810d46c:	4d0b      	ldr	r5, [pc, #44]	; (810d49c <__libc_init_array+0x40>)
 810d46e:	4c0c      	ldr	r4, [pc, #48]	; (810d4a0 <__libc_init_array+0x44>)
 810d470:	f000 f8f8 	bl	810d664 <_init>
 810d474:	1b64      	subs	r4, r4, r5
 810d476:	10a4      	asrs	r4, r4, #2
 810d478:	2600      	movs	r6, #0
 810d47a:	42a6      	cmp	r6, r4
 810d47c:	d105      	bne.n	810d48a <__libc_init_array+0x2e>
 810d47e:	bd70      	pop	{r4, r5, r6, pc}
 810d480:	f855 3b04 	ldr.w	r3, [r5], #4
 810d484:	4798      	blx	r3
 810d486:	3601      	adds	r6, #1
 810d488:	e7ee      	b.n	810d468 <__libc_init_array+0xc>
 810d48a:	f855 3b04 	ldr.w	r3, [r5], #4
 810d48e:	4798      	blx	r3
 810d490:	3601      	adds	r6, #1
 810d492:	e7f2      	b.n	810d47a <__libc_init_array+0x1e>
 810d494:	0810d6a4 	.word	0x0810d6a4
 810d498:	0810d6a4 	.word	0x0810d6a4
 810d49c:	0810d6a4 	.word	0x0810d6a4
 810d4a0:	0810d6a8 	.word	0x0810d6a8

0810d4a4 <malloc>:
 810d4a4:	4b02      	ldr	r3, [pc, #8]	; (810d4b0 <malloc+0xc>)
 810d4a6:	4601      	mov	r1, r0
 810d4a8:	6818      	ldr	r0, [r3, #0]
 810d4aa:	f000 b863 	b.w	810d574 <_malloc_r>
 810d4ae:	bf00      	nop
 810d4b0:	10000030 	.word	0x10000030

0810d4b4 <free>:
 810d4b4:	4b02      	ldr	r3, [pc, #8]	; (810d4c0 <free+0xc>)
 810d4b6:	4601      	mov	r1, r0
 810d4b8:	6818      	ldr	r0, [r3, #0]
 810d4ba:	f000 b80b 	b.w	810d4d4 <_free_r>
 810d4be:	bf00      	nop
 810d4c0:	10000030 	.word	0x10000030

0810d4c4 <memset>:
 810d4c4:	4402      	add	r2, r0
 810d4c6:	4603      	mov	r3, r0
 810d4c8:	4293      	cmp	r3, r2
 810d4ca:	d100      	bne.n	810d4ce <memset+0xa>
 810d4cc:	4770      	bx	lr
 810d4ce:	f803 1b01 	strb.w	r1, [r3], #1
 810d4d2:	e7f9      	b.n	810d4c8 <memset+0x4>

0810d4d4 <_free_r>:
 810d4d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810d4d6:	2900      	cmp	r1, #0
 810d4d8:	d048      	beq.n	810d56c <_free_r+0x98>
 810d4da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810d4de:	9001      	str	r0, [sp, #4]
 810d4e0:	2b00      	cmp	r3, #0
 810d4e2:	f1a1 0404 	sub.w	r4, r1, #4
 810d4e6:	bfb8      	it	lt
 810d4e8:	18e4      	addlt	r4, r4, r3
 810d4ea:	f000 f8ad 	bl	810d648 <__malloc_lock>
 810d4ee:	4a20      	ldr	r2, [pc, #128]	; (810d570 <_free_r+0x9c>)
 810d4f0:	9801      	ldr	r0, [sp, #4]
 810d4f2:	6813      	ldr	r3, [r2, #0]
 810d4f4:	4615      	mov	r5, r2
 810d4f6:	b933      	cbnz	r3, 810d506 <_free_r+0x32>
 810d4f8:	6063      	str	r3, [r4, #4]
 810d4fa:	6014      	str	r4, [r2, #0]
 810d4fc:	b003      	add	sp, #12
 810d4fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810d502:	f000 b8a7 	b.w	810d654 <__malloc_unlock>
 810d506:	42a3      	cmp	r3, r4
 810d508:	d90b      	bls.n	810d522 <_free_r+0x4e>
 810d50a:	6821      	ldr	r1, [r4, #0]
 810d50c:	1862      	adds	r2, r4, r1
 810d50e:	4293      	cmp	r3, r2
 810d510:	bf04      	itt	eq
 810d512:	681a      	ldreq	r2, [r3, #0]
 810d514:	685b      	ldreq	r3, [r3, #4]
 810d516:	6063      	str	r3, [r4, #4]
 810d518:	bf04      	itt	eq
 810d51a:	1852      	addeq	r2, r2, r1
 810d51c:	6022      	streq	r2, [r4, #0]
 810d51e:	602c      	str	r4, [r5, #0]
 810d520:	e7ec      	b.n	810d4fc <_free_r+0x28>
 810d522:	461a      	mov	r2, r3
 810d524:	685b      	ldr	r3, [r3, #4]
 810d526:	b10b      	cbz	r3, 810d52c <_free_r+0x58>
 810d528:	42a3      	cmp	r3, r4
 810d52a:	d9fa      	bls.n	810d522 <_free_r+0x4e>
 810d52c:	6811      	ldr	r1, [r2, #0]
 810d52e:	1855      	adds	r5, r2, r1
 810d530:	42a5      	cmp	r5, r4
 810d532:	d10b      	bne.n	810d54c <_free_r+0x78>
 810d534:	6824      	ldr	r4, [r4, #0]
 810d536:	4421      	add	r1, r4
 810d538:	1854      	adds	r4, r2, r1
 810d53a:	42a3      	cmp	r3, r4
 810d53c:	6011      	str	r1, [r2, #0]
 810d53e:	d1dd      	bne.n	810d4fc <_free_r+0x28>
 810d540:	681c      	ldr	r4, [r3, #0]
 810d542:	685b      	ldr	r3, [r3, #4]
 810d544:	6053      	str	r3, [r2, #4]
 810d546:	4421      	add	r1, r4
 810d548:	6011      	str	r1, [r2, #0]
 810d54a:	e7d7      	b.n	810d4fc <_free_r+0x28>
 810d54c:	d902      	bls.n	810d554 <_free_r+0x80>
 810d54e:	230c      	movs	r3, #12
 810d550:	6003      	str	r3, [r0, #0]
 810d552:	e7d3      	b.n	810d4fc <_free_r+0x28>
 810d554:	6825      	ldr	r5, [r4, #0]
 810d556:	1961      	adds	r1, r4, r5
 810d558:	428b      	cmp	r3, r1
 810d55a:	bf04      	itt	eq
 810d55c:	6819      	ldreq	r1, [r3, #0]
 810d55e:	685b      	ldreq	r3, [r3, #4]
 810d560:	6063      	str	r3, [r4, #4]
 810d562:	bf04      	itt	eq
 810d564:	1949      	addeq	r1, r1, r5
 810d566:	6021      	streq	r1, [r4, #0]
 810d568:	6054      	str	r4, [r2, #4]
 810d56a:	e7c7      	b.n	810d4fc <_free_r+0x28>
 810d56c:	b003      	add	sp, #12
 810d56e:	bd30      	pop	{r4, r5, pc}
 810d570:	100000cc 	.word	0x100000cc

0810d574 <_malloc_r>:
 810d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d576:	1ccd      	adds	r5, r1, #3
 810d578:	f025 0503 	bic.w	r5, r5, #3
 810d57c:	3508      	adds	r5, #8
 810d57e:	2d0c      	cmp	r5, #12
 810d580:	bf38      	it	cc
 810d582:	250c      	movcc	r5, #12
 810d584:	2d00      	cmp	r5, #0
 810d586:	4606      	mov	r6, r0
 810d588:	db01      	blt.n	810d58e <_malloc_r+0x1a>
 810d58a:	42a9      	cmp	r1, r5
 810d58c:	d903      	bls.n	810d596 <_malloc_r+0x22>
 810d58e:	230c      	movs	r3, #12
 810d590:	6033      	str	r3, [r6, #0]
 810d592:	2000      	movs	r0, #0
 810d594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d596:	f000 f857 	bl	810d648 <__malloc_lock>
 810d59a:	4921      	ldr	r1, [pc, #132]	; (810d620 <_malloc_r+0xac>)
 810d59c:	680a      	ldr	r2, [r1, #0]
 810d59e:	4614      	mov	r4, r2
 810d5a0:	b99c      	cbnz	r4, 810d5ca <_malloc_r+0x56>
 810d5a2:	4f20      	ldr	r7, [pc, #128]	; (810d624 <_malloc_r+0xb0>)
 810d5a4:	683b      	ldr	r3, [r7, #0]
 810d5a6:	b923      	cbnz	r3, 810d5b2 <_malloc_r+0x3e>
 810d5a8:	4621      	mov	r1, r4
 810d5aa:	4630      	mov	r0, r6
 810d5ac:	f000 f83c 	bl	810d628 <_sbrk_r>
 810d5b0:	6038      	str	r0, [r7, #0]
 810d5b2:	4629      	mov	r1, r5
 810d5b4:	4630      	mov	r0, r6
 810d5b6:	f000 f837 	bl	810d628 <_sbrk_r>
 810d5ba:	1c43      	adds	r3, r0, #1
 810d5bc:	d123      	bne.n	810d606 <_malloc_r+0x92>
 810d5be:	230c      	movs	r3, #12
 810d5c0:	6033      	str	r3, [r6, #0]
 810d5c2:	4630      	mov	r0, r6
 810d5c4:	f000 f846 	bl	810d654 <__malloc_unlock>
 810d5c8:	e7e3      	b.n	810d592 <_malloc_r+0x1e>
 810d5ca:	6823      	ldr	r3, [r4, #0]
 810d5cc:	1b5b      	subs	r3, r3, r5
 810d5ce:	d417      	bmi.n	810d600 <_malloc_r+0x8c>
 810d5d0:	2b0b      	cmp	r3, #11
 810d5d2:	d903      	bls.n	810d5dc <_malloc_r+0x68>
 810d5d4:	6023      	str	r3, [r4, #0]
 810d5d6:	441c      	add	r4, r3
 810d5d8:	6025      	str	r5, [r4, #0]
 810d5da:	e004      	b.n	810d5e6 <_malloc_r+0x72>
 810d5dc:	6863      	ldr	r3, [r4, #4]
 810d5de:	42a2      	cmp	r2, r4
 810d5e0:	bf0c      	ite	eq
 810d5e2:	600b      	streq	r3, [r1, #0]
 810d5e4:	6053      	strne	r3, [r2, #4]
 810d5e6:	4630      	mov	r0, r6
 810d5e8:	f000 f834 	bl	810d654 <__malloc_unlock>
 810d5ec:	f104 000b 	add.w	r0, r4, #11
 810d5f0:	1d23      	adds	r3, r4, #4
 810d5f2:	f020 0007 	bic.w	r0, r0, #7
 810d5f6:	1ac2      	subs	r2, r0, r3
 810d5f8:	d0cc      	beq.n	810d594 <_malloc_r+0x20>
 810d5fa:	1a1b      	subs	r3, r3, r0
 810d5fc:	50a3      	str	r3, [r4, r2]
 810d5fe:	e7c9      	b.n	810d594 <_malloc_r+0x20>
 810d600:	4622      	mov	r2, r4
 810d602:	6864      	ldr	r4, [r4, #4]
 810d604:	e7cc      	b.n	810d5a0 <_malloc_r+0x2c>
 810d606:	1cc4      	adds	r4, r0, #3
 810d608:	f024 0403 	bic.w	r4, r4, #3
 810d60c:	42a0      	cmp	r0, r4
 810d60e:	d0e3      	beq.n	810d5d8 <_malloc_r+0x64>
 810d610:	1a21      	subs	r1, r4, r0
 810d612:	4630      	mov	r0, r6
 810d614:	f000 f808 	bl	810d628 <_sbrk_r>
 810d618:	3001      	adds	r0, #1
 810d61a:	d1dd      	bne.n	810d5d8 <_malloc_r+0x64>
 810d61c:	e7cf      	b.n	810d5be <_malloc_r+0x4a>
 810d61e:	bf00      	nop
 810d620:	100000cc 	.word	0x100000cc
 810d624:	100000d0 	.word	0x100000d0

0810d628 <_sbrk_r>:
 810d628:	b538      	push	{r3, r4, r5, lr}
 810d62a:	4d06      	ldr	r5, [pc, #24]	; (810d644 <_sbrk_r+0x1c>)
 810d62c:	2300      	movs	r3, #0
 810d62e:	4604      	mov	r4, r0
 810d630:	4608      	mov	r0, r1
 810d632:	602b      	str	r3, [r5, #0]
 810d634:	f7f3 fdd8 	bl	81011e8 <_sbrk>
 810d638:	1c43      	adds	r3, r0, #1
 810d63a:	d102      	bne.n	810d642 <_sbrk_r+0x1a>
 810d63c:	682b      	ldr	r3, [r5, #0]
 810d63e:	b103      	cbz	r3, 810d642 <_sbrk_r+0x1a>
 810d640:	6023      	str	r3, [r4, #0]
 810d642:	bd38      	pop	{r3, r4, r5, pc}
 810d644:	10000f24 	.word	0x10000f24

0810d648 <__malloc_lock>:
 810d648:	4801      	ldr	r0, [pc, #4]	; (810d650 <__malloc_lock+0x8>)
 810d64a:	f000 b809 	b.w	810d660 <__retarget_lock_acquire_recursive>
 810d64e:	bf00      	nop
 810d650:	10000f2c 	.word	0x10000f2c

0810d654 <__malloc_unlock>:
 810d654:	4801      	ldr	r0, [pc, #4]	; (810d65c <__malloc_unlock+0x8>)
 810d656:	f000 b804 	b.w	810d662 <__retarget_lock_release_recursive>
 810d65a:	bf00      	nop
 810d65c:	10000f2c 	.word	0x10000f2c

0810d660 <__retarget_lock_acquire_recursive>:
 810d660:	4770      	bx	lr

0810d662 <__retarget_lock_release_recursive>:
 810d662:	4770      	bx	lr

0810d664 <_init>:
 810d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d666:	bf00      	nop
 810d668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d66a:	bc08      	pop	{r3}
 810d66c:	469e      	mov	lr, r3
 810d66e:	4770      	bx	lr

0810d670 <_fini>:
 810d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d672:	bf00      	nop
 810d674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d676:	bc08      	pop	{r3}
 810d678:	469e      	mov	lr, r3
 810d67a:	4770      	bx	lr
